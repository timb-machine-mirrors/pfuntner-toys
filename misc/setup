#! /usr/bin/env python

import gzip
import base64
import logging
import argparse
import StringIO

parser = argparse.ArgumentParser(description='Set up a Unix machine')
parser.add_argument('-p', '--print', dest='print_to_stdout', action='store_true', help='Print script')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

script = """import os
import sys
import logging
import subprocess

def append(src, dst, extra='\\n'):
  log.info('Appending {src!r} to {dst!r}'.format(**locals()))
  with open(dst, 'a') as output:
    output.write(extra)
    with open(src) as input:
      output.write(input.read())

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG)

home = os.environ.get('HOME', os.getcwd())
repos = os.path.join(home, 'repos')
if os.path.isdir(repos):
  log.info('Using existing {repos}'.format(**locals()))
else:
  log.info('Creating {repos}'.format(**locals()))
  os.mkdir(repos)

if os.path.isdir(os.path.join(repos, 'toys')):
  log.info('Using existing {repos}/toys'.format(**locals()))
else:
  os.chdir(repos)
  cmd = 'git clone https://github.com/pfuntner/toys.git'.split()
  rc = subprocess.Popen(cmd).wait()
  if rc != 0:
    log.error('{cmd} failed'.format(**locals()))
    exit(1)
  os.chdir(home)

bin = os.path.join(home, 'bin')
if os.path.exists(bin):
  log.info('Leaving {bin} as-is'.format(**locals()))
else:
  cmd = 'ln -sv {repos}/toys/bin bin'.format(**locals()).split()
  rc = subprocess.Popen(cmd).wait()
  if rc != 0:
    log.error('{cmd} failed'.format(**locals()))
    exit(1)

p = subprocess.Popen([os.path.join(repos, 'toys/bin/bashprofiles')], stdout=subprocess.PIPE)
(stdout, stderr) = p.communicate()
rc = p.wait()
if (rc != 0) or (not stdout):
  log.error('bashprofiles failed')
  exit(1)

profile = stdout.splitlines()[0]
append(os.path.join(repos, 'toys/misc/.profile'), profile, extra='\\nPATH="$PATH:{repos}/toys/bin"\\n'.format(**locals()))
append(os.path.join(repos, 'toys/misc/.bashrc'), '.bashrc')
"""

log.info('script is {} bytes'.format(len(script)))
data = StringIO.StringIO()
zipper = gzip.GzipFile(fileobj=data, mode='w')
zipper.write(script)
zipper.close()
log.info('raw compressed data is {} bytes'.format(len(data.getvalue())))
data = base64.b64encode(data.getvalue())
log.info('encoded compressed data is {} bytes'.format(len(data)))

print
print '# start'
print

print """echo '{data}' | base64 -d | gzip -d""".format(**locals()) + ("" if args.print_to_stdout else """ | python && . $($HOME/repos/toys/bin/bashprofiles) && . $HOME/.bashrc""")

print
print '# end'
print

