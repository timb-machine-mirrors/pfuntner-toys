#! /usr/bin/env python3

import os
import re
import stat
import logging
import argparse

def banner(s):
  print('*' * (len(s) + 4))
  print(f'* {s} *')
  print('*' * (len(s) + 4), flush=True)

def ischarspecial(path):
  try:
    return stat.S_ISCHR(os.stat(path).st_mode)
  except Exception as e:
    log.debug(f'stat.S_ISCHR({path!r}) threw {e!s}')
    return False

def ispipe(path):
  try:
    return stat.S_ISFIFO(os.stat(path).st_mode)
  except Exception as e:
    log.debug(f'stat.S_ISFIFO({path!r}) threw {e!s}')
    return False

def is_regfile_or_pipe(path):
  return os.path.isfile(path) or ispipe(path)

def describe_file(path):
  if not os.path.exists(path):
    return 'does not exist'
  elif os.path.isdir(path):
    return 'a directory'
  elif os.path.isfile(path):
    return 'a file'
  elif ispipe(path):
    return 'a pipe/fifo'
  elif ischarspecial(path):
    return 'a character special file'
  else:
    return 'an unknown filetype'

def read(path):
  data = ''
  try:
    with open(path) as stream:
      data = stream.read()
  except Exception as e:
    log.warn(f'{e!s} while reading {path!r}')
  return data.splitlines()

def dive(path1, path2):
  log.debug(f'dive({path1!r}, {path2!r})')
  if all(map(os.path.isdir, [path1, path2])):
    for filename in set(os.listdir(path1) + os.listdir(path2)):
     dive(os.path.join(path1, filename), os.path.join(path2, filename))
  elif all(map(is_regfile_or_pipe, [path1, path2])):
    banner(f'{path1!r} {path2!r}')
    lines1 = read(path1)
    lines2 = read(path2)
    for line in lines1:
      if not_comment.search(line):
        if (line in lines2):
          if not args.suppress_both:
            print(f'\t\t{line}')
        elif not args.suppress_file1:
          print(f'{line}')
    for line in lines2:
      if not_comment.search(line) and (line not in lines1):
        if not args.suppress_file2:
          print(f'\t{line}')
  else:
    type1 = describe_file(path1)
    type2 = describe_file(path2)
    log.warn(f'{path1!r} is {type1} and {path2!r} is {type2}')

parser = argparse.ArgumentParser(description='Compare lines in files')

parser.add_argument('-1', '--suppress_file1', action='store_true', help='Suppress unique lines in file1')
parser.add_argument('-2', '--suppress_file2', action='store_true', help='Suppress unique lines in file2')
parser.add_argument('-3', '--suppress_both', action='store_true', help='Suppress in both file1 and file2')

parser.add_argument('file1', help='Path to file 1')
parser.add_argument('file2', help='Path to file 2')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

log.debug(f'args: {args}')
"""
if not any([args.suppress_file1, args.suppress_file2, args.suppress_both]):
  parser.error('Specify -1, -2, and/or -3')
"""

not_comment = re.compile(r'^[^#]*\w')

dive(args.file1, args.file2)
