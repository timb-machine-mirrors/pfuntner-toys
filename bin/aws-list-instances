#! /usr/bin/env python3

import json
import signal
import logging
import argparse
import subprocess

from table import Table

def get_tag(tags, tag_name):
  ret = ''
  for tag in tags:
    if tag.get('Key') == tag_name:
      ret = tag.get('Value', '')
      break
  return ret

def dive(root, *names):
  id = instance.get('InstanceId', '')

  for name in names:
    log.info(f'{id} {root!s}')
    if isinstance(root, dict) and name in root:
      root = root[name]
      if isinstance(root, str):
        break
      else:
        if isinstance(root, list) and root:
          root = root[0]
        else:
          root = ''
          break
    else:
      root = ''
      break
  return root

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  if stdin:
    p.stdin.write(stdin.encode())
    p.stdin.close()
  if capture:
    (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    # alternately, if trapping is conditional:
    # if trap:
    #   stdout = stdout.decode('utf-8')
    #   stderr = stderr.decode('utf-8')
  else:
    (stdout, stderr) = ('', '')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='List AWS instances')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)


signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

(rc, stdout, stderr) = run('aws ec2 describe-instances')
if rc == 0 and stdout:
  """
    /Reservations/0/Instances/0/AmiLaunchIndex 0
    /Reservations/0/Instances/0/Architecture 'x86_64'
    /Reservations/0/Instances/0/BlockDeviceMappings/0/DeviceName '/dev/sda1'
    /Reservations/0/Instances/0/BlockDeviceMappings/0/Ebs/AttachTime '2020-06-18T12:49:34+00:00'
    /Reservations/0/Instances/0/BlockDeviceMappings/0/Ebs/DeleteOnTermination False
    /Reservations/0/Instances/0/BlockDeviceMappings/0/Ebs/Status 'attached'
    /Reservations/0/Instances/0/BlockDeviceMappings/0/Ebs/VolumeId 'vol-049e3005ed467ab84'
    /Reservations/0/Instances/0/CapacityReservationSpecification/CapacityReservationPreference 'open'
    /Reservations/0/Instances/0/ClientToken ''
    /Reservations/0/Instances/0/CpuOptions/CoreCount 1
    /Reservations/0/Instances/0/CpuOptions/ThreadsPerCore 1
    /Reservations/0/Instances/0/EbsOptimized False
    /Reservations/0/Instances/0/EnaSupport True
    /Reservations/0/Instances/0/EnclaveOptions/Enabled False
    /Reservations/0/Instances/0/HibernationOptions/Configured False
    /Reservations/0/Instances/0/Hypervisor 'xen'
    /Reservations/0/Instances/0/ImageId 'ami-77ec9308'
    /Reservations/0/Instances/0/InstanceId 'i-04d7ac9c7285f8611'
    /Reservations/0/Instances/0/InstanceType 't2.micro'
    /Reservations/0/Instances/0/KeyName 'doppecke-aws-key'
    /Reservations/0/Instances/0/LaunchTime '2020-06-18T12:49:34+00:00'
    /Reservations/0/Instances/0/MetadataOptions/HttpEndpoint 'enabled'
    /Reservations/0/Instances/0/MetadataOptions/HttpPutResponseHopLimit 1
    /Reservations/0/Instances/0/MetadataOptions/HttpTokens 'optional'
    /Reservations/0/Instances/0/MetadataOptions/State 'applied'
    /Reservations/0/Instances/0/Monitoring/State 'disabled'
    /Reservations/0/Instances/0/NetworkInterfaces/0/Attachment/AttachTime '2020-06-18T12:49:34+00:00'
    /Reservations/0/Instances/0/NetworkInterfaces/0/Attachment/AttachmentId 'eni-attach-0d851743a19e1da05'
    /Reservations/0/Instances/0/NetworkInterfaces/0/Attachment/DeleteOnTermination True
    /Reservations/0/Instances/0/NetworkInterfaces/0/Attachment/DeviceIndex 0
    /Reservations/0/Instances/0/NetworkInterfaces/0/Attachment/NetworkCardIndex 0
    /Reservations/0/Instances/0/NetworkInterfaces/0/Attachment/Status 'attached'
    /Reservations/0/Instances/0/NetworkInterfaces/0/Description ''
    /Reservations/0/Instances/0/NetworkInterfaces/0/Groups/0/GroupId 'sg-06167e6fd2ef7cc56'
    /Reservations/0/Instances/0/NetworkInterfaces/0/Groups/0/GroupName 'locked-down-sg'
    /Reservations/0/Instances/0/NetworkInterfaces/0/InterfaceType 'interface'
    /Reservations/0/Instances/0/NetworkInterfaces/0/MacAddress '06:33:41:4e:6d:29'
    /Reservations/0/Instances/0/NetworkInterfaces/0/NetworkInterfaceId 'eni-0ea426e46173aa0f4'
    /Reservations/0/Instances/0/NetworkInterfaces/0/OwnerId '338885122066'
    /Reservations/0/Instances/0/NetworkInterfaces/0/PrivateDnsName 'ip-172-31-34-17.ec2.internal'
    /Reservations/0/Instances/0/NetworkInterfaces/0/PrivateIpAddress '172.31.34.17'
    /Reservations/0/Instances/0/NetworkInterfaces/0/PrivateIpAddresses/0/Primary True
    /Reservations/0/Instances/0/NetworkInterfaces/0/PrivateIpAddresses/0/PrivateDnsName 'ip-172-31-34-17.ec2.internal'
    /Reservations/0/Instances/0/NetworkInterfaces/0/PrivateIpAddresses/0/PrivateIpAddress '172.31.34.17'
    /Reservations/0/Instances/0/NetworkInterfaces/0/SourceDestCheck True
    /Reservations/0/Instances/0/NetworkInterfaces/0/Status 'in-use'
    /Reservations/0/Instances/0/NetworkInterfaces/0/SubnetId 'subnet-221b9d1e'
    /Reservations/0/Instances/0/NetworkInterfaces/0/VpcId 'vpc-809519e6'
    /Reservations/0/Instances/0/Placement/AvailabilityZone 'us-east-1e'
    /Reservations/0/Instances/0/Placement/GroupName ''
    /Reservations/0/Instances/0/Placement/Tenancy 'default'
    /Reservations/0/Instances/0/PrivateDnsName 'ip-172-31-34-17.ec2.internal'
    /Reservations/0/Instances/0/PrivateIpAddress '172.31.34.17'
    /Reservations/0/Instances/0/PublicDnsName ''
    /Reservations/0/Instances/0/RootDeviceName '/dev/sda1'
    /Reservations/0/Instances/0/RootDeviceType 'ebs'
    /Reservations/0/Instances/0/SecurityGroups/0/GroupId 'sg-06167e6fd2ef7cc56'
    /Reservations/0/Instances/0/SecurityGroups/0/GroupName 'locked-down-sg'
    /Reservations/0/Instances/0/SourceDestCheck True
    /Reservations/0/Instances/0/State/Code 80
    /Reservations/0/Instances/0/State/Name 'stopped'
    /Reservations/0/Instances/0/StateReason/Code 'Client.UserInitiatedShutdown'
    /Reservations/0/Instances/0/StateReason/Message 'Client.UserInitiatedShutdown: User initiated shutdown'
    /Reservations/0/Instances/0/StateTransitionReason 'User initiated (2020-10-06 20:22:08 GMT)'
    /Reservations/0/Instances/0/SubnetId 'subnet-221b9d1e'
    /Reservations/0/Instances/0/Tags/0/Key 'DataTaxonomy'
    /Reservations/0/Instances/0/Tags/0/Value 'Cisco Strategic Data'
    /Reservations/0/Instances/0/Tags/1/Key 'DataClassification'
    /Reservations/0/Instances/0/Tags/1/Value 'Cisco Public'
    /Reservations/0/Instances/0/Tags/2/Key 'ResourceOwner'
    /Reservations/0/Instances/0/Tags/2/Value 'STO Cloud9'
    /Reservations/0/Instances/0/Tags/3/Key 'ApplicationName'
    /Reservations/0/Instances/0/Tags/3/Value 'STO Cloud9 Hardening'
    /Reservations/0/Instances/0/Tags/4/Key 'Name'
    /Reservations/0/Instances/0/Tags/4/Value 'doppecke_centos7'
    /Reservations/0/Instances/0/Tags/5/Key 'CiscoMailAlias'
    /Reservations/0/Instances/0/Tags/5/Value 'cloud9-support@cisco.com'
    /Reservations/0/Instances/0/Tags/6/Key 'Environment'
    /Reservations/0/Instances/0/Tags/6/Value 'Sandbox'
    /Reservations/0/Instances/0/VirtualizationType 'hvm'
    /Reservations/0/Instances/0/VpcId 'vpc-809519e6'
    /Reservations/0/OwnerId '338885122066'
    /Reservations/0/ReservationId 'r-01ae0e81f7458cf2a'

      "PrivateIpAddresses": [
        {
          "Association": {
            "IpOwnerId": "amazon",
            "PublicDnsName": "ec2-54-89-251-82.compute-1.amazonaws.com",
            "PublicIp": "54.89.251.82"
          },
          "Primary": true,
          "PrivateDnsName": "ip-172-31-63-187.ec2.internal",
          "PrivateIpAddress": "172.31.63.187"
        }
      ],

  """
  reservations = json.loads(stdout).get('Reservations', [])

  table = Table('Name', 'State', 'IP', 'ID', 'AMI', 'Key', 'Launched')
  for reservation in reservations:
    instances = reservation.get('Instances', [])
    if instances:
      instance = instances[0]

      # log.info('1: ' + str(instance.get('NetworkInterfaces', [{}])))
      # log.info('2: ' + str(instance.get('NetworkInterfaces', [{}])[0].get('PrivateIpAddresses', '')))
      # log.info('3: ' + instance.get('NetworkInterfaces', [{}])[0].get('PrivateIpAddresses', [{}])[0].get('PrivateIpAddress', ''))

      table.add(
        get_tag(instance.get('Tags', []), 'Name'),
        instance.get('State', []).get('Name', ''),
        dive(instance, 'NetworkInterfaces', 'PublicIpAddresses', 'PublicIpAddress'),
        instance.get('InstanceId', ''),
        instance.get('ImageId', ''),
        instance.get('KeyName', ''),
        instance.get('LaunchTime', ''),
      )

  print(str(table), end='')
else:
  parser.error(f'describe-instances failed: {stderr!r}')
