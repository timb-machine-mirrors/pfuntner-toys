#! /usr/bin/env python3

import signal
import logging
import argparse
import tempfile
import subprocess

def run(cmd, capture=True):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None)
  if capture:
    (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  else:
    (stdout, stderr) = ('', '')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Print values of Ansible variables')
parser.add_argument('vars', help='Ansible variable(s) to report, comma-delimited')
parser.add_argument('hosts', help='Host(s) to examine, comma-delimited')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

hosts = ' '.join(args.hosts.split(','))

stream = tempfile.NamedTemporaryFile(mode='w')
stream.write(f"""- name: "Display {args.vars} on {args.hosts}"
  hosts: {hosts}
  tasks:
""")

for var in args.vars.split(','):
  stream.write(f"""  - name: "Display {var}"
    debug:
      msg: "{var}: {{{{{var}}}}}"
""")

stream.flush()

run(f'cat {stream.name}')
run(f'ansible-playbook {stream.name}', capture=False)
