#! /usr/bin/env python3

import re
import sys
import logging
import datetime
import argparse

def see(expr):
  value = eval(expr)
  log.debug('{expr}: {value!r}'.format(**locals()))

def process_time():
  global args
  timedelta_parms = {}

  arg = args.args.pop(0)
  match = float_regexp.search(str(arg))
  log.debug('float_regexp: {groups}'.format(groups=match.groups() if match else None))
  if match:
    value = float(match.group(1))
    suffix = match.group(2)
    if not suffix:
      if args.args:
        suffix = args.args.pop(0)
      else:
        args.args.insert(0, arg)
        raise Exception('No suffix: {arg!s} - not a time'.format(**locals()))
    log.debug('value: {value}, suffix: {suffix!r}'.format(**locals()))
    for timedelta_arg in timedelta_args:
      if timedelta_arg.startswith(suffix):
        timedelta_parms[timedelta_arg] = value
        break
    else:
      args.args.insert(0, suffix)
      args.args.insert(0, arg)
      raise Exception('{suffix!r} is not one of {timedelta_args} - not a time'.format(**locals()))
    log.debug('timedelta_parms: {timedelta_parms}'.format(**locals()))
    td = datetime.timedelta(**timedelta_parms)
    log.debug('td: {td}'.format(**locals()))
    sys.stdout.write('{value} {suffix} {td}: '.format(**locals()))
    value = td.total_seconds()
    sys.stdout.write('{value:.4f}s, '.format(**locals()))
    value /= 60
    sys.stdout.write('{value:.4f}m, '.format(**locals()))
    value /= 60
    sys.stdout.write('{value:.4f}h, '.format(**locals()))
    value /= 24
    sys.stdout.write('{value:.4f}d\n'.format(**locals()))
  else:
    args.args.insert(0, arg)
    raise Exception('No float: {arg!s} - not a time'.format(**locals()))

parser = argparse.ArgumentParser(description='Find equivalencies')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('args', metavar='arg', nargs='+', help='Values to print in equivalent forms')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

timedelta_args = ['days', 'hours', 'minutes', 'seconds']
see('timedelta_args')
float_regexp = re.compile('^((?:\d+\.?\d*)|(?:\d*\.\d+))(.*)$')

while args.args:
  try:
    process_time()
  except Exception as e:
    log.info('Caught {e!s} parsing {args.args} as time'.format(**locals()))
    parser.error('Don\'t understand {arg!r}'.format(arg=args.args[0]))
