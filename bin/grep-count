#! /usr/bin/env python3

import re
import sys
import signal
import logging
import argparse

def process(source):
  if isinstance(source, str):
    stream = open(source)
    filename = source
    use_stdin = False
  else:
    stream = sys.stdin
    filename = 'stdin'
    use_stdin = True

  count = 0

  for line in stream.read().splitlines():
    count += 1 if regexp.search(line) else 0

  if not use_stdin:
    stream.close()

  print(f'{(filename + ": ") if not use_stdin else ""}{count}')

parser = argparse.ArgumentParser(description='Count occurrences of regular expressions')
parser.add_argument('regexp', help='Regular expression for which to search')
parser.add_argument('files', metavar='file', nargs='*', help='Zero or more files to search')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

regexp = re.compile(args.regexp)

if args.files:
  for filename in args.files:
    process(filename)
else:
  if sys.stdin.isatty():
    parser.error('stdin must be redirected if no files are provided')
  process(sys.stdin)
