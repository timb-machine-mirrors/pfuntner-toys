#! /usr/bin/env python2

import re
import sys
import signal
import logging
import argparse

from color import Color

def toLeft(s, width):
  return s.ljust(width)

def toRight(s, width):
  return s.rjust(width)

def toCenter(s, width):
  return s.center(width)

def process(lines):
  maxWidth = max([len(line) for line in lines])
  log.debug('maxWidth: {maxWidth}'.format(**locals()))
  print ("%s%s%s" % (topLeftCorner, horizontal * (maxWidth+2), topRightCorner)).encode('utf-8')
  for line in lines:
    print ("%s %s %s" % (vertical, just(line, maxWidth), vertical)).encode('utf-8')
  print ("%s%s%s" % (bottomLeftCorner, horizontal * (maxWidth+2), bottomRightCorner)).encode('utf-8')

def reset(signum=None, stack=None):
  Color.print_color('0')
  if signum is not None:
    sys.stdout.write('\n')
  exit(0)

horizontal = unichr(9473)
parser = argparse.ArgumentParser(description='Print a message or information in a pretty banner')

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG) # uncomment this to enable debugging in get_color() method

group = parser.add_mutually_exclusive_group()
group.add_argument('-C', '--character', dest='character', help='Character to use to construct banner')
group.add_argument('-H', '--hash', dest='hash', action='store_true', help='Construct banner with hash signs rather than cool `line art` characters')

group = parser.add_mutually_exclusive_group()
group.add_argument('-c', '--center', dest='center', action='store_true', help='Center text inside banner')
group.add_argument('-r', '--right', dest='right', action='store_true', help='Right-justify text inside banner')

parser.add_argument('--color', type=Color.get_color,
                    help='Choose a color: {colors}'.format(colors=', '.join(Color.colors.keys())))
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')

parser.add_argument('args', metavar='arg', nargs='*', help='Provide a message on the command line')
args = parser.parse_args()

log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

log.debug('args: {args}'.format(**locals()))

vertical = unichr(9475)

topLeftCorner = unichr(9487)
topRightCorner = unichr(9491)
bottomLeftCorner = unichr(9495)
bottomRightCorner = unichr(9499)

fillChar = '#'

box = True
if args.character:
  box = False
  fillChar = args.character
elif args.hash:
  box = False

just = toLeft
if args.center:
  just = toCenter
elif args.right:
  just = toRight

if not box:
  horizontal = fillChar
  vertical = fillChar

  topLeftCorner = fillChar
  topRightCorner = fillChar
  bottomLeftCorner = fillChar
  bottomRightCorner = fillChar

if (not args) and sys.stdin.isatty():
  syntax("Text must be on the command line or redirected through stdin")

signal.signal(signal.SIGINT, reset)
Color.print_color(args.color)

if args.args:
  process([' '.join(args.args)])
else:
  process(sys.stdin.read().strip('\n').split('\n')) 

reset()
