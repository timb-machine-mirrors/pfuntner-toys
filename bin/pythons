#! /usr/bin/env python

import os
import re
import sys
import logging
import argparse
import subprocess

from simpletable import Table

def run(cmd):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = p.communicate()

  # (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  # alternately, if trapping is conditional:
  # if trap:
  #   stdout = stdout.decode('utf-8')
  #   stderr = stderr.decode('utf-8')

  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

def look_for(dir, target):
  global table

  path = os.path.join(dir, target)
  if os.path.isfile(path):
    (rc, stdout, stderr) = run([path, '--version'])
    version = (stdout + stderr).decode('utf-8').replace('\n', ' ').replace('\r', '').strip()
    if not args.dumb:
      for token in version.split():
        if version_regexp.search(token):
          version = token
          break
    table.add(target, dir, version)
    return True
  else:
    return False

parser = argparse.ArgumentParser(description='Show Python interpreters/versions')
parser.add_argument('-a', '--all', action='store_true', help='Find all instances of targets in PATH')
parser.add_argument('-d', '--dumb', action='store_true', help='Do not try to parse out version')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

version_regexp = re.compile(r'\d\.')

table = Table('Name', 'Location', 'Version')

for target in ['python', 'python2', 'python3']:
  found = False
  processed = []
  for dir in os.environ['PATH'].split(':'):
    if dir not in processed:
      processed.append(dir)
      if look_for(dir, target):
        found = True
        if not args.all:
          break
    else:
      log.debug('Skipping {dir} since it was already processed'.format(**locals()))

  if not found:
    table.add(target, 'n/a', '')

table.close()
