#! /usr/bin/env python3

import subprocess
import datetime
import json
import sys
import getopt
import re
import time

"""
# FROM='HH:MM_YYYYMMDD'
FROM='20170520'
UNTIL='20170522'
curl -X POST "http://localhost:8000/render?target=hyperledger.rtp.9_42_83_35.pfuntner1.cpu*.percent-user&from=${FROM}&until=${UNTIL}&format=json"
"""

def syntax():
  sys.stderr.write("Syntax: %s [-h|--host HOST] [-p|--port PORT] [-U|--user USER -P|--password PASSWORD -O|--org ORG -S|--space SPACE] [metric-prefix]\n" % sys.argv[0])
  exit(1)

host = "localhost"
port = 80
verbose = False

protocol = "http"

bluemix = {}
bluemix["BLUEMIX_USERNAME"] = None
bluemix["BLUEMIX_PASSWORD"] = None
bluemix["BLUEMIX_ORG"] = None
bluemix["BLUEMIX_SPACE"] = None

metric = '*'

(opts, args) = ([], [])

try:
  (opts,args) = getopt.getopt(sys.argv[1:], "h:p:nvU:P:O:S:", ["host=", "port=", "verbose", "user=", "password=", "org=", "space="])
except Exception as e:
  sys.stderr.write("Caught: %s\n" % repr(e))
  syntax()

for (opt,arg) in opts:
  if opt in ["-h", "--host"]:
    host = arg
  elif opt in ["-p", "--port"]:
    port = int(arg)
  elif opt in ["-v", "--verbose"]:
    verbose = not verbose
  elif opt in ["-U", "--user"]:
    bluemix["BLUEMIX_USERNAME"] = arg
  elif opt in ["-P", "--password"]:
    bluemix["BLUEMIX_PASSWORD"] = arg
  elif opt in ["-O", "--org"]:
    bluemix["BLUEMIX_ORG"] = arg
  elif opt in ["-S", "--space"]:
    bluemix["BLUEMIX_SPACE"] = arg
  else:
    sys.stderr.write("Don't know how to handle %s\n" % repr(opt))
    syntax()

if sum([0 if bluemix[key] == None else 1 for key in bluemix]) not in [0,4]:
  sys.stderr.write("Either specify user, password, org, and space options for Bluemix or none of them\n")
  syntax()

if len(args) > 1:
  sys.stderr.write("Too many metrics specified: %s\n" % args)
  syntax()

if args:
  metric = args[0] + ".*"

login = {}
"""
  After logging into Bluemix, these keys will be in the `login` dictionary:
    access_token
    logging_token
    organization_id
    space_id
"""

if bluemix["BLUEMIX_USERNAME"]:
  protocol = "https"
  port = 443

  cmd = ["curl", "-k", "-q", "-XPOST", "-d", "user=%(BLUEMIX_USERNAME)s&passwd=%(BLUEMIX_PASSWORD)s&organization=%(BLUEMIX_ORG)s&space=%(BLUEMIX_SPACE)s" % bluemix, "https://%s/login" % host]

  if verbose:
    sys.stderr.write("%s\n" % cmd)

  attempts = 0
  while not login:
    assert attempts < 10, "Giving up after %d attempts" % attempts
    attempts += 1
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (stdout, stderr) = p.communicate()
    rc = p.wait()
    try:
      login = json.loads(stdout)
    except Exception as e:
      sys.stderr.write("Login #%d: Caught %s, rc: %d, stdout: %s, stderr: %s\n" % (attempts, repr(e), rc, repr(stdout), repr(stderr)))
      time.sleep(1)

  assert "errors" not in login, "Bluemix login error: %s" % login["errors"]
    
  if verbose:
    sys.stderr.write("Logged into Bluemix\n%s\n" % json.dumps(login, indent=2, sort_keys=True))

cmd = ["curl", "-X", "GET", "%s://%s:%d%s/metrics/find?query=%s" % (protocol, host, port, "/graphite" if login else "", metric)]

if login:
  cmd.insert(1, "--header")
  cmd.insert(2, "X-Auth-Token:" + login["access_token"])
  cmd.insert(3, "--header")
  cmd.insert(4, "X-Auth-Project-Id:" + login["space_id"])
  cmd.insert(5, "--header")
  cmd.insert(6, "X-Forwarded-Proto:https")

if verbose:
  sys.stderr.write("%s\n" % cmd)

metrics = {}
p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
(stdout, stderr) = p.communicate()
rc = p.wait()
try:
  metrics = json.loads(stdout)
except Exception as e:
  sys.stderr.write("Caught %s, rc: %d, stdout: %s, stderr: %s\n" % (repr(e), rc, repr(stdout), repr(stderr)))
  exit(1)

print(json.dumps([metric["id"] for metric in metrics], indent=2))
