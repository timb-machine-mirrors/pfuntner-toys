#! /usr/bin/env python3

import os
import re
import logging
import argparse
import subprocess

def run(cmd):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  # alternately, if trapping is conditional:
  # if trap:
  #   stdout = stdout.decode('utf-8')
  #   stderr = stderr.decode('utf-8')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Test if there are pending updates to the master branch')
parser.add_argument('paths', metavar='path', default=['.'], nargs='*', help='Paths to test, default: ["."]')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

original_dir = os.path.abspath(os.getcwd())
log.debug(f'original directory: {original_dir!r}')

"""
cd05e6ea59c1101df2c0601ce76dd3b0c82493ac
[mrbruno@bruno-meerkat fake2 master]$ git rev-parse master
cd05e6ea59c1101df2c0601ce76dd3b0c82493ac

[mrbruno@bruno-meerkat fake2 master]$ git remote -v
origin	git@github.com:pfuntner/fake.git (fetch)
origin	git@github.com:pfuntner/fake.git (push)
[mrbruno@bruno-meerkat fake2 master]$ git remote -v | columns 2
git@github.com:pfuntner/fake.git
git@github.com:pfuntner/fake.git
[mrbruno@bruno-meerkat fake2 master]$ git remote -v | columns 2 | uniq
git@github.com:pfuntner/fake.git
[mrbruno@bruno-meerkat fake2 master]$ git ls-remote $(git remote -v | columns 2 | uniq) master
1432f9d5f05af779b198b9a2be8ced00c920e999	refs/heads/master
[mrbruno@bruno-meerkat fake2 master]$ repos ..
"""

for path in args.paths:
  log.info(f'Processing {path!r}')
  if os.path.isdir(path):
    os.chdir(path)
    (rc, stdout, stderr) = run('git rev-parse master')
    local_sha1 = stdout.strip()
    log.info(f'local SHA1: {local_sha1!r}')
    if local_sha1:
      (rc, stdout, stderr) = run('git remote -v')
      match = re.search(r'^origin+\s+(\S+)\s+\((?:fetch|push)\)$', stdout, flags=re.MULTILINE)
      if match:
        remote_url = match.group(1)
        (rc, stdout, stderr) = run(f'git ls-remote {remote_url} master')
        match = re.search('^([0-9a-f]{40})\s', stdout)
        if match:
          remote_sha1 = match.group(1)
          log.info(f'remote SHA1: {remote_sha1!r}')
          if local_sha1 == remote_sha1:
            print(f'No updates for {path!r}')
          else:
            print(f'Update {path!r} to {remote_sha1}')
        else:
          parser.error(f'No remote sha1 for {path!r}')
      else:
        parser.error(f'No remote url for {path!r}')
    else:
      parser.error(f'No local SHA1 for {path!r}')
    
    os.chdir(original_dir)
  else:
    parser.error(f'Not a directory: {path!r}')
