#! /usr/bin/env python3

import os
import sys
import time
import signal
import logging
import argparse
import datetime

INTERVAL_DEFAULT = 1
DURATION_DEFAULT = 30
LOG_PATH = f'/tmp/{os.path.basename(sys.argv[0])}.log'

signals = {
  1: 'SIGHUP',
  2: 'SIGINT',
  3: 'SIGQUIT',
  4: 'SIGILL',
  5: 'SIGTRAP',
  6: 'SIGABRT',
  6: 'SIGIOT',
  7: 'SIGBUS',
  8: 'SIGFPE',
  9: 'SIGKILL',
  10: 'SIGUSR1',
  11: 'SIGSEGV',
  12: 'SIGUSR2',
  13: 'SIGPIPE',
  14: 'SIGALRM',
  15: 'SIGTERM',
  16: 'SIGSTKFLT',
  17: 'SIGCHLD',
  18: 'SIGCONT',
  19: 'SIGSTOP',
  20: 'SIGTSTP',
  21: 'SIGTTIN',
  22: 'SIGTTOU',
  23: 'SIGURG',
  24: 'SIGXCPU',
  25: 'SIGXFSZ',
  26: 'SIGVTALRM',
  27: 'SIGPROF',
  28: 'SIGWINCH',
  29: 'SIGIO',
  30: 'SIGPWR',
  31: 'SIGSYS',
  31: 'SIGUNUSED',
}

def interrupt(signum, stack_frame):
  global interrupted
  log.info(f'Caught {signals.get(signum, signum)} signal')
  interrupted = True

parser = argparse.ArgumentParser(description='Sleep and write to a log')
parser.add_argument('-i', '--interval', default=INTERVAL_DEFAULT, type=float, help=f'Number of seconds between polling (default: INTERVAL_DEFAULT)')
parser.add_argument('-d', '--duration', default=DURATION_DEFAULT, type=float, help=f'Number of seconds to sleep (default: DURATION_DEFAULT)')
parser.add_argument('-p', '--log-path', default=LOG_PATH, help=f'Path to log file (default: {LOG_PATH!r}, use `-` for stderr)')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

parms = {
  'format': '%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s',
}
if args.log_path != '-':
  parms['filename'] = args.log_path
  parms['filemode'] = 'a'
logging.basicConfig(**parms)

log = logging.getLogger()
log.setLevel(logging.INFO - (args.verbose or 0)*10)

interrupted = False

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))
signal.signal(signal.SIGINT, interrupt)

iteration = 0
log.info(f'Welcome to {sys.argv[0]}')
end_time = datetime.datetime.now() + datetime.timedelta(seconds=args.duration)
while not interrupted:
  log.info(f'Iteration {iteration}')
  iteration += 1
  time.sleep(args.interval)
  if datetime.datetime.now() > end_time:
    break
log.info(f'Goodbye from {sys.argv[0]}')
