#! /usr/bin/env python3

import re
import sys
import json
import time
import signal
import logging
import argparse
import datetime
import subprocess

def run(struct, cmd):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Executing {cmd}'.format(**locals()))
  struct['start'] = datetime.datetime.now()
  struct['cmd'] = cmd
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (struct['stdout'], struct['stderr']) = tuple([s.decode('utf-8') for s in p.communicate()])
  struct['rc'] = p.wait()
  stop = datetime.datetime.now()
  struct['seconds'] = (stop-struct['start']).total_seconds()
  struct['start'] = struct['start'].isoformat()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**struct))

def ping(struct, host):
  # Minimum = 0ms, Maximum = 0ms, Average = 0ms
  run(struct, f'ping {ping_options} {host}')
  ret = struct['rc'] == 0 and (' 0% packet loss' in struct['stdout'] or ' Lost = 0 (0% loss)' in struct['stdout'])
  return ret

def test(host, user=None):
  global iteration

  struct = {
    'host': host,
    'status': None,
    'iteration': iteration,
    'method': '',
    'ping': {},
    'ssh': {}
  }
  if ping(struct['ping'], host):
    struct['status'] = True
    struct['method'] = 'ping'
  else:
    run(struct['ssh'], 'ssh {user}{host} exit 42'.format(
      user=f'{user}@' if user else '',
      host=host
    ))
    if struct['ssh']['rc'] == 42:
      struct['status'] = True
      struct['method'] = 'ssh'

  struct['status'] = bool(struct['status'])
  if args.json:
    print(json.dumps(struct, sort_keys=True))
  else:
    print('{host:32} {status!s:5} {method:4}'.format(
      host=struct['host'],
      method=struct['method'],
      status=struct['status'],
    ))

parser = argparse.ArgumentParser(description='Test connectivity to target hosts via ping & ssh')
parser.add_argument('hosts', metavar='host', nargs='+', help='One or more hosts')
parser.add_argument('-s', '--sleep', default='15', type=float, help='Interval between iterations in seconds')
parser.add_argument('-c', '--continuous', action='store_true', help='Test hosts continually')
parser.add_argument('-j', '--json', action='store_true', help='Render output in JSON')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

host_regexp = re.compile(r'^(?:([^@]+)@)?(.+)$')

if 'win' in sys.platform.lower():
  ping_options = '-n 1 -w 1000'
else:
  ping_options = '-c1 -w1'

iteration = 0

while True:
  iteration += 1
  for host in args.hosts:
    match = host_regexp.search(host)
    if match:
      user = match.group(1)
      host = match.group(2)
      test(host, user)
    else:
      log.warning(r'Invalid host: {host!r}')
  if not args.continuous:
    break
  else:
    time.sleep(args.sleep)
