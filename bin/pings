#! /usr/bin/env python3

import re
import sys
import json
import time
import signal
import logging
import argparse
import datetime
import subprocess

def signal_handler(signum, frame):
  log.info('Handling CTRL-C')
  exit(0)

def run(struct, cmd):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Executing {cmd}'.format(**locals()))
  struct['start'] = datetime.datetime.now()
  struct['cmd'] = cmd
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (struct['stdout'], struct['stderr']) = tuple([s.decode('utf-8') for s in p.communicate()])
  struct['rc'] = p.wait()
  struct['stop'] = datetime.datetime.now()
  struct['seconds'] = (struct['stop']-struct['start']).total_seconds()
  struct['start'] = struct['start'].isoformat()
  struct['stop'] = struct['stop'].isoformat()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**struct))

def colorize(status):
  if status == 'Status':
    status = f'\x1b[0;0m{status}\x1b[;0m'  # no color
  elif status == True:
    status = f'\x1b[0;32m{status}\x1b[;0m' # green
  else:
    status = f'\x1b[0;31m{status}\x1b[;0m' # red
  return status

def echo(struct, *columns):
  if args.continuous:
    if struct:
      columns += (struct.get('ssh', {}).get('start').replace('T', ' ') or struct.get('ping', {}).get('start').replace('T', ' '),)
    else:
      columns += ('',)

  # [ubuntu@pfuntner-ubuntu basehost]$ (date | color.py red; date | color.py green) | hex
  # 00000000 \x1b    [    0    ;    3    1    m    M    o    n         M    a    y         1
  #            1b   5b   30   3b   33   31   6d   4d   6f   6e   20   4d   61   79   20   31
  # 00000010    7         1    3    :    4    9    :    0    5         E    D    T         2
  #            37   20   31   33   3a   34   39   3a   30   35   20   45   44   54   20   32
  # 00000020    0    2    1   \n \x1b    [    0    m \x1b    [    0    ;    3    2    m    M
  #            30   32   31   0a   1b   5b   30   6d   1b   5b   30   3b   33   32   6d   4d
  # 00000030    o    n         M    a    y         1    7         1    3    :    4    9    :
  #            6f   6e   20   4d   61   79   20   31   37   20   31   33   3a   34   39   3a
  # 00000040    0    5         E    D    T         2    0    2    1   \n \x1b    [    0    m
  #            30   35   20   45   44   54   20   32   30   32   31   0a   1b   5b   30   6d
  # [ubuntu@pfuntner-ubuntu basehost]$

  columns = (columns[0:1]) + (colorize(columns[1]), ) + (columns[2:])

  print(echo_format.format(*columns))

def ping(struct, host):
  run(struct, f'ping {ping_options} {host}')
  ret = struct['rc'] == 0 and (' 0% packet loss' in struct['stdout'] or ' Lost = 0 (0% loss)' in struct['stdout'])

  match = ping_ttl_regexp.search(struct['stdout'])
  if match:
    if 'performance' not in struct:
      struct['performance'] = {}
    struct['performance']['ttl'] = match.group(1)

  for regexp, labels in ping_performance_regexps:
    match = regexp.search(struct['stdout'])
    if match:
      if 'performance' not in struct:
        struct['performance'] = {}
      for pos, label in enumerate(labels):
        struct['performance'][label] = match.group(pos+1)
      break
  return ret

def test(host, user=None):
  global iteration

  struct = {
    'host': host,
    'status': None,
    'iteration': iteration,
    'method': '',
    'ping': {},
    'ssh': {}
  }
  if ping(struct['ping'], host):
    struct['status'] = True
    struct['method'] = 'ping'
  else:
    run(struct['ssh'], 'ssh {ssh_options} {user}{host} exit 42'.format(
      user=f'{user}@' if user else '',
      host=host,
      ssh_options=ssh_options,
    ))
    if struct['ssh']['rc'] == 42:
      struct['status'] = True
      struct['method'] = 'ssh'

  struct['status'] = bool(struct['status'])
  if args.json:
    print(json.dumps(struct, sort_keys=True))
  else:
    echo(struct, struct['host'], struct['status'], struct['method'])

parser = argparse.ArgumentParser(description='Test connectivity to target hosts via ping & ssh')
parser.add_argument('hosts', metavar='host', nargs='+', help='One or more hosts')
parser.add_argument('-s', '--sleep', default=15, type=float, help='Interval between iterations in seconds (default: 15 seconds)')
parser.add_argument('-c', '--continuous', action='store_true', help='Test hosts continually')
parser.add_argument('-j', '--json', action='store_true', help='Render output in JSON')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

if args.continuous:
  signal.signal(signal.SIGINT, signal_handler)

host_regexp = re.compile(r'^(?:([^@]+)@)?(.+)$')

ping_ttl_regexp = re.compile(r'ttl=(\d+)')

# ping performance output:
#   Windoze: Minimum = 0ms, Maximum = 0ms, Average = 0ms
#   Linux: rtt min/avg/max/mdev = 0.115/0.115/0.115/0.000 ms
ping_performance_regexps = [
  (re.compile(r'rtt min/avg/max/mdev = ([.0-9]+)/([.0-9]+)/([.0-9]+)/([.0-9]+)'), ['min', 'avg', 'max', 'mdev']), # Linux
  (re.compile(r'Minimum = ([.0-9]+)ms, Maximum = ([.0-9]+)ms, Average = ([.0-9]+)ms'), ['min', 'max', 'avg']), # Windoze
]

if 'win' in sys.platform.lower():
  ping_options = '-n 1 -w 1000'
else:
  ping_options = '-c1 -w1'

ssh_options = '-o ConnectTimeout=1'

iteration = 0

echo_format = '{:32}  {!s:17}  {:6}' + ('  {}' if args.continuous else '')
if not args.json:
  if args.continuous:
    echo(None, 'Host', 'Status', 'Method', 'Time')
  else:
    echo(None, 'Host', 'Status', 'Method')

echo_format = '{:32}  {!s:18}  {:6}' + ('  {}' if args.continuous else '')
while True:
  iteration += 1
  for host in args.hosts:
    match = host_regexp.search(host)
    if match:
      user = match.group(1)
      host = match.group(2)
      test(host, user)
    else:
      log.warning(r'Invalid host: {host!r}')
  if not args.continuous:
    break
  else:
    time.sleep(args.sleep)
