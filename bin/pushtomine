#! /usr/bin/env python3

import logging
import argparse
import subprocess

def run(cmd, capture=False):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Running {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None)
  (stdout, stderr) = p.communicate()
  stdout = stdout.decode('utf-8')
  stderr = stderr.decode('utf-8')
  rc = p.wait()
  log.log(logging.DEBUG if rc == 0 else logging.ERROR, 'Ran {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  if rc != 0:
    parser.error('{cmd} failed')
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='pushtomine - commit, squash, and push files to my repo fork')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.INFO)

(rc, stdout, stderr) = run('gitstatus', capture=True)
files = stdout.splitlines()
if not files:
  log.warning('Nothing to commit')
  exit(1)

(rc, stdout, stderr) = run(['git', 'add'] + files)
(rc, stdout, stderr) = run('git commit')
(rc, stdout, stderr) = run('git rebase -i HEAD~5')
(rc, stdout, stderr) = run('git push bruno --force')
