#! /usr/bin/env python3

import sys
import logging
import argparse
import subprocess

"""
Windows --help:

usage: ssh [-46AaCfGgKkMNnqsTtVvXxYy] [-B bind_interface]
           [-b bind_address] [-c cipher_spec] [-D [bind_address:]port]
           [-E log_file] [-e escape_char] [-F configfile] [-I pkcs11]
           [-i identity_file] [-J [user@]host[:port]] [-L address]
           [-l login_name] [-m mac_spec] [-O ctl_cmd] [-o option] [-p port]
           [-Q query_option] [-R address] [-S ctl_path] [-W host:port]
           [-w local_tun[:remote_tun]] destination [command]
"""

parser = argparse.ArgumentParser(description='Windows ssh frontend')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')

for option in '46AaCfGgKkMNnqsTtVXxYy': # I took -v out of this list because I want this option!
  parser.add_argument(f'-{option}', action='store_true')

for option in 'BbcDEeFIiJLlmOopQRSWw':
  parser.add_argument(f'-{option}')

parser.add_argument('dest', help='Remote destination: sys, user@sys')
parser.add_argument('command', nargs='*', help='Optional command and arguments')

args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

log.info(f'args: {args}')

command = ['ssh']

for option in [arg for arg in dir(args) if (not arg.startswith('_')) and (arg not in ['verbose', 'v', 'dest', 'command'])]:
  value = getattr(args, option)
  log.debug(f'{option}: {value!r}')
  if value != None:
    if type(value) == bool:
      if value == True:
        command.append(f'-{option}')
    else:
      command += [f'-{option}', value]

  log.debug(f'command: {command}')

command += [args.dest] + args.command

log.info(f'command: {command}')

subprocess.Popen(f'windoze_title {args.dest}', shell=True).wait()

p = subprocess.Popen(command)
rc = p.wait()

subprocess.Popen('windoze_title --self', shell=True).wait()

exit(rc)
#! /usr/bin/env python3
