#! /usr/bin/env python3

import re
import sys
import json
import signal
import logging
import argparse

def emit(data):
  if isinstance(data, str):
    print(data)
  elif isinstance(data, list) and all([isinstance(datum, str) for datum in obj]):
    print('\n'.join(data))
  elif isinstance(data, dict):
    for (key, value) in data.items():
      print(key)
      emit(value)
  else:
    print(data)

parser = argparse.ArgumentParser(description='Parse JSON output from Ansible playbook output')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if sys.stdin.isatty():
  parser.error('stdin must be directed')

task = None
node = None
output = ''

task_regexp = re.compile('^TASK\s+\[([^]]+)\]')
"""
ok: [master0] => {
    "kubectl.stdout_lines": [
        "NAME               STATUS     ROLES    AGE   VERSION",
        "ip-172-31-52-0     Ready      master   72m   v1.18.5",
        "ip-172-31-54-183   NotReady   <none>   71m   v1.18.5",
        "ip-172-31-57-255   NotReady   <none>   71m   v1.18.5"
    ]
}
"""
node_regexp = re.compile('^\w+:\s+\[(\w+)\]\s+=>\s+(\S.*)$')

for line in sys.stdin.read().splitlines():
  match = task_regexp.search(line)
  if match:
    task = match.group(1)
    log.info(f'task {task!r}');
    node = None
    output = ''
  else:
    match = node_regexp.search(line)
    if match:
      node = match.group(1)
      log.info(f'node {node!r} of task {task!r}')
      output = match.group(2)
    elif output:
      output += '\n' + line.strip()
      obj = None
      try:
        obj = json.loads(output)
      except:
        pass

      if obj:
        print(f'Task: {task}')
        print(f'Node: {node}')
        emit(obj)
        print('')
        node = None
        output = ''
