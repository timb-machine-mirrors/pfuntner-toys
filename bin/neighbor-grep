#! /usr/bin/env python3

import re
import os
import sys
import signal
import logging
import argparse

def scan(filename=None):
  stream = open(filename, 'rb') if filename else os.fdopen(sys.stdin.fileno(), 'rb')
  data = stream.read()

  log.debug(f'{filename if filename else "stdin"}: {len(data)} bytes read')
  
  for hit in list(re.finditer(args.regexp.encode(), data)):
    log.info(f'{filename if filename else "stdin"}: Hit at {hit.start(0)}:{hit.end(0)}')
    start = hit.start(0) - args.context
    end = hit.end(0) + args.context
    print(f'{(filename + ": ") if filename else ""}{start}:{end} {data[start:end]!r}')

  stream.close()

parser = argparse.ArgumentParser(description='Grep "neighbors" of regular expressions to show context')
parser.add_argument('regexp', help='Regular expression with which to search')
parser.add_argument('files', metavar='file', nargs='*', help='Zero or more files to search')
parser.add_argument('-C', '--context', type=int, default=10, help='Characters before and after the regular expression to display (default: 10)')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if args.files:
  for filename in args.files:
    scan(filename)
else:
  if sys.stdin.isatty():
    parser.error('stdin must be redirected')
  scan()
