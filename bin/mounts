#! /usr/bin/env python3

import re
import sys
import signal
import logging
import argparse
import subprocess

from functools import cmp_to_key
from table import Table

def compare(obj1, obj2):
  assert type(obj1) == type(obj2), f'Cannot compare {obj1.__class__.__name__!r} and {obj2.__class__.__name__!r}'

  if isinstance(obj1, tuple):
    count_diff = obj2[1] - obj1[1]
    if count_diff != 0:
      return count_diff
    else:
      return compare(obj1[0], obj2[0])
  else:
    if obj1 == obj2:
      return 0
    elif obj1 < obj2:
      return -1
    else:
      return 1

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  if stdin:
    p.stdin.write(stdin.encode())
  if capture:
    (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  else:
    (stdout, stderr) = ('', '')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Parse output from `mount`')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

log.debug(f'args: {args}')

if sys.stdin.isatty():
  (rc, stdout, stderr) = run('mount')
  if stdout == '':
    log.error('no output from mount')
    exit(1)
  lines = stdout.splitlines()
else:
  lines = sys.stdin.read().splitlines()
  log.info(f'Read from stdin: {lines}')

# mounts contains each filesystem as it is parsed
mounts = list()

# all_options keeps track of how often options are used so we can intelligently sort them in tabular form
all_options = dict()

# sysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)
regexp = re.compile(r'^(\S+)\s+on\s+(\S+)\s+type\s+(\S+)\s+\(([^)]+)\)$')
for line in lines:
  log.info(f'Parsing {line!r}')
  match = regexp.search(line)
  if match:
    mount = {
      'dev': match.group(1),
      'mountpoint': match.group(2),
      'type': match.group(3),
      'raw_options': match.group(4),
      'options': dict(),
    }
    for option in mount['raw_options'].split(','):
      tokens = option.split('=')
      all_options[tokens[0]] = all_options.get(tokens[0], 0) + 1
      if len(tokens) in [1,2]:
        mount['options'][tokens[0]] = tokens[1] if len(tokens) == 2 else True
      else:
        log.warning(f'Could not parse options: {tokens!r}')
        continue
    mounts.append(mount)
  else:
    log.warning(f'Could not parse {line!r}')

if mounts:
  log.debug(f'mounts: {mounts}')

  log.debug(f'Pre-sorted options: {all_options}')
  # sort the options:
  #   - First criteria: Occurrences of the option - an option present more often sorts to the left
  #   - Second criteria: If two options appear with the same frequency, the options are sorted alphabetically
  all_options = sorted(all_options.items(), key=cmp_to_key(compare))
  log.debug(f'Post-sorted options: {all_options}')

  # We can toss away the number of occurrences after the options are sorted.  It doesn't matter exactly how often they were present after they are sorted.
  all_options = [option[0] for option in all_options]

  table = Table(['Mount point', 'Device', 'Type'] + all_options)
  for mount in mounts:
    row = [mount['mountpoint'], mount['dev'], mount['type']]
    for option in all_options:
      row.append(mount['options'].get(option, False))
    log.debug(f'row: {row}')
    table.add(row)
  table.root.sort(key=lambda row: row['Mount point'])
  print(str(table), end='')
else:
  log.info('No mounts')
