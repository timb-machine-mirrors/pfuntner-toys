#! /usr/bin/env python3

import re
import sys
import json
import signal
import logging
import argparse

def shorten(s):
  if args.shorten and len(s) > 100:
    s = s[:47] + ' ... ' + s[-48:]
  return s

parser = argparse.ArgumentParser(description='Parse output from grep')
parser.add_argument('-c', '--comment', action='store_true', help='Add comment attribute to each element')
parser.add_argument('-s', '--shorten', action='store_true', help='Shorten the line when necessary')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if sys.stdin.isatty():
  parser.error('stdin must be redirected')

regexp = re.compile('^([^:]+):(?:(\d+))?(.*)$')

line_numbers_present = None

hits = list()

for (pos, line) in enumerate(sys.stdin.read().splitlines()):
  if not line.startswith('Binary file '):
    match = regexp.search(line)
    if match:
      if pos == 0:
        line_numbers_present = bool(match.group(2))
      else:
        if line_numbers_present and not(bool(match.group(2))):
          log.error(f'Line {pos} does not have a line number but the first line does')
          exit(1)
        elif not(line_numbers_present) and bool(match.group(2)):
          log.error(f'Line {pos} has a line number but the first line does not')
          exit(1)
        hits.append({'file': match.group(1), 'text': shorten(match.group(3))})
        if line_numbers_present:
          hits[-1]['line_number'] = int(match.group(2))
        if args.comment:
          hits[-1]['comment'] = ''
    else:
      log.error(f'Line {pos} does not appear to be output from grep')
      exit(1)

print(json.dumps(hits, indent=2, sort_keys=True), end='')
