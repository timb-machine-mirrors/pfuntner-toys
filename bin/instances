#! /usr/bin/env python2

import re
import sys
import json
import logging
import argparse
import subprocess

from table import Table

def keyhunt(keys, key_type_name, key_type, key_value_name):
  for key in keys:
    if key.get(key_type_name) == key_type:
      return key[key_value_name]
  parser.error('Could not find {key_type} from {keys}'.format(**locals()))
  
def run(cmd):
  global cache

  if isinstance(cmd, basestring):
    cmd = cmd.split()
  key = ' '.join(cmd)
  if cache.get(key):
    ret = cache[key]
    log.info('Got {key!r} result from cache'.format(**locals()))
  else:
    ret = {
      'rc': None,
      'stdout': '',
      'stderr': '',
    }
    log.info('Executing {cmd}'.format(**locals()))
    try:
      p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except Exception as e:
      ret['exception'] = str(e)
    else:
      (stdout, stderr) = p.communicate()
      ret['stdout'] = stdout
      ret['stderr'] = stderr
      ret['rc'] = p.wait()
      
    cache[key] = ret
  log.debug('{cmd}: {ret}'.format(**locals()))
  return ret
  
def match(name):
  return bool(regexp.search(name)) if args.regexp else True

def get_token(s, sep, pos):
  return (s or '').split(sep)[pos]

def extract(cmd, *element_names):
  root = '?'
  resp = run(cmd)
  if resp['stdout']:
    element_pos = 0
    root = json.loads(resp['stdout'])
    while element_pos < len(element_names):
      if isinstance(root, list):
        assert len(root) == 1
        root = root[0]
      else:
        root = root.get(element_names[element_pos], {})
        element_pos += 1
  # log.debug('extract({cmd!r}, {element_names}) = {root}'.format(**locals()))
  return str(root)
  
parser = argparse.ArgumentParser(description='Manage AWS & GCP instances')
parser.add_argument('regexp', nargs='?', help='Specify regular expression with which to match instance names')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

regexp = re.compile(args.regexp) if args.regexp else None
cache = {}

table = Table('Instance Name', 'Provider', 'Image Name', 'State')
ret = run('gcloud compute instances list --format json')
if ret['stdout']:
  for instance in json.loads(ret['stdout']):
    name = instance['name']
    if match(name):
      log.debug('Examining {instance}'.format(**locals()))
      image_name = get_token(extract(['gcloud', 'compute', 'disks', 'describe', name, '--zone', get_token(instance.get('zone'), '/', -1), '--format', 'json'], 'sourceImage'), '/', -1)
      table.add(name, 'GCP', image_name, instance['status'].capitalize())

ret = run('aws ec2 describe-instances')
if ret['stdout']:
  for instances in json.loads(ret['stdout']).get('Reservations', []):
    for instance in instances.get('Instances', []):
      name = keyhunt(instance.get('Tags', []), 'Key', 'Name', 'Value')
      if match(name):
        log.debug('Examining {instance}'.format(**locals()))
        image_name = extract(['aws', 'ec2', 'describe-images', '--image-id', instance['ImageId']], 'Images', 'Name')
        table.add(name, 'AWS', image_name, instance['State']['Name'].capitalize())

sys.stdout.write(str(table))
