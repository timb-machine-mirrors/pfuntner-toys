#! /usr/bin/env python2
#! /usr/bin/env python3

"""
   Reports `wc` and `md5sum` information on files together on the same line
"""

import os
import sys
import string
import hashlib
import os.path
import logging
import argparse

def process(filename=None):
  stream = None
  if filename is not None:
    if not os.path.isdir(filename):
      try:
        # stream = open(filename, 'rb')
        stream = open(filename)
      except Exception as e:
        sys.stderr.write('Cannot open {filename!r}: {e}'.format(**locals()))
    else:
      sys.stderr.write('{filename!r} is a directory\n'.format(**locals()))
  else:
    # stream = os.fdopen(0, 'wb')
    stream = sys.stdin

  if stream:
    inWord = False
    chars = 0
    words = 0
    lines = 0
    md5 = hashlib.md5()

    eof = False
    last = None
    while not eof:
      # c = ''.join(map(chr, stream.read(1)))
      c = stream.read(1)
      if c:
        chars += 1
        if inWord and (c in string.whitespace):
          inWord = False
        elif (not inWord) and (c not in string.whitespace):
          inWord = True
          words += 1
      else:
        eof = True

      md5.update(c.encode('utf-8'))
      if c == '\n':
        lines += 1
      last = c

      # log.debug(f'{lines:6} {words:8} {chars:8} {c!r}')
      log.debug('{lines:6} {words:8} {chars:8} {c!r}'.format(**locals()))

    if last == '\n':
      lines += 1

    print('{lines:6} {words:8} {chars:8} {digest} {filename}'.format(
      chars=chars,
      words=words,
      lines=lines,
      digest=md5.hexdigest(),
      filename=filename if filename is not None else '-'
    ))

    if filename is not None:
      stream.close()

parser = argparse.ArgumentParser(description='Perform wc & cksum on data')
parser.add_argument('files', metavar='file', nargs='*', help='Zero or more files to process')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

if args.files:
  list(map(process, args.files))
else:
  process()
