#! /usr/bin/env python2

import os
import json
import logging
import argparse
import subprocess

parser = argparse.ArgumentParser(description='Create ssh config file based on Ansible hosts inventory')
parser.add_argument('filename', nargs='?', default='{HOME}/.ssh/config'.format(HOME=os.environ['HOME']), help='Name of file to create (default: ~/.ssh/config)')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

"""
[centos@pfuntner1 .ansible]$ ansible-inventory --list | json --flatten
/_meta/hostvars/centos8/ansible_host '35.175.209.237'
/_meta/hostvars/centos8/ansible_ssh_private_key_file '/home/centos/.ssh/pfuntner-aws.pem'
/_meta/hostvars/centos8/ansible_user 'centos'
/_meta/hostvars/centos8-old/ansible_host '54.175.182.170'
/_meta/hostvars/centos8-old/ansible_ssh_private_key_file '/home/centos/.ssh/pfuntner-aws.pem'
/_meta/hostvars/centos8-old/ansible_user 'centos'
/_meta/hostvars/rhel8_hardened/ansible_host '34.227.163.169'
/_meta/hostvars/rhel8_hardened/ansible_ssh_private_key_file '/home/centos/.ssh/pfuntner-aws.pem'
/_meta/hostvars/rhel8_hardened/ansible_user 'ec2-user'
/all/children/0 'targets'
/all/children/1 'ungrouped'
/targets/hosts/0 'centos8'
/targets/hosts/1 'centos8-old'
/targets/hosts/2 'rhel8_hardened'
"""

p = subprocess.Popen(['ansible-inventory', '--list'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
(stdout, stderr) = p.communicate()
rc = p.wait()
if (rc == 0) and not stderr:
  log.debug('{rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  hosts = json.loads(stdout).get('_meta', {}).get('hostvars', {})
  if hosts:
    log.debug('hosts: {hosts}'.format(**locals()))
    with open(args.filename, 'w') as stream:
      for (hostname, attrs) in hosts.items():
        print '{hostname}: {attrs}'.format(**locals())
        ip = attrs['ansible_host']
        user = attrs['ansible_user']
        key = attrs['ansible_ssh_private_key_file']
        stream.write("""Host {hostname}\n\tHostname {ip}\n\tUser {user}\n\tIdentityFile {key}\n""".format(**locals()))
  else:
    parser.error('No hosts found in `ansible-inventory --list`')
else:
  parser.error('`ansible-inventory --list` failed: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
