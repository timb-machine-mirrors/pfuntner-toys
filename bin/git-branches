#! /usr/bin/env python3

import os
import re
import logging
import argparse
import subprocess
from functools import cmp_to_key

from table import Table

def sorter(obj1, obj2):
  if str(obj1).startswith('*'):
    return -1
  elif str(obj2).startswith('*'):
    return 1
  elif str(obj1) < str(obj2):
    return -1
  elif str(obj1) == str(obj2):
    return 0
  else:
    return 1
  
def run(cmd, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join([repr(token) for token in cmd])
  else:
    if isinstance(cmd, str):
      cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=shell)
  (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='List branches in various repos')
parser.add_argument('dirs', metavar='dir', nargs='+', help='One more git repo directories')
parser.add_argument('-s', '--simple', action='store_true', help='Simple output form, not a table')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

repos = {}
cols = 0

regexp = re.compile(r'^(\*?)\s+(.*)$', flags=re.MULTILINE)
for dir in args.dirs:
  if os.path.isdir(dir):
    if os.path.isdir(os.path.join(dir, '.git')):
      (rc, stdout, stderr) = run(f'cd {dir!r}; git branch', shell=True)
      hits = regexp.finditer(stdout)
      repos[dir] = sorted([('*' if hit.group(1) else '') + hit.group(2) for hit in hits], key=cmp_to_key(sorter))
      cols = max(cols, len(repos[dir]))
    else:
      log.warn(f'Not a git repo: {dir!r}')
  else:
    log.warn(f'Not a directory: {dir!r}')

log.info(f'cols: {cols}')
if not args.simple:
  table = Table(['Repo'] + ['Branch {}'.format(branch+1) for branch in range(cols)])
for repo in sorted(repos.keys()):
  branches = repos[repo]
  branches += [''] * (cols - len(branches))
  log.info(f'{repo} has {branches}')

  if args.simple:
    for branch in branches:
      if branch:
        current = ''
        if branch[0] == '*':
          current = 'current'
          branch = branch[1:]
        print(f'{repo} {branch} {current}')
  else:
    table.add(*([repo] + branches))

if not args.simple:
  print(str(table), end='')
