#! /usr/bin/env python3

import os
import re
import logging
import argparse
import datetime
import subprocess
from functools import cmp_to_key

from table import Table

def sorter(obj1, obj2):
  if str(obj1).startswith('*'):
    return -1
  elif str(obj2).startswith('*'):
    return 1
  elif str(obj1) < str(obj2):
    return -1
  elif str(obj1) == str(obj2):
    return 0
  else:
    return 1
  
def run(cmd, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join([repr(token) for token in cmd])
  else:
    if isinstance(cmd, str):
      cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=shell)
  (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

def extract(data, regexp):
  match = regexp.search(data)
  return match.group(1) if match else '?'

def normalize_date(s):
  try:
    return datetime.datetime.strptime(' '.join(s.split(' ')[:-1]), '%a %b %d %H:%M:%S %Y').isoformat().replace('T', ' ')
  except:
    return s

parser = argparse.ArgumentParser(description='List branches in various repos')
parser.add_argument('dirs', metavar='dir', nargs='*', help='Zero or more git repo directories (default: ".")')

group = parser.add_mutually_exclusive_group()
group.add_argument('-a', '--all', action='store_true', help='Display latest commit from branch')
group.add_argument('-s', '--simple', action='store_true', help='Simple output form, not a table')
group.add_argument('-l', '--list', action='store_true', help='List directories')

parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

args.dirs = args.dirs or ['.']

if args.list and args.dirs != ['.']:
  parser.error('--list is only applicable when dealing with current working directory as only repo')

repos = {}
cols = 0

branch_regexp = re.compile(r'^(\*?)\s+(.*)$', flags=re.MULTILINE)
for dir in args.dirs:
  if os.path.isdir(dir):
    if os.path.isdir(os.path.join(dir, '.git')):
      (rc, stdout, stderr) = run(f'cd {dir!r}; git branch', shell=True)
      hits = branch_regexp.finditer(stdout)
      repos[dir] = sorted([('*' if hit.group(1) else '') + hit.group(2) for hit in hits], key=cmp_to_key(sorter))
      cols = max(cols, len(repos[dir]))
    else:
      log.warning(f'Not a git repo: {dir!r}')
  else:
    log.warning(f'Not a directory: {dir!r}')

no_asterisk = re.compile(r'^\*')

if args.all:
  table = Table('Repo', 'Branch', 'Commit', 'User', 'Timestamp', 'Comment')
  """
    [ubuntu@pfuntner-ubuntu cloud9-audit-tool CCC-1527]$ git log -1 $(git rev-parse CCC-2072)
    commit cdc0ecc93b139c958160436523396b57183693d0 (origin/CCC-2072, CCC-2072)
    Author: John Pfuntner <jpfuntne@cisco.com>
    Date:   Fri Mar 26 08:57:24 2021 -0400
    
        CCC-2072: Ignore files in Docker volumes for some tests
  """
  commit_regexp = re.compile(r'^commit\s+(\S+)', flags=re.MULTILINE)
  author_regexp = re.compile(r'^Author:.*<([^>]+)>', flags=re.MULTILINE)
  date_regexp = re.compile(r'^Date:\s+(.+)$', flags=re.MULTILINE)
  comment_regexp = re.compile(r'^\s+(\S.*)$', flags=re.MULTILINE)

  for repo in sorted(repos.keys()):
    for branch in repos[repo]:
      branch = no_asterisk.sub('', branch)
      (rc, stdout, stderr) = run(f'cd {repo!r}; git log -1 $(git rev-parse {branch})', shell=True)
      table.add(repo, branch, extract(stdout, commit_regexp), extract(stdout, author_regexp), normalize_date(extract(stdout, date_regexp)), extract(stdout, comment_regexp))
else:
  log.info(f'cols: {cols}')
  if not args.simple:
    table = Table(['Repo'] + ['Branch {}'.format(branch+1) for branch in range(cols)])

  for repo in sorted(repos.keys()):
    branches = [no_asterisk.sub('', branch) for branch in repos[repo]]
    branches += [''] * (cols - len(branches))
    log.info(f'{repo} has {branches}')
  
    if args.simple or args.list:
      for branch in branches:
        if branch:
          current = ''
          if branch[0] == '*':
            current = 'current'
            branch = branch[1:]
          if args.list:
            print(branch)
          else:
            print(f'{repo} {branch} {current}')
    else:
      table.add(*([repo] + branches))

if not args.simple:
  print(str(table), end='')
