#! /usr/bin/env python

import sys
import string
import logging
import argparse

def seechars(data):
  ret = ''
  for c in data:
    ret += c if c in visible_chars else '?'
  return ret

def slashed(s, pos=None):
  if pos is None:
    pos = len(s)-1
  is_slashed = False
  while pos >= 0:
    if s[pos] == '\\':
      is_slashed = not is_slashed
    else:
      break
    pos -= 1
  return is_slashed

def getstrings(s):
  ret = []
  quote = None
  commented = False
  triple = False
  log.debug('getstrings({data})'.format(data=seechars(s)))
  pos = 0
  while pos < len(s):
    c = s[pos]
    if commented:
      # continue consuming characters commented-out until line is complete
      if c == '\n':
        commented = False
    elif (not quote) and (c == '#'):
      # start skipping over a comment
      commented = True
    elif (not quote) and (c in quotes) and (not slashed(s, pos-1)):
      # start of a quoted string
      triple = s[pos:pos+3] == c*3
      log.debug('Starting string {pos} {c!r} {commented} {quote} {triple} {ret}'.format(**locals()))
      ret.append('')
      quote = c
      if triple:
        pos += 2
    else:
      # inside of a quoted string
      if c == quote:
        if (not slashed(ret[-1])) and ((not triple) or (s[pos:pos+3] == c*3)):
          # quoted string is complete
          log.debug('Ending string {pos} {c!r} {commented} {quote} {triple} {ret}'.format(**locals()))
          ret[-1] = ((quote*3) if triple else quote) + ret[-1] + ((quote*3) if triple else quote)
          if triple:
            pos += 2
          quote = None
          triple = False
      if quote:
        # quoted string is not complete
        ret[-1] += c
    pos += 1

  if quote and (len(ret) == 1):
    """
    It's possible that we'll be asked to parse out a string with an apostrophe in it.  It doesn't denote the beginning or end of a string.  Hopefully, there's just that one quote.
    """
    quote = False
    ret = []

  if quote:
    log.critical('Error parsing {s!r}: {ret}'.format(**locals()))
    exit(1)
  return ret

def process(s, path):
  if len(path) > 1:
    print '{joined_path}: {s!r}'.format(joined_path=':'.join(path), s=s)

  for (pos, substring) in enumerate(getstrings(s)):
    try:
      subsubstring = eval(substring)
    except Exception as e:
      sys.stderr.write('Caught {e!s} while trying to evaluate {substring!r}'.format(**locals()))
      exit(1)
    else:
      process(subsubstring, path + [str(pos)])

parser = argparse.ArgumentParser(description='Parse out embeddeed strings')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

if sys.stdin.isatty():
  parser.error('stdin must be redirected')

quotes = '\'"'
visible_chars = (set([c for c in string.printable]) - set([c for c in string.whitespace])) | set(' ')

for (linenum, line) in enumerate(sys.stdin.read().splitlines()):
  process(line, [str(linenum)])
