#! /usr/bin/env python3

import re
import sys
import json
import signal
import logging
import argparse
import subprocess

class Table(object):
  def __init__(self, *args):
    if len(args) == 1 and type(args[0]) in (list, tuple):
      self.headings = args[0]
    else:
      self.headings = args

    self.p = subprocess.Popen(['column', '-t', '-s\t'], stdin=subprocess.PIPE, text=True)
    self.p.stdin.write('\t'.join([str(heading) for heading in self.headings]) + '\n')

  def add(self, *args):
    self.p.stdin.write('\t'.join([str(arg) for arg in args]) + '\n')

  def close(self):
    self.p.stdin.close()
    self.p.wait()

parser = argparse.ArgumentParser(description='Look for unempty stderr in ansible-playbook verbose output')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if sys.stdin.isatty():
  parser.fatal('stdin must be redirected')

task_regexp = re.compile(r'TASK\s+\[(.*)\]\s+\*')
node_regexp = re.compile(r'(fatal|failed|ok|skipping|changed): \[(.*)\](.*) => \{')

table = Table('Task', 'Node', 'Status', 'Stderr')

status = None
node = None
task = None
item = None
lines = sys.stdin.read().splitlines()
pos = 0
result = list()
while pos < len(lines):
  line = lines[pos]
  match = task_regexp.search(line)
  if match:
    task = match.group(1)
    node = None
    item = None
    status = None
    result = list()
    log.debug(f'Discovered task {task!r}')
  elif task:
    match = node_regexp.search(line)
    if match:
      status = match.group(1)
      node = match.group(2)
      item = match.group(3)
      result = ['{']
    elif line.startswith('}'):
      result.append('}')
      curr = json.loads('\n'.join(result))
      log.info(f'{task} {node} {status} {curr}')
      if 'stderr' in curr and curr['stderr']:
        table.add(task, node, status, repr(curr['stderr'])[1:-1])
    elif result:
      result.append(line)
    
  pos += 1

table.close()
