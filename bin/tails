#! /usr/bin/env python3

import os
import io
import re
import time
import queue
import signal
import logging
import argparse
import threading

class TailThread(threading.Thread):
  def __init__(self, filename):
    super().__init__()
    self.filename = filename
    self.stream = None
    if os.path.exists(filename):
      if not os.path.isdir(filename):
        self.stream = open(filename)
        self.stream.seek(0, io.SEEK_END)
        log.info('Starting thread')
        self.start()
      else:
        log.warning(f'Could not open: {filename!r}')
    else:
      log.warning(f'Could not find: {filename!r}')

  def run(self):
    while(True):
      log.info('Thread reading line')
      line = self.stream.readline()
      if line:
        line = trailing_newlines.sub('', line)
        log.info('Thread appending to queue')
        tail_queue.put(f'{self.filename} {line}')

parser = argparse.ArgumentParser(description='Tail multiple files')
parser.add_argument('files', nargs='+', help='One or more files to tail')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))
signal.signal(signal.SIGINT, lambda signum, stack_frame: exit(0))

trailing_newlines = re.compile('[\n\r]*$')

threads = list()
tail_queue = queue.Queue()

for filename in args.files:
  threads.append(TailThread(filename))

time.sleep(1)
while any([thread.is_alive() for thread in threads]) or not tail_queue.empty():
  if not tail_queue.empty():
    log.info('Main thread dequeuing item')
    print(tail_queue.get())
  else:
    time.sleep(1)

log.info('Main thread sees ' + ('empty queue' if tail_queue.empty() else 'non-empty queue'))
