#! /usr/bin/env python3

import time
import signal
import logging
import argparse
import datetime
import subprocess

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))

  p = None
  try:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  except Exception as e:
    (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

  if p:
    if stdin:
      p.stdin.write(stdin.encode())
    if capture:
      (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    else:
      (stdout, stderr) = ('', '')
    rc = p.wait()

  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Check on ssh host')
parser.add_argument('host', help='Remote ssh host')
parser.add_argument('-i', '--interval', type=float, default=5, help='Seconds between each ssh attempt - default: 5secs')
parser.add_argument('-w', '--wait', type=int, default=5, help='Seconds to wait for ssh connection - default: 5secs')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

start = datetime.datetime.now()

cmd = ['ssh', '-o', f'ConnectTimeout={args.wait}', args.host, 'exit', '42']
while True:
  (rc, stdout, stderr) = run(cmd)
  if rc == 42:
    break
  time.sleep(args.interval)

print(f'Elapsed time: {str(datetime.datetime.now() - start)}')
