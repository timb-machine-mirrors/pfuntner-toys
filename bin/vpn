#! /usr/bin/env python3

"""
This tool is mostly for my own use but if you find it useful, cool.
"""

import signal
import logging
import argparse
import subprocess

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))

  p = None
  try:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  except Exception as e:
    (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

  if p:
    if stdin:
      p.stdin.write(stdin.encode())
    if capture:
      (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    else:
      (stdout, stderr) = ('', '')
    rc = p.wait()

  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='surfshark frontend')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
parser.add_argument('action', choices=['up', 'down', 'status'], help='Action to perform')
parser.add_argument('server', nargs='?', help='Server to connect to')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

"""
surfshark-vpn help - shows this message
surfshark-vpn attack - quick connects to nearest server
surfshark-vpn multi - connects to a MultiHop server
surfshark-vpn down - kills already running vpn client
surfshark-vpn status - show status
surfshark-vpn forget - logouts from the app
surfshark-vpn version - shows version
"""

if args.action == 'status':
  if args.server:
    parser.error('server parameter is not appropriate for status')
  run('sudo surfshark-vpn status', capture=False)
elif args.action == 'down':
  if args.server:
    parser.error('server parameter is not appropriate for down')
  run('sudo surfshark-vpn down', capture=False)
elif args.action == 'up':
  if args.server:
    parser.error('The server parameter is still work-in-progress')
  run('sudo surfshark-vpn', capture=False)
