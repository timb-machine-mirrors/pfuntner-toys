#! /usr/bin/env python3

"""
This tool is mostly for my own use but if you find it useful, cool.
"""

import os
import pty
import signal
import logging
import argparse
import subprocess

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))

  p = None
  try:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  except Exception as e:
    (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

  if p:
    if stdin:
      p.stdin.write(stdin.encode())
    if capture:
      (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    else:
      (stdout, stderr) = ('', '')
    rc = p.wait()

  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

servers={
  'uk': 'United Kingdom London',
}

parser = argparse.ArgumentParser(description='surfshark frontend')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
parser.add_argument('action', choices=['up', 'down', 'status'], help='Action to perform')
parser.add_argument('server', choices=servers.keys(), nargs='?', help='Server to connect to')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

"""
surfshark-vpn help - shows this message
surfshark-vpn attack - quick connects to nearest server
surfshark-vpn multi - connects to a MultiHop server
surfshark-vpn down - kills already running vpn client
surfshark-vpn status - show status
surfshark-vpn forget - logouts from the app
surfshark-vpn version - shows version
"""

if args.action == 'status':
  if args.server:
    parser.error('server parameter is not appropriate for status')
  run('sudo surfshark-vpn status', capture=False)
elif args.action == 'down':
  if args.server:
    parser.error('server parameter is not appropriate for down')
  run('sudo surfshark-vpn down', capture=False)
elif args.action == 'up':
  if args.server:
    p = subprocess.Popen(['sudo', 'surfshark-vpn'], text=True, bufsize=0, stdout=subprocess.PIPE, stdin=subprocess.PIPE)
    buf = ''
    server_id = None
    log.debug('Beginning I/O loop')
    while True:
      c = p.stdout.read(1)
      # log.debug(f'c={c!r}, buf = {buf!r}')
      if c is None:
        log.info('reached EOF on stdout')
        break
      if c == '\n':
        print(buf)
        log.info(f'Examining {buf!r} for {args.server!r}')
        if servers[args.server] in buf:
          server_id = buf.split()[0]
          log.info(f'{args.server!r} is {server_id}')
        elif buf == 'Enter a number to select the location':
          if server_id is not None:
            p.stdin.write(f'{server_id}\n')
          else:
            p.kill()
            log.error(f'Did not find {args.server!r} in server list')
            exit(1)
        elif buf == '1 selected':
          p.stdin.write(f'\n')
          p.stdin.close()
        buf = ''
      else:
        buf += c
        if buf == 'press enter for next page':
          p.stdin.write('\n')
          buf = ''
  else:
    run('sudo surfshark-vpn attack', capture=False)
