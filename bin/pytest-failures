#! /usr/bin/env python2

import re
import sys
import logging
import argparse
import subprocess

def extract(cmd, pattern, default_value):
  ret = default_value
  caster = type(ret)
  if isinstance(cmd, list):
    cmd = ' '.join(cmd)
  log.debug('Running {cmd!r}'.format(**locals()))
  try:
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    (stdout, stderr) = p.communicate()
    rc = p.wait()
    log.debug('{cmd!r}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
    match = re.search(pattern, stdout)
    if match:
      log.debug('extracted: {}'.format(match.group(1)))
      ret = caster(match.group(1))
    else:
      log.debug('{stdout!r} failed to match {pattern!r}'.format(**locals()))
  except Exception as e:
    log.debug('Caught `{e!s}`'.format(**locals()))
    
  return ret

def finish(filename, failure):
  if failure:
    print '*' * extract('stty size < /dev/tty', '\d+\s+(\d+)', 80)
    print ''
    print '\n'.join(['{prefix}{line}'.format(prefix=(filename + ': ') if filename else '', **locals()) for line in failure])
    print ''

def process(filename=None):
  stream = open(filename) if filename else sys.stdin

  failure = None
  for line in stream.read().splitlines():
    if failure_start.search(line):
      finish(filename, failure)
      failure = []
    elif failure != None:
      line = line.rstrip()
      if failure:
        if not_test.search(line):
          finish(filename, failure)
          failure = None
        else:
          failure.append(line)
      elif line and leading_whitespace.search(line):
        failure.append(line)

  finish(filename, failure)

  if filename:
    stream.close()

parser = argparse.ArgumentParser(description='Print failures from pytest output')
parser.add_argument('files', metavar='file', nargs='*', help='Zero or more files')
parser.add_argument('-v', '--verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

failure_start = re.compile('^_+\s+.+\s+_+$')
leading_whitespace = re.compile('^\s')
not_test = re.compile('^\S{2}')

if args.files:
  map(process, args.files)
else:
  process()
