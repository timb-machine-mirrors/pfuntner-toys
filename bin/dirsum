#! /usr/bin/env python2

import os
import re
import logging
import hashlib
import argparse

def simplify(s):
  new_s = slashes_regexp.sub('/', s)
  new_s = dotslash_regexp.sub('', new_s)

  while True:
    newer_s = dotdotslash_regexp1.sub('/', new_s)
    if newer_s == new_s:
      break
    else:
      new_s = newer_s

  new_s = dotdotslash_regexp2.sub('', new_s)
  return new_s

def get_files(root):
  ret = []
  if os.path.isfile(root):
    ret = [root]
  elif os.path.isdir(root):
    for file_name in os.listdir(root):
      ret += get_files(os.path.join(root, file_name))
  return ret

def process(root):
  md5 = hashlib.md5()
  files = sorted(get_files(root))
  for file_name in files:
    log.debug('Reading {file_name}'.format(**locals()))
    try:
      with open(file_name) as stream:
        if args.filenames:
          simple = simplify(file_name)
          log.debug('Adding {simple!r} to hash'.format(**locals()))
          md5.update(simple)       
        md5.update(stream.read())
    except Exception as e:
      log.error('Caught `{e!s}` reading {file_name!r}'.format(**locals()))
      return

  print '{root}: {digest}'.format(digest=md5.hexdigest(), **locals())

parser = argparse.ArgumentParser(description='Do md5 checksum of entire directory')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('-f', '--filenames', dest='filenames', action='store_true', help='Include filename in checksum')
parser.add_argument('files', metavar='file', nargs='+', help='One or more files for which to calculate the md5 checksum')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

slashes_regexp = re.compile('/{2,}')
dotslash_regexp = re.compile('(?:^|/)(\./)')
dotdotslash_regexp1 = re.compile('((?:/)[^/]+/\.\./)')
dotdotslash_regexp2 = re.compile('^(?:[^/]+)(/\.\./)')

map(process, args.files)
