#! /usr/bin/env python3

"""
Improved time utility, to replace /usr/bin/time.

  Sample /usr/bin/time behavior:
    $ time sleep 5

    real	0m5.004s
    user	0m0.003s
    sys	0m0.001s
    $ alias time=ptim

  Sample ptime behavior:
    $ time sleep 5
    Started 2019-04-20 08:09:46.679984
    Stopped 2019-04-20 08:09:51.682436
    real	0:00:05.002452
    user	0:00:00
    sys	0:00:00
    $

Differences:
  - Start and stop times are printed, which will be important for general usage
  - datetime.timedelta is used for the intervals
  - ptime uses argparse - I don't know what time uses but I'm not sure it has any options.  `/usr/bin/time --help` and `/usr/bin/time --help` don't even work!
"""

import os
import sys
import logging
import argparse
import datetime
import subprocess

metas = '"$`'

def protect(*args):
  ret = []
  for arg in args:
    ret.append(
      '"' +
      ''.join(
               [
                 '{escape}{c}'.format(escape='\\' if c in metas else '', c=c) for c in arg
               ]
      ) +
      '"')
  return ret

def say(msg):
  sys.stderr.write(msg + ('\n' if (msg and msg[-1] != '\n') else ''))

parser = argparse.ArgumentParser(description='Python implementation of time utility')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('cmd', help='Command to execute')
parser.add_argument('args', metavar='arg', nargs='*', help='Command arguments')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

log.debug('args: {args}'.format(**locals()))

start = datetime.datetime.now()
say('Started {start!s}'.format(**locals()))
p = subprocess.Popen(' '.join([args.cmd] + protect(*args.args)), shell=True)
rc = p.wait()
stop = datetime.datetime.now()
say('Stopped {stop!s}, rc={rc}'.format(**locals()))

times = os.times()
say('real\t{elapsed!s}'.format(elapsed=stop-start))
say('user\t{elapsed!s}'.format(elapsed=datetime.timedelta(seconds=times[2])))
say('sys\t{elapsed!s}'.format(elapsed=datetime.timedelta(seconds=times[3])))
