#! /usr/bin/env python3

import re
import os
import sys
import base64
import signal
import logging
import argparse

import bruno_tools

parser = argparse.ArgumentParser(description='Exchange data in pipe with a remote system')
parser.add_argument('dest', help='Source/destination in form `system:path`')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if sys.stdin.isatty() and sys.stdout.isatty():
  parser.error('stdin or stdout must be redirected')
elif (not sys.stdin.isatty()) and (not sys.stdout.isatty()):
  parser.error('stdin and stdout are redirected - do you know what you\'re doing??')


match = re.search('^([^:]+):(.+)$', args.dest)
if match:
  (target, path) = match.groups()
  if not sys.stdin.isatty():
    log.info(f'write to {path!r} on {target!r}')
    (rc, stdout, stderr) = bruno_tools.run(['ssh', '-q', target, 'base64', '-d', '>', path], stdin=base64.b64encode(os.fdopen(sys.stdin.fileno(), 'rb').read()).decode(), log=log, capture=False)
  else:
    log.info(f'read from {path!r} on {target!r}')
    (rc, stdout, stderr) = bruno_tools.run(['ssh', '-q', target, 'base64', '<', path], log=log)
    print(base64.b64decode(stdout.encode()), file=os.fdopen(sys.stdout.fileno(), 'wb'), end=b'')
    print(stderr, file=sys.stderr)
  exit(rc)
else:
  parser.error('Use `system:path` to specify destination')
