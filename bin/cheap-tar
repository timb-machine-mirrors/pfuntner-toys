#! /usr/bin/env python3

"""
This is a very "cheap" tar script.  I created it because I was interested in tarring up files under /proc but although you can `cat` those files, they aren't "tar-able" - if you extract the /proc files from a traditional tarball, most of the files are empty.

The "cheap" tarball is basically just a json file: a list of files:

[
  {
    "path": path-to-file, # a leading slash is preserved in the tarball and ignored during extraction
    "base64": data        # a base64 encoding of the file, compatible with the shell base64 command
  }
]

I used base64 to handle arbitrary files and be very portable.
"""

import os
import sys
import json
import base64
import signal
import logging
import argparse

def encode(path):
  ret = None
  try:
    with open(path, 'rb') as stream:
      ret = base64.b64encode(stream.read()).decode()
    log.info(path)
  except Exception as e:
    log.warning(f'Could not read {path!r}: {e!s}')
  return ret

def decode(path, b64data):
  try:
    with open(path, 'wb') as stream:
      stream.write(base64.b64decode(b64data.encode()))
    log.info(path)
  except Exception as e:
    log.warning(f'Could not write {path!r}: {e!s}')

def dive(path):
  global files

  if os.path.exists(path):
    if os.path.islink(path) and not args.follow_symlinks:
      log.warning(f'Not following symlink {path!r}')
    elif os.path.isfile(path):
      data = encode(path)
      if data is not None:
        files.append({
          'path': path,
          'base64': encode(path),
        })
    elif os.path.isdir(path):
      try:
        for child in os.listdir(path):
          dive(os.path.join(path, child))
      except Exception as e:
        log.warning(f'Could not list files under {path!r}/: {e!s}')
    else:
      log.warning(f'Cannot process {path!r}')
  else:
    log.warning(f'Cannot find {path!r}')

parser = argparse.ArgumentParser(description='Read and write cheap tarballs')

group = parser.add_mutually_exclusive_group(required=True)
group.add_argument('-r', '--read', action='store_true', help='Read a cheap tarball')
group.add_argument('-w', '--write', action='store_true', help='Write a cheap tarball')

parser.add_argument('files', nargs='*', help='Zero or more files to process')
parser.add_argument('-F', '--follow-symlinks', help='Follow symbolic links')
parser.add_argument('-f', '--file', help='Path to tarball to read or write')
parser.add_argument('-C', '--change-directory', help='Path to directory before reading/writing files')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if args.write:
  if not args.files:
    parser.error('Specify files to write a cheap tarball')
  if args.file:
    tarball = open(args.file, 'w')
  else:
    if sys.stdout.isatty():
      parser.error('If writing tarball to stdout, it must be redirected')
    tarball = sys.stdout
elif args.read:
  if args.files:
    parser.error('Do not specify files to read a cheap tarball')
  if args.file:
    tarball = open(args.file, 'r')
  else:
    if sys.stdin.isatty():
      parser.error('If reading tarball from stdin, it must be redirected')
    tarball = sys.stdin

if args.change_directory:
  if os.path.exists(args.change_directory):
    if os.path.isdir(args.change_directory):
      os.chdir(args.change_directory)
    else:
      parser.error(f'{args.change_directory!r} is not a directory')
  else:
    parser.error(f'Could not find {args.change_directory!r}')

if args.write:
  files = list()
  for filename in args.files:
    dive(filename)
  json.dump(files, tarball, indent=2)
  if args.file:
    tarball.close()
else:
  removed_leading_slash = False
  files = json.load(tarball)
  if args.file:
    tarball.close()

  for curr in files:
    if curr['path'].startswith('/'):
      curr['path'] = curr['path'][1:]
      if not removed_leading_slash:
        log.warning('Removing leading slash from paths')
        removed_leading_slash = True
      os.makedirs(os.path.dirname(curr['path']), exist_ok=True)
      decode(curr['path'], curr['base64'])
