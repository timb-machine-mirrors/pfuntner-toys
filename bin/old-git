#! /usr/bin/env python2

import os
import sys
import json
import pexpect
import subprocess

REAL_GIT = "/usr/bin/git"

config = None
with open(sys.argv[0] + ".json", "r") as f:
  config = json.load(f)

if (len(sys.argv) >= 2) and (sys.argv[1] in config["verbs"]) and ("--help" not in sys.argv[1:]):
  """
    This looks like a git command that often challenges for a password and token.
    When a prompt for an expected repo comes up, we'll provide the user and token
    for that repo.
  """

  """
    Build up the challenges we expect to handle.  The first expected condition is EOF and
    we'll add two extra conditions for each repo: one for the user prompt and another one for
    the password prompt.
  """
  expect = [pexpect.EOF]
  ret = 1
  repoNames = config["repos"].keys()
  for name in repoNames:
    expect += ["Username for 'https://%s':" % name, "Password for 'https://%s@%s':" % (config["repos"][name]["user"], name)]
  
  child = pexpect.spawn("%s %s" % (REAL_GIT, ' '.join(sys.argv[1:])), timeout=300)
  done = False
  while not done:
    resp = child.expect(expect)
    if resp == 0:
      """
        Handle EOF
      """
      sys.stdout.write(child.before)
      done = True
    else:
      """
        Handle user/password prompts for a specific repo
      """
      sys.stdout.write(child.before + child.after)
      repoIndex = int((resp-1)/2)
      name = repoNames[repoIndex]
      repo = config["repos"][name]
      child.sendline(repo["user"] if (resp % 2) == 1 else repo["token"])

  child.close()
  ret = child.exitstatus
  exit(ret)

"""
  Pass straight through to the `real` git without any user or password substitution.
"""
os.execv(REAL_GIT, [REAL_GIT] + sys.argv[1:])
