#! /usr/bin/env python3

import sys
import random
import string
import getopt
import subprocess

def debug(msg, noNewline=False):
  if verbose:
    sys.stderr.write('{msg}'.format(**locals()))
    if not noNewline:
      sys.stderr.write('\n')

def syntax(msg=None):
  if msg:
    sys.stderr.write('{msg}\n'.format(**locals()))
  sys.stderr.write('Syntax: {pgm} [-i|--import IMPORT] PRINT-EXPRESSION [...]\n'.format(pgm=sys.argv[0]))
  exit(1)
 
def run(cmd, printStdout=True):
  debug('> {cmd}\n'.format(**locals()), noNewline=True)
  p = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = p.communicate()
  rc = p.wait()

  if printStdout or verbose:
    sys.stdout.write(stdout)

  if (rc != 0) or (not stdout) or stderr or verbose:
    sys.stderr.write(stderr)

  return rc
  
(opts,args) = ([], [])
try:
  (opts,args) = getopt.getopt(sys.argv[1:], 'i:v', ['import=', 'verbose'])
except Exception as e:
  syntax(str(e))

javaCode = ''
verbose = False

for (opt,arg) in opts:
  if opt in ['-i', '--import']:
    javaCode += 'import {arg};\n'.format(**locals())
  elif opt in ['-v', '--verbose']:
    verbose = not verbose
  else:
    syntax('Unexpected option {opt!r}'.format(**locals()))

if not args:
  syntax('No print expressions specified')

classname = 'Jeval_' + ''.join([random.choice(string.letters + string.digits) for iteration in range(random.randint(8,16))])
javaCode += 'class {classname} {{\n  static public void main(String args[]) {{\n'.format(**locals())
for arg in args:
  javaCode += '    System.out.println({arg});\n'.format(**locals())
javaCode += '  }\n}\n'

debug(javaCode, noNewline=True)

tmpfilename = '/tmp/{classname}.java'.format(**locals())
tmpfile = open(tmpfilename, 'w')
tmpfile.write(javaCode)
tmpfile.close()

run('javac -d /tmp /tmp/{classname}.java'.format(**locals()))
run('java -cp /tmp {classname}'.format(**locals()))
run('rm -fv /tmp/{classname}.java /tmp/{classname}.class'.format(**locals()), printStdout=False)
