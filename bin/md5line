#! /usr/bin/env python3

import os
import sys
import signal
import hashlib
import logging
import argparse

def process(stream):
  for line in stream.read().splitlines():
    hash = hashlib.md5()
    hash.update(line.encode())
    print('{filename}{sum} {line}'.format(
      filename='' if stream == sys.stdin else stream.name + ': ',
      sum=hash.hexdigest(),
      line=line,
    ))
    
parser = argparse.ArgumentParser(description='Calculate md5sum of lines of one or more files')
parser.add_argument('files', metavar='file', nargs='*', help='Paths to zero or more files')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if args.files:
  for filename in args.files:
    if os.path.exists(filename):
      if not os.path.isdir(filename):
        with open(filename, stream):
          process(stream)
      else:
        log.warning(f'Not a file: {filename!r}')
    else:
      log.warning(f'Cannot find: {filename!r}')
else:
  if sys.stdin.isatty():
    parser.error('stdin must be redirected if not files are provided as arguments')
  process(sys.stdin)
