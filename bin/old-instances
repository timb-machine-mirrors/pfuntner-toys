#! /usr/bin/env python3

import re
import sys
import json
import logging
import argparse
import subprocess

from table import Table

def get(obj, *keys):
  key = keys[0]
  keys = keys[1:]
  if isinstance(obj, list):
    obj = obj[key] if key < len(obj) else None
  elif isinstance(obj, dict):
    obj = obj.get(key)
  else:
    obj = None
  if obj is None:
    return ''
  if keys:
    return get(obj, *keys)
  else:
    return obj

def keyhunt(keys, key_type_name, key_type, key_value_name):
  for key in keys:
    if key.get(key_type_name) == key_type:
      return key[key_value_name]
  log.info('Could not find {key_type} from {keys}'.format(**locals()))
  return None

def run(cmd):

  if isinstance(cmd, str):
    cmd = cmd.split()
  key = ' '.join(cmd)
  ret = {
    'rc': None,
    'stdout': '',
    'stderr': '',
  }
  log.info('Executing {cmd}'.format(**locals()))
  try:
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  except Exception as e:
    ret['exception'] = str(e)
  else:
    (stdout, stderr) = p.communicate()
    ret['stdout'] = stdout.decode('utf-8')
    ret['stderr'] = stderr.decode('utf-8')
    ret['rc'] = p.wait()

  log.debug('{cmd}: {ret}'.format(**locals()))
  return ret

def match(name):
  return name and (bool(regexp.search(str(name))) if args.regexp else True)

def get_token(s, sep, pos):
  return (s or '').split(sep)[pos]

def extract(cmd, *element_names):
  root = '?'
  resp = run(cmd)
  if resp['stdout']:
    element_pos = 0
    root = json.loads(resp['stdout'])
    while element_pos < len(element_names):
      if isinstance(root, list):
        assert len(root) == 1
        root = root[0]
      else:
        root = root.get(element_names[element_pos], {})
        element_pos += 1
  # log.debug('extract({cmd!r}, {element_names}) = {root}'.format(**locals()))
  return root

parser = argparse.ArgumentParser(description='Manage AWS & GCP instances')
parser.add_argument('regexp', nargs='?', help='Specify regular expression with which to match instance names')
parser.add_argument('-a', '--all', action='store_true', help='Display all instances')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

if not (args.all or args.regexp):
  parser.error('Use a regular expression to limit instances or --all to report all instances')

regexp = re.compile(args.regexp) if args.regexp else None

table = Table('Instance Name', 'Provider', 'Image Name', 'State', 'IP')
ret = run('gcloud compute instances list --format json')
if ret['stdout']:
  for instance in json.loads(ret['stdout']):
    name = instance['name']
    if match(name):
      log.debug('Examining {instance}'.format(**locals()))
      image_name = get_token(str(extract(['gcloud', 'compute', 'disks', 'describe', name, '--zone', get_token(instance.get('zone'), '/', -1), '--format', 'json'], 'sourceImage')), '/', -1)
      table.add(name, 'GCP', image_name, instance['status'].capitalize(), get(instance, 'networkInterfaces', 0, 'accessConfigs', 0, 'natIP'))

images = []
ret = run('aws ec2 describe-instances')
if ret['stdout']:
  for instances in json.loads(ret['stdout']).get('Reservations', []):
    for instance in instances.get('Instances', []):
      log.debug('Examining {instance}'.format(**locals()))
      name = keyhunt(instance.get('Tags', []), 'Key', 'Name', 'Value')
      if match(name):
        # image ID stands in for image name until have seen all of the images and can query AWS about them
        table.add(name, 'AWS', instance['ImageId'], instance['State']['Name'].capitalize(), get(instance, 'NetworkInterfaces', 0, 'Association', 'PublicIp'))
        images.append(instance['ImageId'])

# query AWS about images and backfill their names
if images:
  images = extract(['aws', 'ec2', 'describe-images', '--image-id', json.dumps(images)], 'Images')
  for instance in table.root:
    if instance['Provider'] == 'AWS':
      log.debug('instance: {instance}'.format(**locals()))
      for image in images:
        log.debug('image: {image}'.format(**locals()))
        if instance['Image Name'] == image['ImageId']:
          # replace image ID with image name
          instance['Image Name'] = image['Name']
          break

sys.stdout.write(str(table))
