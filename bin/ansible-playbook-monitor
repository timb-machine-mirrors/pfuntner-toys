#! /usr/bin/env python3

# if [ "x$1" == x ]
# then
#   echo "Syntax: $0 filename" | color.py red >&2
#   exit 1
# fi
# 
# while true
# do
#   date | banner --color blue
#   (
#     echo '[' 
#     ansible-tasks < "$1" | table.py -i fixed --heading -o json | json --linear | tail -1 | json
#     echo ']'
#   ) | table.py -i json -o fixed --rotate
#   sleep 15
#   echo
#   done

import time
import signal
import logging
import argparse
import subprocess

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  else:
    if isinstance(cmd, str):
      cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin is not None else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  if stdin is not None:
    p.stdin.write(stdin.encode())
    p.stdin.close()
  if capture:
    (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  else:
    (stdout, stderr) = ('', '')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Monitor Ansible playbook')
parser.add_argument('files', metavar='file', nargs='+', help='Paths to one or more output from ansible-playbook')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

files = ' '.join(args.files)

while True:
  run('date | banner --color blue', capture=False, shell=True)
  (rc, stdout, stderr) = run(f'ansible-tasks {files} | table.py -i fixed --heading -o json | json --linear', shell=True)
  tasks = stdout.splitlines()
  print('{} items/tasks'.format(len(tasks)))
  run('table.py -i json -o fixed --rotate', stdin='[' + tasks[-1] + ']', capture=False, shell=True)

  if 'Ansible playbooks have ended' in stderr:
    break
  else:
    print()
    time.sleep(15)
