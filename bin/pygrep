#! /usr/bin/env python3

import re
import sys
import json
import logging
import argparse

ignoreCase = False
negate = False
numbers = False

def process(filename=None):
  global json_output

  if filename:
    f = open(filename, "r")
  else:
    f = sys.stdin

  lineno = 0
  for line in f:
    lineno += 1
    line = line.strip('\n')
    tmp = line
    for exclude in excludes:
      tmp = exclude.sub("", tmp)
    match = regexp.search(tmp)
    if (match and (not args.negate)) or ((not match) and args.negate):
      if args.json:
        json_output.append({
          'filename': filename,
          'lineno': lineno,
          'line': line,
          'groups': match.groups() if match else None,
        })
      else:
        if args.list:
          print(filename)
          break
  
        if filename:
          sys.stdout.write(filename)
          if args.line_numbers: sys.stdout.write(' ')
        if args.line_numbers:
          sys.stdout.write(str(lineno))
        if filename or args.line_numbers:
          sys.stdout.write(':')
        sys.stdout.write("%s\n" % line)
    
  if filename:
    f.close()

parser = argparse.ArgumentParser(description='Do a Python-style grep')
parser.add_argument('-x', '--exclude', action='append', help='Specify regular expression to exclude')
parser.add_argument('-v', '--negate', action='store_true', help='Negate the search')
parser.add_argument('-i', '--ignore-case', action='store_true', help='Perform case-insensitive search')
parser.add_argument('-n', '--line-numbers', action='store_true', help='Include line numbers')
parser.add_argument('-l', '--list', action='store_true', help='Print filenames only')
parser.add_argument('-j', '--json', action='store_true', help='Display output in JSON form')
parser.add_argument('--verbose', action='store_true', help='Enable debugging')
parser.add_argument('regexp', help='Regular expression to search for')
parser.add_argument('files', metavar='files', nargs='*', help='Zero or more files to search')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

regexp = re.compile(args.regexp, flags=re.IGNORECASE if args.ignore_case else 0)
excludes = [re.compile(pattern, flags=re.IGNORECASE if args.ignore_case else 0) for pattern in (args.exclude or [])]

json_output = []

if args.files:
  for filename in args.files:
    process(filename)
elif sys.stdin.isatty():
  parser.error('stdin must be redirected if no files are specified on the command line')
elif args.list:
  parser.error('Cannot use --list without filenames')
else:
  process()

if args.json:
  json.dump(json_output, sys.stdout, indent=2, sort_keys=True)
  print()
