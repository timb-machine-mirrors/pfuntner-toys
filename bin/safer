#! /usr/bin/env python3

"""
  Purpose: This script helps me manage the `toys` repo on multiple systems and check in existing
  scripts.  Here's the scenario:
    1) I decided that a beloved script should be included so I push to the repo from system A
    2) On system B, I try do a `git pull` but it fails because I already have a copy - is it the same as what I just committed?  Is it older or newer?  I worry that I'll lose something important
  
  Use case:
    1) Commit and push the script on system A
    2) Try to do a `git pull` on system B
    3) If any of the scripts are preventing the pull:
       a) create bin/mkdir/ (if it doesn't already exist
       b) move the local copy of the scripts that are causing a problem to bin/mkdir/
       c) do the pull again.  It should work this time.  If not, there may be more scripts to move
       d) run `safer` on the scripts that were just pulled down.  It will:
            i) compare the md5sum of the `foobar` against `safe/foobar`
           ii) if the files are identical, the `safe` file is removed and it moves on to the next script
          iii) if the files are not identical, I am responsible for resolving any issue.  Likely, I can just remove the `safe` file once I'm satisfied that I'm not going to lose anything I want to keep
           iv) the goal is to empty out the `safe` directory, either by letting `safer` remove them or I remove them by hand
"""

import sys
import hashlib
import os.path
import subprocess

def md5sum(filename):
  hasher = hashlib.md5()
  with open(filename, 'r') as f:
    hasher.update(f.read().encode('utf-8'))
  return hasher.hexdigest()
    
for filename in sys.argv[1:]:
  if os.path.isfile(filename):
    comps = filename.split('/')
    # print "> %s" % comps
    comps.insert(-1, "safe")
    # print "> %s" % comps
    safeFilename = '/'.join(comps)
    # print "> %s" % safeFilename
    if os.path.isfile(safeFilename):
      sum = md5sum(filename)
      safeSum = md5sum(safeFilename)
      print("%s %s" % (sum, filename))
      print("%s %s" % (safeSum, safeFilename))
      if sum == safeSum:
          p = subprocess.Popen(["mv", "-v", safeFilename, filename])
          rc = p.wait()
      print("")
    else:
      sys.stderr.write("Not a file: `%s`\n" % safeFilename)
  else:
    sys.stderr.write("Not a file: `%s`\n" % filename)
