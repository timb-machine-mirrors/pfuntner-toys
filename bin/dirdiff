#! /usr/bin/env python3

"""
   Compare the current working directory on the local machine with the contents of a directory on a remote machine.

   A single `ssh` is done under the covers and it would be nice if ssh keys were enabled but it's ok if they are not.
"""

import re
import os
import hashlib
import logging
import argparse
import subprocess

remote_regexp = re.compile('(\S+)\s+\*?\./(.+)$')
dot_slash_regexp = re.compile('^\./')

def get_files(root):
  ret = []
  if os.path.isdir(root):
    for filename in os.listdir(root):
      ret += get_files(os.path.join(root, filename))
  else:
    ret.append(dot_slash_regexp.sub('', root))
  return ret

def md5sum(filename):
  hash = hashlib.md5()
  with open(filename) as stream:
    hash.update(stream.read().encode('utf-8'))
  return hash.hexdigest()

def excluded(filename):
  """
  Determine if a file has been excluded based on its name
  :param filename: The name of the file to consider
  :return: True if the file should be excluded, False otherwise
  """
  return any([bool(regexp.search(filename)) for regexp in excludes])

parser = argparse.ArgumentParser(description='Compare your local directory with a remote directory accessed via ssh')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('-x', '--exclude', dest='excludes', action='append',
                    help='Zero or more regular expressions to exclude files')
parser.add_argument('remote_dest', help='Remote destination user/system: USER@SYS, SYS')
parser.add_argument('remote_dir', help='Remote directory')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

cmd = ['ssh', args.remote_dest, 'cd {args.remote_dir!r}; find . -type f -print0 | xargs -0 md5sum *'.format(**locals())]
log.debug('cmd: {cmd}'.format(**locals()))
p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
(stdout, stderr) = p.communicate()
rc = p.wait()
log.debug('remote command returned {rc}, {stdout!r}, {stderr!r}'.format(**locals()))

remote = {}
excludes = []
for exclude in (args.excludes or []):
  excludes.append(re.compile(exclude))

for line in stdout.splitlines():
  match = remote_regexp.match(line)
  log.debug('remote: {line!r} {groups}'.format(line=line, groups=match.groups() if match else None))
  if match:
    remote[match.group(2)] = match.group(1)

local = {}

cwd = os.getcwd()

for filename in get_files('.'):
  if excluded(filename):
    continue

  local[filename] = md5sum(filename)
  log.debug('local: {filename!r} {hash}'.format(hash=local[filename], **locals()))

  if filename in remote:
    if local[filename] == remote[filename]:
      print('+ {filename!r}'.format(**locals()))
    else:
      print('- {filename!r} checksum mismatch'.format(**locals()))
  else:
    print('- {filename!r} not at {args.remote_dest}:{args.remote_dir}'.format(**locals()))

for filename in remote:
  if excluded(filename):
    continue

  if filename not in local:
    print('- {filename!r} not at {cwd!r}'.format(**locals()))
