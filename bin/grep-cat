#! /usr/bin/env python3

import re
import os
import sys
import string
import logging
import argparse

class SelectorClass(object):
  @classmethod
  def parse(cls, arg):
    try:
      return cls(arg)
    except Exception as e:
      log.debug(f'{cls.__name__} threw {e!s}')
      return None

class IntegerSelector(SelectorClass):
  def __init__(self, arg):
    self.arg = arg
    self.num = int(arg)
    if self.num == 0:
      raise Exception('Cannot select line `0` - the first line is `1`')

  def affect(self, file_name, lines, other_hits=[]):
    if self.num > 0:
      if self.num <= len(lines):
        return [self.num]
      else:
        log.warning('{self!s} does nothing to {file_name!r} since it only has {size} lines'.format(
          self=self,
          file_name=file_name,
          size=len(lines),
        ))
        return []
    else:
      return [len(lines)+self.num+1] if -self.num < len(lines) else []

  def __str__(self):
    return f'{self.__class__.__name__}(num={self.num})'

class RegexpSelector(SelectorClass):
  def __init__(self, arg):
    self.arg = arg
    self.regexp = None
    self.grep_hits = []
    self.delim = None
    self.offset = 0

    # process offset suffix if present
    match = re.search(r'^(.+)([+-])(\d+)$', arg)
    if match:
      self.offset = int(match.group(3)) * (1 if match.group(2) == '+' else -1)
      # strip off the offset suffix to parse regular expression
      arg = match.group(1)

    if len(arg) >= 3:
      self.delim = arg[0]
      if self.delim in string.punctuation:
        if arg[-1] == self.delim:
          if self.delim not in arg[1:-1]:
            self.regexp = re.compile(arg[1:-1], flags=re.IGNORECASE if args.ignore_case else 0)
          else:
            raise Exception(f'Delimiter {self.delim!r} repeated within potential regular expression {arg!r}')
        else:
          raise Exception(f'Potential regular expression {arg!r} not terminated by {self.delim!r}')
      else:
        raise Exception(f'Potential regular expression {arg!r} delimited by {self.delim!r} instead of punctuation ({string.punctuation!r}')
    else:
      raise Exception(f'Not a potential regular expression: {arg!r}')

  def grep(self, lines):
    self.grep_hits = [bool(self.regexp.search(line)) for line in lines]
    log.debug(f'grep_hits: {self.grep_hits}')

  def affect(self, file_name, lines, other_hits=[]):
    return [min(max(pos+self.offset+1, 1), len(lines)) for pos, hit in enumerate(self.grep_hits) if hit]

  def __str__(self):
    return f'{self.__class__.__name__}(pattern={self.regexp.pattern!r}, offset={self.offset})'

class ReferenceSelector(SelectorClass):
  def __init__(self, arg):
    self.arg = arg

    match = re.search(r'^\.([+-])(\d+)$', self.arg)
    if match:
      self.amt = int(match.group(2)) * (1 if match.group(1) == '+' else -1)
    else:
      raise Exception(f'Not a reference: {arg!r}')

  def __str__(self):
    return f'{self.__class__.__name__}({self.arg})'

  def affect(self, file_name, lines, other_hits=[]):
    return [min(max(1, other + self.amt), len(lines)) for other in other_hits]

class RangeSelector(SelectorClass):
  def __init__(self, arg):
    self.arg = arg
    self.selector1 = None
    self.selector2 = None

    # we use re.finditer since a colon could be expressed inside a regular expression selector.  We'll use the first
    # instance that makes sense to separate two selectors
    delims = re.finditer(':', arg)
    for delim in delims:
      left = self.arg[:delim.start(0)]
      self.selector1 = IntegerSelector.parse(left) or RegexpSelector.parse(left) or ReferenceSelector.parse(left)

      right = self.arg[delim.end(0):]
      self.selector2 = IntegerSelector.parse(right) or RegexpSelector.parse(right) or ReferenceSelector.parse(right)

      if all([self.selector1, self.selector2]):
        if self.selector1.__class__ == ReferenceSelector and self.selector2.__class__ == ReferenceSelector:
          raise Exception('Both range selectors may not be references')
        break
    if not all([self.selector1, self.selector2]):
      raise Exception(f'Not a range: {arg!r}')

  def affect(self, file_name, lines):
    ret = []
    if self.selector2.__class__ == ReferenceSelector:
      starts = self.selector1.affect(file_name, lines)
      ends = self.selector2.affect(file_name, lines, starts)
    else:
      ends = self.selector2.affect(file_name, lines)
      starts = self.selector1.affect(file_name, lines, ends)

    if starts:
      if ends:
        if len(starts) == len(ends):
          for start, end in zip(starts, ends):
            if start <= end:
              ret += range(start, end+1)
            else:
              log.warning(f'{start}-{end} makes no sense in {self!s} for {file_name!r}')
        else:
          log.warning('{self!s} has no effect since the starting selector matched {start_num} lines and the ending selected matched {end_num} in {file_name!r}'.format(
            self=self,
            start_num=len(starts),
            end_num=len(ends),
            file_name=file_name,
          ))
      else:
        log.warning(f'{self!s} has no effect since the ending selector did not match any lines in {file_name!r}')
    else:
      log.warning(f'{self!s} has no effect since the starting selector did not match any lines in {file_name!r}')

    return ret

  def __str__(self):
    return f'{self.__class__.__name__}({self.selector1!s}-{self.selector2!s})'

def print_line(file_name, pos, lines):
  print('{file_name}{pos}{space}{line}'.format(
    file_name=f'{file_name}:' if file_name and not args.suppress_file_names else '',
    pos='{}:'.format(pos + 1) if args.number else '',
    space=' ' if (file_name and not args.suppress_file_names) or args.number else '',
    line=lines[pos]
  ))

def process(file_name=None):
  stream = None
  if file_name:
    if os.path.exists(file_name):
      if not os.path.isdir(file_name):
        stream = open(file_name)
      elif os.path.exists(file_name):
        log.warning(f'Not a file: {file_name!r}')
    else:
      log.warning(f'Could not find {file_name!r}')
  else:
    stream = sys.stdin

  if stream:
    lines = stream.read().splitlines()

    # evaluate regular expressions across each line
    for selector in selectors:
      if isinstance(selector, RegexpSelector):
        selector.grep(lines)
      elif isinstance(selector, RangeSelector):
        if isinstance(selector.selector1, RegexpSelector):
          selector.selector1.grep(lines)
        if isinstance(selector.selector2, RegexpSelector):
          selector.selector2.grep(lines)

    if args.by_selectors:
      for selector in selectors:
        for effect in selector.affect(file_name or '<stdin>', lines):
          print_line(file_name, effect-1, lines)
    else:
      visibles = [False] * len(lines)

      for selector in selectors:
        for effect in selector.affect(file_name or '<stdin>', lines):
          log.debug(f'effect: {effect}')
          visibles[effect-1] = not visibles[effect-1]

      if args.negate:
        visibles = [not(visible) for visible in visibles]

      log.debug(f'visible: {visibles}')

      for pos, visible in enumerate(visibles):
        log.debug(f'pos: {pos}, visible: {visible}')
        if visible:
          print_line(file_name, pos, lines)

    if file_name:
      stream.close()

parser = argparse.ArgumentParser(
  description='Select lines from files based on regular expressions/line numbers',

  # I wish I didn't have to hard code the options like this but I wanted to included selectors and files but
  # couldn't find a better way to modify the default usage string.
  # usage='grep-cat [-h] [-i] [-n] [-f] [-v | -s] [-V] selector ... [file ...]',

  formatter_class=argparse.RawDescriptionHelpFormatter,
  epilog="""Selectors
  Line number selectors
    A positive and negative integer can be used to select a line by its position in a file.  `1` is the first line,
    `-1` is the last line.

  Regular expression selectors
    A regular expression can be used to select lines by matching the expression.  The expression must be delimited
    by punctuation characters which do not appear in the regular expression.  For instance: `/foo-bar/`.
    
    A regular expression selector also accepts an "offset" of the form `+NUM` or `-NUM` to alter the selector to
    target lines before or after the the regular expression.

  Range selectors
    Two selectors can be combined using a hyphen between then to select a range of lines that begin with
    the first selector and end with the second selector.  For instance: `1:/foo/`.
    
    An additional selector available on either side (but not both) of a range selector is a Reference selector of the form
    `.+NUM` or `.-NUM`.  The period stands in for hits from the other selector allowing you to refer to lines relative
    to the other selector.""",
)

parser.add_argument('-i', '--ignore-case', action='store_true', help='Perform case-insensitive searches')
parser.add_argument('-n', '--number', action='store_true', help='Print line numbers')
parser.add_argument('-f', '--suppress-file-names', action='store_true', help='Suppress file names')

group = parser.add_mutually_exclusive_group()
group.add_argument('-v', '--negate', action='store_true', help='Print lines that do not match the expressions/line numbers')
group.add_argument('-s', '--by-selectors', action='store_true', help='Print by selectors instead of lines')

parser.add_argument('-V', '--verbose', action='count', help='Enable debugging')

parser.usage = ' '.join(parser.format_usage().splitlines()) + ' selector ... [file ...]'
if parser.usage.startswith('usage: '):
  parser.usage = parser.usage[7:]

(args, unknown_args) = parser.parse_known_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

selector_classes = [
  IntegerSelector,
  RegexpSelector,
  RangeSelector,
]
selectors = []
file_names = []

log.info(f'args: {args}, unknown_args: {unknown_args}')

for arg in unknown_args:
  selector = None
  if not file_names:
    for selector_class in selector_classes:
      selector = selector_class.parse(arg)
      if selector:
        selectors.append(selector)
        break
  if not selector:
    file_names.append(arg)

log.info('Selectors: {selectors}, file_names={file_names}'.format(
  selectors=[str(selector) for selector in selectors],
  file_names=file_names,
))

if selectors:
  if file_names:
    for file_name in file_names:
      process(file_name)
  else:
    if sys.stdin.isatty():
      parser.error('Redirect stdin if file names are not passed on command line')
    process()
else:
  parser.error('No selectors')