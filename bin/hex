#! /usr/bin/env python3

import os
import sys
import logging
import argparse

def process(arg):
  stream = None
  if isinstance(arg, str):
    if os.path.exists(arg) and not os.path.isdir(arg):
      try:
        stream = open(arg, 'r' if args.text else 'rb')
      except Exception as e:
        log.warning('Cannot open {arg!r}: {e!s}'.format(**locals()))
    else:
      log.warning('Not a file: {arg!r}'.format(**locals()))
  else:
    stream = sys.stdin if args.text else os.fdopen(sys.stdin.fileno(), 'rb')

  if stream:
    pos = 0
    eof = False
    while True:
      empty = True
      line1 = '{pos:08x}'.format(**locals())
      line2 = ' ' * 8
      for iteration in range(width):
        c = stream.read(1) # .decode('cp437')
        if c:
          empty = False
          line1 += '{c:>5}'.format(c=repr(c)[2:-1])
          line2 += ' '*3 + '{c:02x}'.format(c=ord(c))
        else:
          eof = True
          break

      if not empty:
        print(line1)
        print(line2)

      if eof:
        break

      pos += width

    if isinstance(arg, str):
      stream.close()

parser = argparse.ArgumentParser(description='Display files and data in hex and character form')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('-8', dest='eight_byte_width', action='store_true', help='Display eight characters at a time')
parser.add_argument('-t', '--text', action='store_true', help='Process stream as text')
parser.add_argument('files', metavar='file', nargs='*', help='Zero or more files')
args = parser.parse_args()

width = 8 if args.eight_byte_width else 16

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

if args.files:
  list(map(process, args.files))
else:
  if sys.stdin.isatty():
    log.critical('stdin must be redirected if you don\'t specify any files on the command line')
    exit(1)
  process(sys.stdin)
