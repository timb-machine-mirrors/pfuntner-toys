#! /usr/bin/env python3

import re
import os
import logging
import datetime
import argparse

from table import Table

class Chatter(object):
  def __init__(self, server, nickname, address, time):
    self.server = server
    self.nickname = nickname
    self.address = address
    self.time = datetime.datetime.strptime(time, '%a %b %d %H:%M:%S %Y')

  def __str__(self):
    return str(self.__dict__)

parser = argparse.ArgumentParser(description='Extract IPs from hexchat irc client logs')
parser.add_argument('-a', '-i', '--ip', '--address', action='store_true', help='Sort by IP address')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

"""
/home/mrbruno/.config/hexchat/logs/undernet/foobar.log
"""

root = os.path.expanduser('~/.config/hexchat/logs')

"""
**** BEGIN LOGGING AT Fri Mar 20 15:42:38 2020

[foo has address bar@255.255.255.255]
Mar 20 15:42:40 *       [foo] (bar@255.255.255.255): Android IRC Client
Mar 20 15:42:40 *       [foo] +#chatzone +#newbies
Mar 20 15:42:40 *       [foo] choopa.nj.us.dal.net :choopa
Mar 20 15:42:40 *       [foo] idle 00:00:45, signon: Fri Mar 20 15:14:52
Mar 20 15:42:40 *       [foo] End of WHOIS list.
Mar 20 15:42:51 <bruno>       yo
"""

time_regexp = re.compile(r'^\*{4} BEGIN LOGGING AT ([A-Z][a-z]{2} [A-Z][a-z]{2} (?:\s|\d)\d \d{2}:\d{2}:\d{2} \d{4})$')
address_regexp = re.compile(r'^\[(.+) has address (.+@.+)\]$')

chatters = []

if os.path.isdir(root):
  for network_name in os.listdir(root):
    for log_name in os.listdir(os.path.join(root, network_name)):
      path = os.path.join(root, network_name, log_name)
      time = None
      with open(path) as stream:
        for line in stream.read().splitlines():
          match = time_regexp.search(line)
          if match:
            time = match.group(1)
          elif time:
            match = address_regexp.search(line)
            if match:
              chatters.append(Chatter(network_name, match.group(1), match.group(2), time))
              log.debug(str(chatters[-1]))
              time = None
  chatters.sort(key=lambda chatter: (f'{chatter.address}/' if args.ip else '') + f'{chatter.server}/{chatter.nickname}/{chatter.time!s}')
  table = Table('Server', 'Nickname', 'Address', 'Time')
  for chatter in chatters:
    table.add(chatter.server, chatter.nickname, chatter.address, chatter.time.isoformat())
  print(str(table), end='')
else:
  parser.error(f'Could not find: {root}')
