#! /usr/bin/env python3

import re
import json
import signal
import logging
import argparse
import subprocess

from table import Table

def make_value(value):
  value = repr(value)
  if isinstance(value, str) and len(value) > 33 and not args.long:
    value = value[:16] + '...' + value[-16:]
  return value

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  if stdin:
    p.stdin.write(stdin.encode())
    p.stdin.close()
  if capture:
    (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  else:
    (stdout, stderr) = ('', '')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Display Ansible facts for hosts')
parser.add_argument('hosts', metavar='host', default=['all'], nargs='+', help='One or more hosts (default: `all`)')
parser.add_argument('-l', '--long', action='store_true', help='Show long fact values')
parser.add_argument('-d', '--docker', action='store_true', help='Hosts are Docker containers')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if args.docker:
  cmd = f'ansible -c docker -i {",".join(args.hosts)}, -m setup all'
else:
  cmd = f'ansible -m setup {",".join(args.hosts)}'

(rc, stdout, stderr) = run(cmd)

if rc != 0:
  log.warning(f'{cmd!r} failed: {rc}, {stderr!r}')

"""
       1 localhost | SUCCESS => {
       2     "ansible_facts": {
       3         "ansible_all_ipv4_addresses": [
       4             "172.17.0.1", 
       5             "64.102.189.72", 
         .
         .
         .
     982         ], 
     983         "module_setup": true
     984     }, 
     985     "changed": false
     986 }
"""
regexp = re.compile(r'^(\S+) \| SUCCESS => \{$')

host = None # stores current host being processed
setup_lines = list() # stores partial JSON output while processing a host
hosts = list() # stores names of hosts that have been seen so far during processing JSON output
facts = dict() # stores Ansible facts for each host
for line in stdout.splitlines():
  if host and setup_lines:
    setup_lines.append(line)
    if line == '}':
      root = json.loads('\n'.join(setup_lines))
      for (fact_name, fact_value) in root.get('ansible_facts').items():
        if fact_name not in facts:
          facts[fact_name] = dict()
        facts[fact_name][host] = make_value(fact_value)
      host = None
      setup_lines = list()
  elif not host and not setup_lines:
    match = regexp.search(line)
    if match:
      host = match.group(1)
      hosts.append(host)
      setup_lines.append('{')

hosts = sorted(hosts)
table = Table(['variable'] + hosts)
for (fact_name, fact_values) in facts.items():
  row = [fact_name]
  for host in hosts:
    row.append(fact_values.get(host, ''))
  table.add(row)
print(str(table), end='')
