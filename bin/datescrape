#! /usr/bin/env python2

import re
import os
import sys
import logging
import argparse
import datetime

class Format(object):
  def __init__(self, regexp_pattern, strptime_format):
    self.regexp = re.compile(regexp_pattern)
    self.strptime_format = strptime_format

  def apply_regexp(self, line):
    # all extracted substrings are joined together into a single string
    return [' '.join(match.groups()) for match in self.regexp.finditer(line)]

def process(filename=None):
  if filename:
    if os.path.isfile(filename):
      with open(filename) as stream:
        data = stream.read()
    else:
      log.warning('Cannot open {filename!r}'.format(**locals()))
      return
  else:
    data = sys.stdin.read()
    filename = '-'

  for (linenum, line) in enumerate(data.splitlines()):
    hits = 0
    for format in formats:
      for scraping in format.apply_regexp(line):
        timestamp = datetime.datetime.strptime(scraping, format.strptime_format)
        log.info('{filename}:{linenum} {line!r} {scraping!r}'.format(**locals()))
        if args.timestamp_only:
          print '{timestamp!s}'.format(**locals())
        else:
          print '{filename}: {timestamp!s}'.format(**locals())
        hits += 1
    if hits == 0:
      log.debug('No hits for {line!r}'.format(**locals()))  

parser = argparse.ArgumentParser(description='Time/date scraper')
parser.add_argument('files', metavar='file', nargs='*', help='Zero or more files from which to scrape')
parser.add_argument('-v', '--verbose', action='count', help='Enable more debugging')
parser.add_argument('-t', '--timestamp-only', action='store_true', help='Only print extracted normalized timestamps')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - 10*(args.verbose or 0))

"""
     663 [54.161.79.179] out:                     Built on: 07/26/2019 05:04 AM
     664 [54.161.79.179] out: Oct 17, 2019 7:27:32 PM java.util.prefs.FileSystemPreferences$1 run
     665     ansible-firewall, 2.7.2, 10/17/2019 - 19:19:58
     666 ansible-os_hardening, 1.9.2, 10/17/2019 - 19:19:58
     667 ansible-users, 1.7.1, 10/17/2019 - 19:19:58
[jpfuntne@JPFUNTNE-GCEYJ CCC-1370 - RHEL8 and basehost.yml]$
"""
formats = [
  Format(r'(\d{2} \S{3} \d{4} \d{2}:\d{2}:\d{2})', '%d %b %Y %H:%M:%S'),
  Format(r'(\d{2}/\d{2}/\d{4} \d{2}:\d{2} (?:AM|PM))', '%m/%d/%Y %I:%M %p'), # Note that the AM/PM portion must be a non-capturing substring so only a single substring is extracted when it matches.
  Format(r'(\d{2}/\d{2}/\d{4} - \d{2}:\d{2}:\d{2})', '%m/%d/%Y - %H:%M:%S'),
  Format(r'(\S{3} \S{3} \d{2} \d{2}:\d{2}:\d{2})\s+\S+\s+(\d{4})', '%a %b %d %H:%M:%S %Y'), # the regular expression extracts two substrings, excluding the timezone. After the substrings are joined into a new string, they can be parsed.
]

if args.files:
  map(process, args.files)
else:
  if sys.stdin.isatty():
    parser.error('stdin must be redirected if no files are present')
  process()
