#! /usr/bin/env python3

import re
import sys
import json
import time
import socket
import logging
import argparse
import datetime
import subprocess

from table import Table

def run(cmd):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('cmd: {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = p.communicate()
  stdout = stdout.decode('utf-8')
  stderr = stderr.decode('utf-8')
  rc = p.wait()
  log.debug('{rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

def get(root, path, isList=False):
  if isinstance(path, str):
    path = path.split('/')
  log.info('get({path})'.format(**locals()))
  log.debug('get({root!r})'.format(**locals()))
  if path:
    return get(root.get(path[0], {}), path[1:], isList=isList)
  else:
    log.info('get({root!r}, {path})'.format(**locals()))
    if isList:
      if isinstance(root, list):
        root = ', '.join([datum for datum in root])
    elif isinstance(root, dict):
      root = ''
    return root

def get_ip():
  ret = ''

  if 'linux' in sys.platform:
    (rc, stdout, stderr) = run('ifconfig')
    # 172.17.0.1, 192.168.1.9, 127.0.0.1
    ips = [ip for ip in ifconfig_regexp.findall(stdout) if (ip != '127.0.0.1') and (not ip.startswith('172.'))]
    ret = ', '.join(ips)
  else:
    (rc, stdout, stderr) = run('ipconfig /all')
    ips = [hit for hit in ipconfig_regexp.findall(stdout)]
    ret = ', '.join(ips)

  return ret

def distro_translate(s):
  return distro_translations.get(s, s)

parser = argparse.ArgumentParser(description='Get stats on Ansible hosts')

parser.add_argument('hosts', metavar='host', nargs='*', help='List of hosts to query')
parser.add_argument('-a', '--all', action='store_true', help='Target localhost and everything in /etc/ansible/hosts')

parser.add_argument('-i', '--inventory', default='/etc/ansible/hosts', help='Ansible inventory YAML file.  Default: /etc/ansible/hosts')
parser.add_argument('-v', '--verbose', action='count', help='Enable more debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - 10*(args.verbose or 0))

if args.all and args.hosts:
  parser.error('--all and hosts are mutually exclusive')

header_regexp = re.compile('^(\S+)\s+\|\s+(\S+)\s+=>\s+{')

ifconfig_regexp = re.compile('inet\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s+', re.MULTILINE)

#    IPv4 Address. . . . . . . . . . . : 10.150.34.17(Preferred)
ipconfig_regexp = re.compile('IPv4 Address(?:\.\s)*\s*:\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})', re.MULTILINE)

# System Boot Time:          2019-10-15, 3:33:11 PM
systeminfo_regexp = re.compile('System Boot Time:\s+(\d{4}-\d{2}-\d{2},\s+\d{1,2}:\d{1,2}:\d{1,2}\s+(?:AM|PM))', re.MULTILINE)

"""
Get ansible inventory
[jpfuntne@JPFUNTNE-GCEYJ ~]$ ansible-inventory --list | json --flatten
/_meta/hostvars/rhel7/ansible_host '54.82.12.156'
/_meta/hostvars/rhel7/ansible_ssh_private_key_file 'c:/sto/pfuntner-aws.pem'
/_meta/hostvars/rhel7/ansible_user 'ec2-user'
/_meta/hostvars/rhel8_hardened/ansible_host '3.84.165.114'
/_meta/hostvars/rhel8_hardened/ansible_ssh_private_key_file 'c:/sto/pfuntner-aws.pem'
/_meta/hostvars/rhel8_hardened/ansible_user 'ec2-user'
/_meta/hostvars/runon/ansible_host 'pfuntner1.cisco.com'
/_meta/hostvars/runon/ansible_ssh_private_key_file 'c:/sto/pfuntner-runon.pem'
/_meta/hostvars/runon/ansible_user 'centos'
/all/children/0 'ungrouped'
/ungrouped/hosts/0 'rhel7'
/ungrouped/hosts/1 'rhel8_hardened'
/ungrouped/hosts/2 'runon'
[jpfuntne@JPFUNTNE-GCEYJ ~]$
"""
(rc, stdout, stderr) = run('ansible-inventory --list')
inventory = {}
try:
  inventory = json.loads(stdout).get('_meta', {}).get('hostvars', {})
except Exception as e:
  log.debug('Caught while loading inventory JSON: {e!s}'.format(**locals()))
else:
  log.debug('inventory: {inventory}'.format(**locals()))

cmd = ('ansible -i {inventory} {hosts} -m setup'.format(inventory=args.inventory, hosts=','.join(args.hosts) if args.hosts else 'all' + (',localhost' if args.all else ''))).split()
log.debug(cmd)
(rc, stdout, stderr) = run(cmd)
if (not stdout) and stderr:
  sys.stderr.write(stderr)
  exit(1)

distro_translations = {
  'Amazon (Karoo)': 'Amazon Linux 2',
  'Amazon 2018.03': 'Amazon Linux 1',
}

buf = ''
hosts = []

for line in stdout.splitlines():
  match = header_regexp.search(line)
  if match:
    buf = '{'
    host = match.group(1)
    success = match.group(2) == 'SUCCESS'
  elif buf:
    buf += line
    if line == '}':
      resp = json.loads(buf)
      log.info('{host} {success}'.format(**locals()))
      log.debug('{resp}'.format(**locals()))


      elapsed = ''
      if 'linux' in sys.platform:
        seconds = get(resp, 'ansible_facts/ansible_uptime_seconds')
        if seconds:
          elapsed = datetime.timedelta(seconds=int(seconds))
      else:
        (rc, stdout, stderr) = run('systeminfo')
        match = systeminfo_regexp.search(stdout)
        if match:
          # System Boot Time:          2019-10-15, 3:33:11 PM
          elapsed = str(datetime.datetime.now() - datetime.datetime.strptime(match.group(1), '%Y-%m-%d, %I:%M:%S %p'))

      ip = ''
      if host in inventory:
        try:
          socket_info = socket.gethostbyname_ex(inventory[host]['ansible_host'])
        except Exception as e:
          log.debug('Caught {e!s}')
        else:
          log.info('socket: {host}: {socket_info}'.format(**locals()))
          ip = ', '.join(socket_info[2])
      elif host == 'localhost':
        ip = get_ip()

      hosts.append((
        host,
        get(resp, 'ansible_facts/ansible_fqdn') or 'n/a',
        distro_translate(get(resp, 'ansible_facts/ansible_distribution') + ' ' + get(resp, 'ansible_facts/ansible_distribution_version')).strip() or 'n/a',

        # get(resp, 'ansible_facts/ansible_all_ipv4_addresses', isList=True),
        ip or 'n/a',

        elapsed or 'n/a',
      ))
      buf = ''

table = Table('Host', 'Hostname', 'OS', 'IPs', 'Uptime', desiredSep='  ')
for host in sorted(hosts, key=lambda host_tuple: host_tuple[0]):
  table.add(host)
sys.stdout.write(str(table))
