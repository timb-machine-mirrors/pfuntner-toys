#! /usr/bin/env python

import re
import sys
import logging
import argparse
import subprocess

def run(cmd):
  if isinstance(cmd, basestring):
    cmd = cmd.split()
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = p.communicate()
  rc = p.wait()
  if rc != 0:
    sys.stderr.write('{cmd} failed: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return rc, stdout, stderr

parser = argparse.ArgumentParser(description='Remove git branches that are the names of commits')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

regexp = re.compile('^  ([0-9a-f]{40}$)')

run('git checkout master')
(rc, stdout, stderr) = run('git branch')
for line in stdout.splitlines():
  match = regexp.search(line)
  log.debug('{line!r} => {groups}'.format(groups=match.groups() if match else None, **locals()))
  if match:
    commit = match.group(1)
    print 'Removing {commit}'.format(**locals())
    run(['git', 'branch', '-D', commit])
