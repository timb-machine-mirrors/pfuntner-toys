#! /usr/bin/env python3

import re
import os
import sys
import getopt
import logging
import argparse
import subprocess

def findDir(templates):
  for template in templates:
     try:
       dir = (template % os.environ).replace('\\', '/')
     except Exception as e:
       log.debug('Ignoring `{e!s}` for {template!r}'.format(**locals()))
     else:
       if os.path.isdir(dir):
         return dir

  log.error('Could not find a download directory from: {templates}'.format(**locals()))
  exit(1)
  
parser = argparse.ArgumentParser(description='Search for recently downloaded files')
parser.add_argument('--print0', action='store_true', help='Use \\0 to separate files - useful for use with `xargs -0`')
parser.add_argument('-v', '--verbose', dest='verbose', action='count', help='Enable debugging')
parser.add_argument('time', nargs='?', help='Time: FLOAT(s|m|h|d)? - Default: 1 hour')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - 10*(args.verbose or 0))

if not args.time:
  mtime = -1/24
else:
  match = re.search('^((\d+)?\.?(\d+)?)([smhd])?$', args.time)
  if match:
    log.debug('match groups: {groups}'.format(groups=match.groups()))
    mtime = match.group(2)
    suffix = match.group(4)
    if mtime:
      try:
        mtime = -float(mtime)
      except Exception as e:
        mtime = None
        log.debug('Caught `{e!s}` while converting {mtime!r} to float'.format(**locals()))
    log.debug('Raw mtime: {mtime}'.format(**locals()))
    if mtime:
      # we don't have to do anything for suffix=='d' - mtime is all set!
      if suffix == 's':
        mtime /= 24*60*60
      elif suffix == 'm':
        mtime /= 24*60
      elif suffix == 'h':
        mtime /= 24
    if not mtime:
      log.error('{args.time!r} is not a valid time'.format(**locals()))
      exit(1)
    else:
      log.info('Parsed `{args.time}` to `{mtime}`'.format(**locals()))
  else:
    log.error('{args.time!r} is not a valid time'.format(**locals()))
    exit(1)

dir = findDir(["%(USERPROFILE)s/downloads", "%(HOME)s/downloads"])

cmd = ["find", dir, "-maxdepth", "1", "-follow", "!", "-name", "*.swp", "-type", "f", "-mtime", str(mtime)] + (['-print0'] if args.print0 else [])
log.debug("%s" % cmd)
p = subprocess.Popen(cmd)
exit(p.wait())
