#! /usr/bin/env python3

import re
import json
import signal
import logging
import fnmatch
import argparse
import subprocess

from table import Table

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info(f'Executing {cmd!r}')
  p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  if stdin:
    p.stdin.write(stdin.encode())
  if capture:
    (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  else:
    (stdout, stderr) = ('', '')
  rc = p.wait()
  log.debug(f'Executed {cmd!r}: {rc}, {stdout!r}, {stderr!r}')
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Find AWS images and report information')
parser.add_argument('-n', '--name-pattern', required=True, help='Image name regular expression pattern')
parser.add_argument('-o', '--owner-id', required=True, help='AWS owner ID of image')
parser.add_argument('--regexp', action='store_true', help='Pattern is a regular expression not shell pattern matching')
parser.add_argument('--region', help='AWS region - your default is used if not specified')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

cmd = f'aws ec2 describe-images --owners {args.owner_id}'
if args.region:
  cmd += f' --region {args.region}'
(rc, stdout, stderr) = run(cmd)

if rc == 0:
  table = Table('Image name', 'Image ID', 'Created')
  for image in json.loads(stdout).get('Images', []):
    if (args.regexp and re.search(args.name_pattern, image.get('Name', ''))) or ((not args.regexp) and fnmatch.fnmatch(image.get('Name', ''), args.name_pattern)):
      table.add(image['Name'], image['ImageId'], image['CreationDate'])
      log.debug(image)

  table.root.sort(reverse=True, key=lambda image: image['Created'])
  print(str(table))
else:
  log.error('aws command failed')
