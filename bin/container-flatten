#! /usr/bin/env python3

import sys
import signal
import logging
import argparse

import bruno_tools

parser = argparse.ArgumentParser(description='Flatten a container image - multiple layers to one layer')
parser.add_argument('starting_image', metavar='starting-image', help='Starting image - presumably with multiple layers')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

tokens = args.starting_image.split(':')
if len(tokens) > 2:
  parser.error(f'Illegal tag {args.starting_image!r}')

command = ['docker', 'run', '-dit', '--rm', '--entrypoint', 'sh', args.starting_image]
(rc, stdout, stderr) = bruno_tools.run(command, log=log)
if rc == 0 and stdout:
  container_id = stdout.strip()

  """
    $ docker export --help
    
    Usage:  docker export [OPTIONS] CONTAINER
    
    Export a container's filesystem as a tar archive
    
    Aliases:
      docker container export, docker export
    
    Options:
      -o, --output string   Write to a file, instead of STDOUT
    $
   


    $ docker import --help
    
    Usage:  docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]
    
    Import the contents from a tarball to create a filesystem image
    
    Aliases:
      docker image import, docker import
    
    Options:
      -c, --change list       Apply Dockerfile instruction to the created image
      -m, --message string    Set commit message for imported image
          --platform string   Set platform if server is multi-platform capable
    $
  """

  """
    /0/Config/Cmd/0 '/bin/bash'
    /0/Config/Domainname ''
    /0/Config/Entrypoint None
    /0/Config/Env/0 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
    /0/Config/Hostname 'c11d143fb16b'
    /0/Config/Image 'almalinux:9'
    /0/Config/Labels/cloud9_vin '651a8f7fb0f0e03bc170f422'
    /0/Config/OnBuild None
    /0/Config/OpenStdin True
    /0/Config/StdinOnce False
    /0/Config/Tty True
    /0/Config/User ''
    /0/Config/Volumes None
    --
    /0/ContainerConfig/Cmd/0 '/bin/bash'
    /0/ContainerConfig/Domainname ''
    /0/ContainerConfig/Entrypoint None
    /0/ContainerConfig/Env/0 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
    /0/ContainerConfig/Hostname 'c11d143fb16b'
    /0/ContainerConfig/Image 'almalinux:9'
    /0/ContainerConfig/OnBuild None
    /0/ContainerConfig/OpenStdin True
    /0/ContainerConfig/StdinOnce False
  """

  command = ['bash', '-c', f'docker export {container_id} | docker import - {tokens[0]}:flattened']
  (flatten_rc, flatten_stdout, flatten_stderr) = bruno_tools.run(command, log=log)
  if flatten_rc != 0:
    log.error(f'{command} failed: {flatten_rc=}, {flatten_stdout=!r}, {flatten_stderr=!r}')
  
  command = ['docker', 'rm', '-f', container_id]
  (rc, stdout, stderr) = bruno_tools.run(command, log=log)
  if rc != 0 or stderr:
    log.error(f'{command} failed: {rc=}, {stdout=!r}, {stderr=!r}')
    exit(1)

  if flatten_rc != 0 or flatten_stderr:
    exit(1)
else:
  log.error(f'{command} failed: {rc=}, {stdout=!r}, {stderr=!r}')
  exit(1)
