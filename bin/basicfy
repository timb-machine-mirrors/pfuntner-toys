#! /usr/bin/env python3

import os
import sys
import logging
import argparse
import subprocess

def lookfor(*paths):
  ret = None
  for path in paths:
    if os.path.isfile(path):
      ret = open(path).read()

  if not ret:
    log.warning('Could not find any of {paths}'.format(**locals()))

  return ret

parser = argparse.ArgumentParser(description='Append basic logging/argparse template to a file')
parser.add_argument('file', help='File to `basicfy`')
parser.add_argument('-v', '--verbose', action='store_true', help='Enable debugging')
parser.add_argument('-f', '--force', action='store_true', help='Add template even if the file already has them')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(funcName)s:%(lineno)d %(msg)s')
log = logging.getLogger('basicfy')
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

if not args.force:
  try:
    with open(args.file) as stream:
      data = stream.read()
  except Exception as e:
    log.info('Ignoring {e!s}'.format(**locals()))
  else:
    if ('import logging' in data) and ('import argparse' in data):
      parser.error('{args.file!r} already imports the logging and argparse modules'.format(**locals()))

basic = lookfor(
  os.path.expanduser('~/python/basic'),
  f'{os.path.dirname(sys.argv[0])}/../python/basic',
)

if not basic:
  import requests

  url = 'https://raw.githubusercontent.com/pfuntner/fun/master/basic'
  log.info('GET {url}...'.format(**locals()))
  req = requests.get(url)
  if req.ok:
    basic = req.text
  else:
    log.warning('{url}: {req.status_code}, {req.text!r}'.format(**locals()))
    parser.error('Cannot locate basic template!')

tools_path = os.path.join(os.path.dirname(args.file), 'bruno_tools.py')
if not os.path.exists(tools_path):
  print(f'Creating {tools_path!r} symbolic link')
  os.symlink(os.path.expanduser('~/bin/bruno_tools.py'), tools_path)

with open(args.file, 'a') as work:
  work.write(basic)
  subprocess.Popen(['chmod', '-v', 'a+x', args.file]).wait()
