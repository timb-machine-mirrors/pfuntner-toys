#! /usr/bin/env python3

import re
import gzip
import logging
import argparse
import io
import subprocess

from table import Table

class Gzipper(object):
  def __init__(self):
    self.regexp = re.compile('.\.t?gz$')

  def match(self, file_name):
    return bool(self.regexp.match(str(file_name)))

  def compress(self, data):
    s = io.StringIO()
    gzip_file = gzip.GzipFile(fileobj=s, mode='w')
    gzip_file.write(data)
    gzip_file.close()
    compressed_data = s.getvalue()
    log.debug('compressed_data: {compressed_data!r}'.format(**locals()))
    return compressed_data
    
  def uncompress(self, data):
    clear_data = gzip.GzipFile(fileobj=io.StringIO(data), mode='r').read()
    log.debug('clear_data: {clear_data!r}'.format(**locals()))
    return clear_data

class Xzipper(object):
  def __init__(self):
    self.regexp = re.compile('.\.xz$')

  def match(self, file_name):
    return bool(self.regexp.match(str(file_name)))

  def compress(self, data):
    p = subprocess.Popen(['xz', '--stdout'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    (compressed_data, stderr) = p.communicate(data)
    p.wait()
    return compressed_data
    
  def uncompress(self, data):
    p = subprocess.Popen(['xz', '--decompress', '--stdout'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    (clear_data, stderr) = p.communicate(data)
    p.wait()
    return clear_data

def savings(dividend, divisor):
  quotient = ((dividend*100.0) / divisor) if divisor != 0 else 0
  return '{:.2f}'.format(100-quotient) + '%'

def process(file_name):
  global table, gzipper

  data = None
  try:
    with open(file_name) as stream:
      data = stream.read()
  except Exception as e:
    table.add((file_name, 'n/a', 'n/a', 'n/a', 'n/a', 'n/a', str(e)))

  if data is not None:
    gzip_data = None
    xz_data = None

    if gzipper.match(str(file_name)):
      gzip_data = data
      data = gzipper.uncompress(gzip_data)
    elif xzipper.match(str(file_name)):
      xz_data = data
      data = xzipper.uncompress(xz_data)

    if gzip_data is None:
      gzip_data = gzipper.compress(data)

    if xz_data is None:
      xz_data = xzipper.compress(data)

    table.add((file_name, str(len(data)), str(len(gzip_data)), savings(len(gzip_data), len(data)), str(len(xz_data)), savings(len(xz_data), len(data)), ''))

parser = argparse.ArgumentParser(description='Compare compression techniques')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('files', metavar='file', nargs='+', help='One or more files')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

table = Table(('File name', 'plain', 'gzip', 'gzip savings', 'xz', 'xz savings', ''), desiredSep='  ')

gzipper = Gzipper()
xzipper = Xzipper()

list(map((process, args.files))

print(str(table))
