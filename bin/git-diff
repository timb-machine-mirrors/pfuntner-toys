#! /usr/bin/env python3

import os
import sys
import logging
import argparse
import subprocess

def run(cmd):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

def test(dir, base):
  print(os.path.join(dir, base))
  os.chdir(dir)
  (rc, stdout, stderr) = run(['git', 'diff', base])
  sys.stdout.write(stdout)
  sys.stderr.write(stderr)
  os.chdir(cwd)
  print('')

parser = argparse.ArgumentParser(description='Perform `git diff` on arbitrary files')
parser.add_argument('files', metavar='file', nargs='+', help='One or more files')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

cwd = os.getcwd()

for filename in args.files:
  if os.path.exists(filename):
    if os.path.isdir(filename):
      test(filename, '.')
    elif os.path.isfile(filename):
      test(os.path.dirname(filename), os.path.basename(filename))
    else:
      log.warning(f'Not a file or dir: {filename!r}')
  else:
    log.warning(f'Not found: {filename!r}')
