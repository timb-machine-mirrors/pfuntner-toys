#! /usr/bin/env python3

import pdb

import re
import os
import sys
import signal
import logging
import argparse
import requests
import datetime
import subprocess

from lazyhtml import LazyHtml

class Table(object):
  def __init__(self, *args):
    if len(args) == 1 and type(args[0]) in (list, tuple):
      self.headings = args[0]
    else:
      self.headings = args

    try:
      self.p = subprocess.Popen(['column', '-t', '-s\t'], stdin=subprocess.PIPE, text=True)
    except Exception as e:
      print(f'Error opening `column`: {e!s}', file=sys.stderr)
      print('On Ubuntu, try installing the bsdmainutils package', file=sys.stderr)
      exit(1)

    self.p.stdin.write('\t'.join([str(heading) for heading in self.headings]) + '\n')

  def add(self, *args):
    self.p.stdin.write('\t'.join([str(arg) for arg in args]) + '\n')

  def close(self):
    self.p.stdin.close()
    self.p.wait()

def see(o):
  if isinstance(o, datetime.datetime):
    return o.strftime('%Y-%m-%d %H:%M')
  return o

def find(node, *conditions):
  ret = list()
  if node is not None:
    if all([condition(node) for condition in conditions]):
      ret.append(node)

  for child in node:
    ret += find(child, *conditions)
  return ret

parser = argparse.ArgumentParser(description='Summarize Jenkins job status', formatter_class=argparse.RawTextHelpFormatter, epilog="""The credentials must be in the form of "user:token" where:

  user: Your Jenkins userid
  token: a 34-digit hex string

You can create a token through the Jenkins GUI:
  1) Log into Jenkins
  2) Click your name/user in the upper right corner of the page
  3) Look at the URL in the browser to identify your Jenkins user.  For example, my URL is something like "https://foo.bar.com/jenkins/foobar/user/jpfuntne/configure" so my user is jpfuntne.  It might be a common user you use all the time for your organization.
  4) Click the "Configure" link on left side
  5) Click the "Create new Token" button
  6) Name the token and press the "Generate" button
  7) Copy the token and make a note of it

The credentials can be:
  - expressed on the command line
  - set as the JENKINS_CREDENTIALS environment variable, perhaps in your shell profile""")
parser.add_argument('-u', '--base-url', help='Base Jenkins URL (eg. https://foo.com/jenkins/sto/job/YourOrg/job/pipelines/job), can be stored in JENKINS_BASE_URL environment variable')
parser.add_argument('-c', '--credentials', help='Jenkins credentials (eg. user@token)')
parser.add_argument('group', help='Jenkins group (ex. repositories, images, etc)')
parser.add_argument('-t', '--time', action='store_true', help='Sort by time, most recent at top')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

creds = args.credentials or os.environ.get('JENKINS_CREDENTIALS')
if not creds:
  parser.error(f'Credentials are required')
creds = tuple(creds.split(':'))

base_url = args.base_url or os.environ.get('JENKINS_BASE_URL')
if not base_url:
  parser.error(f'Jenkins base URL is required')

job_prefix_regexp = re.compile('^job_')
job_id_regexp = re.compile('/master/(\d+)/')

rows = list()
url = f'{base_url}/{args.group}'
resp = requests.get(url, auth=creds)
if resp.ok:
  base_root = LazyHtml(log).parse(resp.text)
  # find `<tr id='job_ansible-clamav' class=' job-status-'>` nodes
  job_nodes = find(base_root, lambda node: node.tag == 'tr', lambda node: 'job-status-' in node.get('class', '').split())
  jobs = [job_prefix_regexp.sub('', job_node.get('id', '')) for job_node in job_nodes]
  log.info(f'{len(jobs)} jobs: {jobs}')
  for job in jobs:
    row = [job]
    # get info for master branch of this job
    url = f'{base_url}/{args.group}/job/{job}/job/master'
    resp = requests.get(url, auth=creds)
    if resp.ok:
      job_root = LazyHtml(log).parse(resp.text)

      # find `<div class='build-icon'>` nodes
      build_nodes = find(job_root, lambda node: node.tag == 'div', lambda node: node.get('class', '') == 'build-icon')
      log.info(f'{len(build_nodes)} build nodes')
      build_id = 'n/a'
      if build_nodes:
        """
          Each build node represents a build, the first one is the most recent build.  Its immediate child is:
            `<a href='/jenkins/sto/job/SecureCommonCloudComponents/job/pipelines/job/repositories/job/ansible-audit_tool/job/master/12/consol ...`
        """
        match = job_id_regexp.search(build_nodes[0][0].get('href', ''))
        if match:
          build_id = f'#{match.group(1)}'
      row.append(build_id)
      
      # find `<img src='/jenkins/sto/static/e823c9e3/images/16x16/red.png' alt='Failed > Console Output' tooltip='Failed > Console Output' ...` nodes
      status_nodes = find(job_root, lambda node: node.tag == 'img', lambda node: node.attrib.get('tooltip', '') != '')
      log.info(f'{len(status_nodes)} status nodes')
      row.append(status_nodes[0].attrib.get('tooltip').split()[0] if status_nodes else 'n/a')

      # find `<div time='1643015460282' class='pane build-details'>` nodes
      time_nodes = find(job_root, lambda node: node.tag == 'div', lambda node: node.get('time', '') != '')
      log.info(f'{len(time_nodes)} time nodes')
      row.append(str(datetime.datetime.fromtimestamp(int(time_nodes[0].get('time'))/1000.0)) if time_nodes else 'n/a')

      if status_nodes:
        row.append(' '.join([('+' if node.get('tooltip', '?').startswith('S') else '-') for node in status_nodes[:5]]))
      else:
        row.append('n/a')

      rows.append(row)
    else:
      log.warning(f'{url} failed: {resp.status_code} {resp.text!r}')

  if args.time:
    rows.sort(key=lambda row: row[3], reverse=True)

  table = Table('Job', 'Last build ID', 'Status', 'Last build date', 'History')
  for row in rows:
    table.add(*row)
  table.close()
else:
  log.error(f'{url} failed: {resp.status_code} {resp.text!r}')
  exit(1)
