#! /usr/bin/env python3

import sys
import os
import re
import traceback
import errno
import subprocess

class Util:
  @staticmethod
  def keyValuePairs(file, delim='='):
    ret = {}
    for line in file.read().split('\n'):
      tokens = line.split(delim)
      if len(tokens) > 1:
        ret[tokens[0].strip(':')] = delim.join(tokens[1:])
    return ret

  @staticmethod
  def div(amt, divisor):
    quotient = int(amt/divisor)
    amt -= quotient*divisor
    return (quotient, amt)

  @staticmethod
  def time(secs):
    (days, secs)  = Util.div(secs, 24*60*60)
    (hours, secs) = Util.div(secs, 60*60)
    (mins, secs)  = Util.div(secs, 60)

    return "%s%02d:%02d:%06.3f" % ("%dd" % days if days else "", hours, mins, secs)

class Proc:
  allDigits = re.compile("^\d+$")
  upTime = None

  def __init__(self, pid, ppid, args, jiffiesSinceBoot):
    if not Proc.upTime:
      with open("/proc/uptime", "r") as file:
        Proc.upTime = float(file.read().split()[0])

    self.pid = int(pid)
    self.ppid = int(ppid)
    self.args = args.split('\0')
    self.elapsedSecs = Proc.upTime - (float(jiffiesSinceBoot) / os.sysconf(os.sysconf_names["SC_CLK_TCK"]))

  def __str__(self):
    return "%d %s (%s)" % (self.pid, str(self.args), Util.time(self.elapsedSecs))
 
  @staticmethod
  def getPids():
    pids = {}
    for filename in os.listdir("/proc"):
      try:
        if Proc.allDigits.search(str(filename)):
          pid = int(filename)
          status = []
          with open("/proc/%d/status" % pid, "r") as file:
            status = Util.keyValuePairs(file, '\t')
          args = ""
          with open("/proc/%d/cmdline" % pid, "r") as file:
            args = file.read().strip('\0')
          stats = []
          with open("/proc/%d/stat" % pid, "r") as file:
            stats = file.read().split()
          pids[pid] = Proc(pid, status["PPid"], args, stats[21])
      except IOError as e:
        if e.errno in (errno.EACCES, errno.ENOENT):
          pass # skip there are missing files or permission errors because we're not allowed to snoop into every /proc file
        else:
          print(traceback.format_exc())
      except Exception as e:
        print(traceback.format_exc())

    return pids

def absolutePid(pid, depth=None):
  global pids

  if (not depth) and re.search("^\d+-\d+$", str(pid)):
    tokens = pid.split('-')
    pid = absolutePid(int(tokens[0]), int(tokens[1]))
  elif depth:
    if pids[pid].ppid:
      pid = absolutePid(pids[pid].ppid, depth-1)

  return int(pid)

def depth(pids, pid):
  ret = 0
  if pids[pid].ppid in pids:
    ret = 1 + depth(pids, pids[pid].ppid)
  return ret

def children(pids, pid):
  return len([child for child in pids if pids[child].ppid == pid])

def visit(pid, pidonly=False, depth=0):
  global pids

  pid = absolutePid(pid)
  if pidonly:
    print(pid)
  else:
    print("%s%s" % (' '*(depth*2), str(pids[pid])))
  for child in pids:
    if pids[child].ppid == pid:
      visit(child, pidonly, depth+1)

def onlyChildren(pid):
  global pids
  ret = []
  for curr in pids:
    if pids[curr].ppid == pid:
      ret.append(curr)
      ret += onlyChildren(curr)
  return ret
  
pids = Proc.getPids()

mother = None
for pid in pids:
  if pids[pid].args[0] == "docker-containerd":
    mother = pid

p = subprocess.Popen("docker ps".split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
(stdout,stderr) = p.communicate()
rc = p.wait()
assert (rc == 0) and (not stderr), "`docker ps` rc=%d, %s, %s" % (rc, repr(stdout), repr(stderr))

containers = stdout.strip('\n').split('\n')

def getContainer(pid):
  """
    The `args` list of a docker container leader process looks like:
      ['docker-containerd-shim', 'a15dc2894dd15f333e00bdec24c62a1543ff1fb3fb19e219d69c6a43686cba56', ...]
  """

  ret = None

  containerID = pids[pid].args[1]
  for curr in containers[1:]:
    tokens = curr.split()
    # print "%s ?= %s" % (tokens[0], containerID[:len(tokens[0])])
    if tokens[0] == containerID[:len(tokens[0])]:
      ret = curr
      break

  assert ret, "Could not find container for pid %d" % pid
  return ret

for pid in pids:
  if pids[pid].ppid == mother:
    container = getContainer(pid)
    print(containers[0])
    print(container)
    visit(pid)
    print("")
