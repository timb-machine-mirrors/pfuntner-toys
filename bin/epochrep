#! /usr/bin/env python3

import re
import sys
import math
import getopt
import datetime

assert not sys.stdin.isatty(), "stdin must be redirected"

def syntax():
  sys.stderr.write("%s [-v|--verbose] [-u|--utc] [-?|-h|--help]\n" % sys.argv[0])
  exit(1)

verbose = False
utc = False

(opts,args) = ([],[])
try:
  (opts,args) = getopt.getopt(sys.argv[1:], "vuh?", ["verbose", "utc", "help"])
except Exception as e:
  sys.stderr.write("Caught: %s\n" % repr(e))
  syntax()

for (opt,arg) in opts:
  if opt in ["-v", "--verbose"]:
    verbose = not verbose
  elif opt in ["-u", "--utc"]:
    utc = not utc
  elif opt in ["-?", "-h", "--help"]:
    syntax()
  else:
    sys.stderr.write("Don't know what to do with %s\n" % repr(opt))
    syntax()

"""
  Match for seconds or milliseconds (as an integer)
"""
regexp = re.compile("^(|.*\D)((\d{10}|\d{13})(\.\d+)?)([^0-9.].*|)$")

if utc:
  timeMethod = datetime.datetime.utcfromtimestamp
else:
  timeMethod = datetime.datetime.fromtimestamp

for line in sys.stdin:
  line = line.strip('\n')
  while True:
    match = regexp.search(str(line))
    if not match:
      break
    groups = match.groups()
    if verbose:
      sys.stderr.write("match: %s\n" % repr(groups))
    secs = float(groups[1])
    if int(math.log10(secs)+1) == 13:
      """
        If milliseconds have been expressed as an integer, convert it to seconds
      """
      secs /= 1000.0
    line = groups[0] + str(timeMethod(secs)) + groups[-1]

  print(line)
