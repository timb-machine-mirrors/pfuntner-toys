#! /usr/bin/env python3

import os
import re
import sys
import signal
import logging
import argparse

def process(target):
  stream = None
  if isinstance(target, str) and target != '-':
    if os.path.exists(target):
      log.info(f'Opening {target!r}')
      if not os.path.isdir(target):
        stream = open(target, 'rb')
      else:
        log.warning(f'{target!r} is a directory')
    else:
      log.warning(f'Could not find {target!r}')
  else:
    if sys.stdin.isatty():
      parser.error('stdin must be redirected if not files are passed on command line')
    log.info('Converting stdin to a binary stream')
    stream = os.fdopen(sys.stdin.fileno(), 'rb')

  if stream:
    data = stream.read()
    hits = list(regexp.finditer(data))
    log.info(f'{len(hits)} found of {args.regexp!r}')

    for hit in hits:
      print('{filename}{data!r}'.format(
        filename=f'{target!r}: ' if isinstance(target, str) else '',
        data=data[max(hit.start()-(args.context or 0),0):hit.end()+(args.context or 0)].decode()
      ))

    if isinstance(target, str):
      stream.close()

parser = argparse.ArgumentParser(description='grep files on a character basis')
parser.add_argument('regexp', help='Regular expression for which to search')
parser.add_argument('files', metavar='file', nargs='*', help='Zero or more files to process')
parser.add_argument('-C', '--context', type=int, help='Number of characters before and after hit to display')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

regexp = re.compile(args.regexp.encode(), flags=re.DOTALL)
for target in args.files or [sys.stdin]:
  process(target)
