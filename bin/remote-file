#! /usr/bin/env python3

import sys
import base64
import signal
import logging
import argparse
import subprocess

import bruno_tools

parser = argparse.ArgumentParser(description='Read or write a remote file as a filter')
parser.add_argument('target', help='Remote system and path in scp-style - such as: foo:/tmp/bar')
parser.add_argument('-b', '--become', action='store_true', help='Escalate to root on remote system')
parser.add_argument('-q', '--quiet', action='store_true', help='Use ssh --quiet option')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

tokens = args.target.split(':')
if len(tokens) != 2:
  parser.error(f'Malformed target: {tokens}')

remote_system = tokens[0]
remote_file = tokens[1]

if bool(sys.stdin.isatty()) == bool(sys.stdout.isatty()):
  parser.error('Redirect stdout or stderr but not both')

if not sys.stdout.isatty():
  # Reading from remote
  (rc, stdout, stderr) = bruno_tools.run(['ssh', remote_system] + (['sudo'] if args.become else []) + ['base64', remote_file])
  sys.stdout.buffer.write(base64.b64decode(stdout))
  print(stderr, file=sys.stderr, end='')
else:
  # Writing to remote
  process = subprocess.Popen(['ssh'] + (['-q'] if args.quiet else []) + [remote_system, 'base64', '-d', '|'] + (['sudo'] if args.become else []) + ['tee', remote_file, '>', '/dev/null'], stdin=subprocess.PIPE)
  process.stdin.write(base64.b64encode(sys.stdin.buffer.read()))
  process.stdin.close()
  rc = process.wait()
