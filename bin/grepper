#! /usr/bin/env python3

import os
import re
import sys
import string
import signal
import logging
import argparse
import subprocess

def process(stream):
  log.info(f'Processing file {stream.name!r}')
  lines = []
  try:
    lines = stream.read().splitlines()
  except Exception as e:
    log.warning(f'Can\'t read {stream.name!r}: {e!s}')

  for line in lines:
    log.info(f'Processing line {line!r}')
    included = not regexps[0].get('positive')
    log.debug(f'Initially, included: {included}')
    for regexp in regexps:
      match = bool(regexp.get('regexp').search(line))
      log.debug('{mode} {pattern!r}: {match}'.format(mode='Positive' if regexp.get('positive') else 'Negative', pattern=regexp.get('regexp').pattern, match=match))
      included = match if regexp.get('positive') else not match
      log.debug(f'included: {included}')
      if not included:
        break
    if included:
      if args.list:
        print(stream.name)
        break
      else:
        print(f'{stream.name!r}: {line}')

parser = argparse.ArgumentParser(description='Search for lines including/excluding various regular expressions')
parser.add_argument('-i', '--ignore-case', action='store_true', help='Ignore case')
parser.add_argument('-l', '--list', action='store_true', help='List names of files only')
parser.add_argument('-r', '--regexp', action='append', help='Two or more regular expressions: /regexp/ or !/regexp/')
parser.add_argument('files', metavar='file', nargs='*', help='Zero or more files to search')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if len(args.regexp or []) < 2:
  parser.error('Specify at least two regular expressions')

regexps = []
for regexp in args.regexp:
  positive = not regexp.startswith('!')
  if not positive:
    regexp = regexp[1:]
  if len(regexp) > 2 and regexp[0] in string.punctuation and regexp[-1] == regexp[0] and regexp[0] not in regexp[1:-1]:
    try:
      regexp = re.compile(regexp[1:-1], flags=re.IGNORECASE if args.ignore_case else 0)
    except Exception as e:
      parser.error(f'Could not compile {regexp!r}: {e!s}')
    regexps.append({'positive': positive, 'regexp': regexp})
  else:
    parser.error(f'{regexp!r} is not a valid regular expression')

if args.files:
  for filename in args.files:
    if os.path.exists(filename):
      if not os.path.isdir(filename):
        with open(filename) as stream:
          process(stream)
      else:
        log.error(f'{filename!r} is a directory')
    else:
      log.error(f'{filename!r} does not exist')
else:
  process(sys.stdin)
