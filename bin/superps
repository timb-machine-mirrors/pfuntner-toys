#! /usr/bin/env python3

import re
import signal
import logging
import argparse
import subprocess

class Heading(object):
  def __init__(self, title, start, stop):
    self.title = title
    self.start = start
    self.stop = stop

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))

  p = None
  try:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  except Exception as e:
    (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

  if p:
    if stdin:
      p.stdin.write(stdin.encode())
    if capture:
      (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    else:
      (stdout, stderr) = ('', '')
    rc = p.wait()

  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Get process information')

group = parser.add_mutually_exclusive_group()
group.add_argument('--ssh', help='Remote ssh host')
group.add_argument('--docker', help='Docker container ')

parser.add_argument('--secure_shell_executable', default='/usr/bin/ssh', help='Path to ssh executable')
parser.add_argument('-o', '--format', default='pid,ppid,%cpu,args', help='ps format (-o)')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

# /usr/bin/ssh -q aws-ubuntu2004 -- ps -e -o pid,ppid,%cpu,args
cmd = list()
if args.ssh:
  cmd += [args.secure_shell_executable, '-q', args.ssh]
elif args.docker:
  cmd += ['docker', 'exec', '-it', args.docker, 'bash', '-c']

remain = ['ps', '-e', '-o', args.format]
if args.docker:
  cmd.append(' '.join(remain))
else:
  cmd += remain

(rc, stdout, stderr) = run(cmd)
if rc == 0:
  lines = stdout.splitlines()
  headings = list()
  heading_columns = list(re.finditer('\s+\S+\s+', lines[0]))
  for (pos, heading) in enumerate(heading_columns):
    headings.append(Heading(heading.group(0), heading.start(0), heading.end(0)))
else:
  log.error(f'{cmd} failed: {rc}, {stdout!r}, {stderr!r}')
