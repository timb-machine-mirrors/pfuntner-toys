#! /usr/bin/env python2

import re
import os
import logging
import argparse

def process(filename):
  if os.path.isfile(filename):
    with open(filename) as stream:
      lines = stream.read().splitlines()
    for (pos, line) in enumerate(lines):
      curr = line
      for regexp in args.exclude:
        curr = regexp.sub('', curr)
      if all([bool(regexp.search(curr)) for regexp in args.include]):
        print '{filename}:{pos}: {line!r}'.format(**locals())

  elif os.path.exists(filename):
    log.warning('Not a file: {filename!r}'.format(**locals()))
  else:
    log.warning('Cannot find: {filename!r}'.format(**locals()))

parser = argparse.ArgumentParser(description='Grep for regular expressions in a sneaky way')
parser.add_argument('-i', '--include', action='append', help='Specify a regular expression that must be present')
parser.add_argument('-x', '--exclude', action='append', help='Specify a regular expression that must not be present')
parser.add_argument('files', metavar='file', nargs='+', help='One or more files to search')
parser.add_argument('-v', '--verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

if (not args.include) and (not args.exclude):
  parser.error('Specify at least one include and one exclude regular expression')

for (pos, pattern) in enumerate(args.include):
  args.include[pos] = re.compile(pattern)

for (pos, pattern) in enumerate(args.exclude):
  args.exclude[pos] = re.compile(pattern)

map(process, args.files)
