#! /usr/bin/env python3

import os
import sys
import time
import shlex
import signal
import logging
import argparse
import datetime
import subprocess

import bruno_tools

parser = argparse.ArgumentParser(description='Run a command and print a messge periodically to prevent session from timing out')
parser.add_argument('command', nargs='+', help='Command and arguments')
parser.add_argument('-d', '--delay', type=float, help='Delay in seconds between msgs/checks - default: 15')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

# echo 'Starting process'
# "$@" &
# pid=$!
# echo "Started $pid"
# sleep 15
# while kill -0 $pid 2>/dev/null
# do
#   echo "$(date) Waiting for $pid to finish"
#   sleep 15
# done
# wait $pid

log.info('Starting process')
start = datetime.datetime.now()
process = subprocess.Popen(shlex.join(args.command), shell=True)
print(f'Started process {process.pid}')
time.sleep(args.delay)
while process.poll() is None:
  print(f'{datetime.datetime.now().isoformat()}: waiting for {process.pid}')
  time.sleep(args.delay)

duration = datetime.datetime.now() - start
rc = process.wait()
log.info(f'{rc=} {duration=!s}')
