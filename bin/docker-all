#! /usr/bin/env python3

import sys
import json
import signal
import logging
import argparse
import datetime
import subprocess

class Table(object):
  def __init__(self, *args):
    if len(args) == 1 and type(args[0]) in (list, tuple):
      self.headings = args[0]
    else:
      self.headings = args

    try:
      self.p = subprocess.Popen(['column', '-t', '-s\t'], stdin=subprocess.PIPE, text=True)
    except Exception as e:
      print(f'Error opening `column`: {e!s}', file=sys.stderr)
      print('On Ubuntu, try installing the bsdmainutils package', file=sys.stderr)
      exit(1)

    self.p.stdin.write('\t'.join([str(heading) for heading in self.headings]) + '\n')

  def add(self, *args):
    self.p.stdin.write('\t'.join([str(arg) for arg in args]) + '\n')

  def close(self):
    self.p.stdin.close()
    self.p.wait()

def banner(title):
  print(f'{"# " * 10}{title}{" #" * 10}')

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))

  p = None
  try:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  except Exception as e:
    (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

  if p:
    if stdin:
      p.stdin.write(stdin.encode())
    if capture:
      (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    else:
      (stdout, stderr) = ('', '')
    rc = p.wait()

  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

def parse_date(timestamp):
  """
    Input form: '2022-02-01T19:39:22.098493684Z'
  """
  return datetime.datetime.strptime(timestamp[:-4], '%Y-%m-%dT%H:%M:%S.%f')

def redate(timestamp):
  return timestamp.strftime('%Y-%m-%d %H:%M:%S')

def get_image(id):
  ret = None
  for image in images:
    if image['Id'] == id:
      ret = image
      break
  return ret

def get_shortest_tag(image):
  return sorted(image['RepoTags'], key=lambda tag: len(tag))[0]

parser = argparse.ArgumentParser(description='Display Docker containers and images')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

now = datetime.datetime.utcnow()

images = list()
(rc, stdout, stderr) = run('docker images --format {{.ID}}')
if rc == 0:
  if stdout:
    ids = set(stdout.splitlines())
    (rc, stdout, stderr) = run(f'docker inspect {" ".join(ids)}')
    images = json.loads(stdout)
else:
  log.error(f'`docker images` failed: {rc}, {stdout!r}, {stderr!r}')
  exit(1)

(rc, stdout, stderr) = run('docker ps -a --format {{.ID}}')
if rc == 0:
  if stdout:
    ids = set(stdout.splitlines())
    banner('Containers')
    (rc, stdout, stderr) = run(f'docker inspect {" ".join(ids)}')
    rows = list()
    for process in json.loads(stdout):
      image = get_image(process['Image'])
      rows.append((
        process['Id'][:12],
        process['Name'][1:],
        redate(parse_date(process['Created'])),
        (parse_date(process['State'].get('FinishedAt')) if process['State']['Status'] == 'exited' else now) - parse_date(process['Created']),
        get_shortest_tag(image) if image else process['Image'].split(':')[1][:12],
        process['Image'].split(':')[1][:12],
        image.get('Architecture'),
        process['State']['Status']
      ))
    table = Table('ID', 'Name', 'Created', 'Elapsed', 'Image', 'Image ID', 'Arch', 'Status')
    for row in sorted(rows, key=lambda row: row[2], reverse=True):
      table.add(*row)
    table.close()
  else:
    print('No containers')
  print('')
else:
  log.error(f'`docker ps` failed: {rc}, {stdout!r}, {stderr!r}')
  exit(1)

if images:
  banner('Images')
  rows = list()
  log.info(f'images: {images}')
  for image in images:
    log.info(f'image: {image!r}')
    log.info(f'id: {image["Id"]!r}')
    shortest_tag = get_shortest_tag(image)
    tags = image['RepoTags']
    tags.remove(shortest_tag)
    rows.append((
      image['Id'].split(':')[1][:12],
      shortest_tag,
      image.get('Architecture'),
      redate(parse_date(image['Created'])),
      ', '.join(tags),
    ))

  table = Table('ID', 'Tag', 'Arch', 'Created', 'Other tags')
  for row in sorted(rows, key=lambda row: row[2], reverse=True):
    table.add(*row)
  table.close()
else:
  print('No images')
