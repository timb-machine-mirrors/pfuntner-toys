#! /usr/bin/env python3

import os
import re
import signal
import logging
import datetime
import argparse

def decode_date(s):
  ret = None
  if s is not None:
    if re.match(r'^\d{4}-\d{2}-\d{2}$', s):
      ret = datetime.datetime.strptime(s, '%Y-%m-%d')
    elif re.match(r'^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$', s):
      ret = datetime.datetime.strptime(s, '%Y-%m-%d %H:%M:%S')
    else:
      parser.error(f'{s!r} is not a valid date date/time')
  return ret

parser = argparse.ArgumentParser(description='List files after and before specified dates')
parser.add_argument('-a', '--after', help='Select files on or after the specified date')
parser.add_argument('-b', '--before', help='Select files on or before the specified date')
parser.add_argument('files', nargs='+', help='One or more files to search')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

after = decode_date(args.after)
before = decode_date(args.before)

if not after and not before:
  parser.error('Specify --after and/or --before')

if after is not None and before is not None and after > before:
  parser.error(f'{args.after!r} is after {args.before!r}')

for filename in args.files:
  if os.path.exists(filename):
    if os.path.isfile(filename):
      curr = datetime.datetime.fromtimestamp(os.path.getmtime(filename))
      if (after is None or after <= curr) and (before is None or curr <= before):
        print(filename)
    else:
      log.warning(f'{filename!r} is not a regular file')
  else:
    log.warning(f'{filename!r} cannot be found')
