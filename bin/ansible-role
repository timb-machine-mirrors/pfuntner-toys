#! /usr/bin/env python3

import logging
import argparse
import tempfile
import subprocess

parser = argparse.ArgumentParser(description='Run an Ansible role against specified hosts')
parser.add_argument('role', help='Ansible role')
parser.add_argument('hosts', metavar='host', nargs='+', help='One or more hosts to run the role on')
parser.add_argument('-b', '--become', action='store_true', help='Become root (sudo) on hosts')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

hosts = ','.join(args.hosts)
log.info(f'host: {hosts!r}')
playbook = tempfile.NamedTemporaryFile(mode='w')
log.info(f'Temporary playbook: {playbook.name!r}')
playbook.write(f"""- name: Run {args.role}
  hosts: {hosts}
  roles:
  - role: {args.role}
""")
if args.become:
  playbook.write('  become: true\n')
playbook.flush()

if (args.verbose or 0) > 1:
  subprocess.Popen(['cat', playbook.name]).wait()

exit(subprocess.Popen(['ansible-playbook', playbook.name]).wait())
