#! /usr/bin/env python3

import sys
import math

import logging
import argparse


def install(token):
  global tokens
  global total
  global order

  if token not in order:
    order.append(token)
  tokens[token] = tokens.get(token, 0) + 1
  total += 1

def process(f):
  for line in f:
    install(line.strip('\n').strip('\r'))

parser = argparse.ArgumentParser(description='Print and count unique occurrences of lines')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('-f', '--fifo', dest='fifo', action='store_true',
                    help='List lines in the order the first occurrence appears')
parser.add_argument('files', metavar='file', nargs='*', help='Zero or more files')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

tokens = {}
order = []
total = 0

if args.files:
  for filename in args.files:
    with open(filename, "r") as f:
      process(f)
elif sys.stdin.isatty():
  sys.stderr.write("stdin must be redirected\n")
  exit(1)
else:
  process(sys.stdin)

print("%d total items" % total)
if total:
  digits = math.log(total, 10)
  if (digits % 1) == 0:
    digits = int(digits+1)
  else:
    digits = int(math.ceil(digits))
  
  def comparator(token1, token2):
    if tokens[token1] == tokens[token2]:
      if token1 < token2:
        return 1
      elif token1 > token2:
        return -1
      else:
        return 0
    else:
      return tokens[token1] - tokens[token2]
    
  # for token in sorted(tokens.keys(), key=lambda token: tokens[token], reverse=True):
  for token in order if args.fifo else sorted(tokens.keys(), cmp=comparator, reverse=True):
    print("%*d %6.2f%% %s" % (digits, tokens[token], (tokens[token]*100.0)/total, token))
