#! /usr/bin/env python3

import re
import signal
import logging
import argparse

from table import Table

def parse(num, *possibles):
  value = None
  for possible in possibles:
    base = possible[0]
    regexp = possible[1]
    match = re.search('^' + regexp + '$', num)
    if match:
      value = int(match.group(1), base)
      log.info(f'num: {num!r}, possible: {possible}, value: {value}')
      break
    else:
      log.info(f'num: {num!r} is not {possible}')
  if value is None:
    parser.error(f'Invalid number: {num!r}')
  return value

parser = argparse.ArgumentParser(description='Display numbers in various bases')
parser.add_argument('nums', nargs='+', help='One or more numbers')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

table = Table('value', 'decimal', 'binary', 'octal', 'hexadecimal')
for num in args.nums:
  value = parse(
    num,
    (16, r'0?[xX]([0-9a-f]+)'),
    (8, r'[o0]([0-7]+)'),
    (2, r'b([0-1]+)'),
    (10, r'([1-9]\d*)'),
  )
  table.add(num, value, '{:b}'.format(value), '{:o}'.format(value), '{:x}'.format(value))

print(str(table), end='')
