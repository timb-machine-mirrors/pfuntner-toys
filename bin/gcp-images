#! /usr/bin/env python3

import re
import sys
import json
import logging
import argparse
import subprocess

class Table(object):
  def __init__(self, *args):
    if len(args) == 1 and type(args[0]) in (list, tuple):
      self.headings = args[0]
    else:
      self.headings = args

    self.p = subprocess.Popen(['column', '-t', '-s\t'], stdin=subprocess.PIPE)
    self.p.stdin.write(self.encode('\t'.join([str(heading) for heading in self.headings]) + '\n'))

  @classmethod
  def encode(cls, s):
    return s if sys.version_info.major == 2 else s.encode()

  def add(self, *args):
    self.p.stdin.write(self.encode('\t'.join([str(arg) for arg in args]) + '\n'))

  def close(self):
    self.p.stdin.close()
    self.p.wait()

def run(cmd):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info(cmd)
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  rc = p.wait()
  log.debug('{cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Find GCP images')
parser.add_argument('-f', '--family', help='Specify family as a regular expression (eg: rhel-7)')
parser.add_argument('-p', '--project', help='Specify project as a regular expression (eg: rhel-cloud)')
parser.add_argument('-j', '--json', action='store_true', help='Display full results in JSON format')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

"""
[centos@pfuntner1 roles]$ gcloud compute images list --format json | json --flatten  | grep centos
/0/family 'centos-6'
/0/licenses/0 'https://www.googleapis.com/compute/v1/projects/centos-cloud/global/licenses/centos-6'
/0/name 'centos-6-v20191121'
/0/selfLink 'https://www.googleapis.com/compute/v1/projects/centos-cloud/global/images/centos-6-v20191121'
/1/family 'centos-7'
/1/licenses/0 'https://www.googleapis.com/compute/v1/projects/centos-cloud/global/licenses/centos-7'
/1/name 'centos-7-v20191121'
/1/selfLink 'https://www.googleapis.com/compute/v1/projects/centos-cloud/global/images/centos-7-v20191121'
/2/family 'centos-8'
/2/licenses/0 'https://www.googleapis.com/compute/v1/projects/centos-cloud/global/licenses/centos-8'
/2/name 'centos-8-v20191121'
"""
    
(rc, stdout, stderr) = run('gcloud compute images list --format=json')
images = sorted(json.loads(stdout), key=lambda image: image['name'])

pos = 0
while pos < len(images):
  image = images[pos]
  if (args.project and not re.search(f'^https://www.googleapis.com/compute/v\\d+/projects/{args.project}/global/images/', image['selfLink'])):
    del images[pos]
  elif (args.family and not re.search(args.family, image['family'])):
    del images[pos]
  else:
    pos += 1

if args.json:
  json.dump(images, sys.stdout)
  print('')
else:
  table = Table('Name', 'Family', 'Self link')
  for image in images:
    table.add(image['name'], image['family'], image['selfLink'])
  table.close()
