#! /usr/bin/env python2

import sys
import subprocess
import time
import getopt

def now():
  """
  Return current number of seconds since the epoch
  """
  return time.time()

def formatTime(secs=None):
  if secs == None:
    secs = now()
  return time.strftime("%Y-%m-%d %H:%M:%S.%s", time.localtime(secs))

def debug(msg):
  if debugging:
    sys.stderr.write(msg + "\n")

def syntax(msg=None):
  if msg:
    sys.stderr.write(msg + "\n")
  sys.stderr.write("Syntax: %s [-v] [--ignorerc] string cmd ...\n" % sys.argv[0])
  exit(1)

arg = 1

negate = False
ignoreRC = False
debugging = False

(opts, args) = ([], [])
try:
  (opts, args) = getopt.getopt(sys.argv[1:], "v", ["negate", "ignorerc", "debug"])
except Exception as e:
  syntax("Caught %s" % repr(e))

for (opt,arg) in opts:
  if opt in ["-v", "--negate"]:
    negate = not negate
  elif opt == "--ignorerc":
    ignoreRC = not ignoreRC
  elif opt == "--debug":
    debugging = not debugging

if len(args) < 2:
  syntax()

string = args[0]
done = False
while not done:
  print formatTime()
  p = subprocess.Popen(args[1:], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  stdout = p.stdout.read()
  stderr = p.stderr.read()
  rc = p.wait()
  sys.stdout.write(stdout)
  sys.stderr.write(stderr)
  print
  if (not ignoreRC) and (rc != 0):
    debug("Stopping due to rc=%d" % rc)
    done = True
  elif (not negate) and (string not in stdout) and (string not in stderr):
    debug("Stopping due to %s being in output" % repr(string))
    done = True
  elif negate and (string in stdout or string in stderr):
    debug("Stopping due to %s not being in output" % repr(string))
    done = True
  else:
    time.sleep(15)
