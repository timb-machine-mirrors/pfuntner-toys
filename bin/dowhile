#! /usr/bin/env python3

import re
import sys
import time
import logging
import argparse
import subprocess

def now():
  """
  Return current number of seconds since the epoch
  """
  return time.time()

def formatTime(secs=None):
  if secs == None:
    secs = now()
  return time.strftime("%Y-%m-%d %H:%M:%S.%s", time.localtime(secs))

parser = argparse.ArgumentParser(description='dowhile')
parser.add_argument('-d', '--delay', type=int, default=15, help='Number of sections between execution (default: 15 seconds)')
parser.add_argument('-v', '--debug', '--verbose', dest='verbose', action='store_true', help='Enable debugging')

group = parser.add_mutually_exclusive_group()
group.add_argument('-i', '--include', help='Execute as long as the output contains regular expression')
group.add_argument('-x', '--exclude', help='Execute as long as the output does not contain regular expression')

group = parser.add_mutually_exclusive_group()
group.add_argument('-s', '--successful', action='store_true', help='Execute as long as the command is successful')
group.add_argument('-f', '--fail', action='store_true', help='Execute as long as the command fails')

parser.add_argument('cmd', nargs='+', help='Command to execute')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

if not any([bool(args.include != None), bool(args.exclude != None), bool(args.successful), bool(args.fail)]):
  parser.error('At least -i/-x or -s/-f must be specified')

if args.include:
  args.include = re.compile(args.include)

if args.exclude:
  args.exclude = re.compile(args.exclude)

done = False
while not done:
  print(formatTime())
  log.info(args.cmd)
  p = subprocess.Popen(args.cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  stdout = p.stdout.read().decode('utf-8')
  stderr = p.stderr.read().decode('utf-8')
  rc = p.wait()
  sys.stdout.write(stdout)
  sys.stderr.write(stderr)
  print('')
  if args.include and not args.include.search(str(stdout + stderr)):
    log.info('Command does not have {args.include.pattern!r}'.format(**locals()))
    break
  elif args.exclude and args.exclude.search(str(stdout + stderr)):
    log.info('Command has {args.exclude.pattern!r}'.format(**locals()))
    break
  elif args.successful and rc != 0:
    log.info('Command exited with {rc}'.format(**locals()))
    break
  elif args.fail and rc == 0:
    log.info('Command exited with {rc}'.format(**locals()))
    break

  time.sleep(args.delay)
