#! /usr/bin/env python3

import re
import sys
import time
import logging
import argparse
import datetime
import subprocess

def banner(s):
  edge = '#' * (len(s) + 4)
  print(edge)
  print(f'# {s} #')
  print(edge)

def now():
  """
  Return current number of seconds since the epoch
  """
  return time.time()

def formatTime(secs=None):
  if secs == None:
    secs = now()
  return time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(secs))

parser = argparse.ArgumentParser(description='dowhile')
parser.add_argument('-d', '--delay', type=int, default=15, help='Number of seconds between execution (default: 15 seconds)')
parser.add_argument('-v', '--debug', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('-m', '--max-iterations', type=int, help='Maxium number of iterations (default: none)')

group = parser.add_mutually_exclusive_group()
group.add_argument('-i', '--include', help='Execute as long as the output contains regular expression')
group.add_argument('-x', '--exclude', help='Execute as long as the output does not contain regular expression')

group = parser.add_mutually_exclusive_group()
group.add_argument('-s', '--successful', action='store_true', help='Execute as long as the command is successful')
group.add_argument('-f', '--fail', action='store_true', help='Execute as long as the command fails')

parser.add_argument('cmd', nargs='+', help='Command to execute')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

if not any([bool(args.include != None), bool(args.exclude != None), bool(args.successful), bool(args.fail)]):
  parser.error('At least -i/-x or -s/-f must be specified')

if args.include:
  args.include = re.compile(args.include)

if args.exclude:
  args.exclude = re.compile(args.exclude)

remove_fractions_of_seconds = re.compile(r'\.\d+$')
start = datetime.datetime.now()

iteration = 0
done = False
while not done:
  iteration += 1
  banner(f'''{iteration}: {formatTime()} (+{remove_fractions_of_seconds.sub('', str(datetime.datetime.now()-start))})''')
  log.info(args.cmd)
  p = subprocess.Popen(
    args.cmd,
    stdout=subprocess.PIPE if args.include or args.exclude else None,
    stderr=subprocess.PIPE if args.include or args.exclude else None,
  )
  if args.include or args.exclude:
    stdout = p.stdout.read().decode('utf-8')
    stderr = p.stderr.read().decode('utf-8')
  else:
    stdout = ''
    stderr = ''
  rc = p.wait()
  if args.include or args.exclude:
    sys.stdout.write(stdout)
    sys.stderr.write(stderr)
  print('')
  if args.include and not args.include.search(str(stdout + stderr)):
    log.info(f'Command does not have {args.include.pattern!r}')
    break
  elif args.exclude and args.exclude.search(str(stdout + stderr)):
    log.info(f'Command has {args.exclude.pattern!r}')
    break
  elif args.successful and rc != 0:
    log.info(f'Command exited with {rc}')
    break
  elif args.fail and rc == 0:
    log.info(f'Command exited with {rc}')
    break

  if args.max_iterations is not None and iteration >= args.max_iterations:
    log.warning(f'Bailing out after {iteration} iterations')
    break

  time.sleep(args.delay)
