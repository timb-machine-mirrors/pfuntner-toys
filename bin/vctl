#! /usr/bin/env python3

import sys
import json
import logging
import argparse
import subprocess
from virtual_hosts import VirtualHosts
from table import Table

parser = argparse.ArgumentParser(description='Virtual machine control')
parser.add_argument('-p', '--profile', help='AWS profile')
parser.add_argument('-v', '--verbose', dest='verbose', action='count', help='Enable debugging')
parser.add_argument('action', choices=['start', 'stop', 'query', 'show', 'userhost'], help='Virtual machine operation')
parser.add_argument('hostnames', metavar='hostname', nargs='+', help='Names of one or more hosts')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - 10*(args.verbose or 0))

virtual_args = args.__dict__
virtual_args['aws_only'] = True
virtual_args['shallow'] = args.action not in ['show', 'userhost'] # no need to do `aws ec2 describe-images`
virtual_hosts = VirtualHosts(**virtual_args)
hosts = virtual_hosts.get_hosts(args.hostnames)

if hosts:
  hosts = sorted(hosts, key=lambda host: host.name)
  if args.action == 'query':
    table = Table('Host', 'State', 'Instance ID', 'Image ID', 'Created', 'Controlled', desiredSep=' | ')
    for host in hosts:
      table.add(host.name, host.state, host.instance_id, host.image_id, host.created_elapsed, host.controlled_elapsed)
    print(str(table))
  elif args.action == 'show':
    for host in hosts:
      print(json.dumps(virtual_hosts.aws_instance_cache[host.instance_id], sort_keys=True, indent=2))
  elif args.action == 'userhost':
    if len(hosts) == 1:
      host = hosts[0]
      if host.ip:
        if host.user:
          print('{host.user}@{host.ip}'.format(**locals()))
        else:
          parser.error('No host for {host}'.format(**locals()))
      else:
        parser.error('No user for {host}'.format(**locals()))
    else:
      parser.error('Exactly one host expected but found: {}'.format([str(host) for host in hosts]))
  else:
    # remove hosts if they're not in a proper state
    pos = 0
    while pos < len(hosts):
      host = hosts[pos]
      if (args.action == 'start') and (host.state != 'stopped'):
        log.warning('{host.name} is {host.state}, cannot be started'.format(**locals()))
        del hosts[pos]
      elif (args.action == 'stop') and (host.state != 'running'):
        log.warning('{host.name} is {host.state}, cannot be stopped'.format(**locals()))
        del hosts[pos]
      else:
        pos += 1

    if not hosts:
      log.warning('No hosts are elligible to {args.action}'.format(**locals()))
      exit(1)

    if len(hosts) > 1:
      print('Are you sure you want to {action} {hosts}?'.format(action=args.action, hosts=', '.join([host.name for host in hosts])))
      sys.stdout.write('Enter `yes` to proceed: ')
      if sys.stdin.readline().lower().replace('\n','').replace('\r','') != 'yes':
        exit(1)

    cmd = ['aws', 'ec2']
    if args.profile:
      cmd += ['--profile', args.profile]
    cmd += ['{args.action}-instances'.format(**locals()), '--instance-ids'] + [host.instance_id for host in hosts]
    print(cmd)
    subprocess.Popen(cmd).wait()
