#! /usr/bin/env python

import json
import logging
import argparse
import subprocess
from virtual_hosts import VirtualHosts
from table import Table

parser = argparse.ArgumentParser(description='Virtual machine control')
parser.add_argument('-p', '--profile', help='AWS profile')
parser.add_argument('-v', '--verbose', dest='verbose', action='count', help='Enable debugging')
parser.add_argument('action', choices=['start', 'stop', 'query', 'show'], help='Virtual machine operation')
parser.add_argument('hostnames', metavar='hostname', nargs='+', help='Names of one or more hosts')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - 10*(args.verbose or 0))

virtual_args = args.__dict__
virtual_args['aws_only'] = True
virtual_args['shallow'] = args.action != 'show' # no need to do `aws ec2 describe-images`
virtual_hosts = VirtualHosts(**virtual_args)
hosts = virtual_hosts.get_hosts(args.hostnames)

if hosts:
  hosts = sorted(hosts, key=lambda host: host.name)
  if args.action == 'query':
    table = Table('Host', 'State', 'Created', 'Controlled', desiredSep=' | ')
    for host in hosts:
      table.add(host.name, host.state, host.created_elapsed, host.controlled_elapsed)
    print str(table)
  elif args.action == 'show':
    for host in hosts:
      print json.dumps(virtual_hosts.aws_instance_cache[host.instance_id], sort_keys=True, indent=2)
  elif len(hosts) == 1:
    host = hosts[0]
    if (args.action == 'start') and (host.state != 'stopped'):
      parser.error('{host.name} is {host.state}, cannot be started'.format(**locals()))
    elif (args.action == 'stop') and (host.state != 'running'):
      parser.error('{host.name} is {host.state}, cannot be stopped'.format(**locals()))
    print host
    cmd = ['aws', 'ec2']
    if args.profile:
      cmd += ['--profile', args.profile]
    cmd += ['{args.action}-instances'.format(**locals()), '--instance-ids', host.instance_id]
    print(cmd)
    p = subprocess.Popen(cmd)
    exit(p.wait())
  else:
    parser.error('Multiple hosts found: {}'.format(', '.join([str(host.name) for host in hosts])))
