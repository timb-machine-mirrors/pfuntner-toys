#! /usr/bin/env python3

import re
import sys
import json
import signal
import logging
import requests
import datetime
import argparse
import subprocess

def normalize_timestamp(timestamp_string):
  """
    Normalize the following types of timestamp strings:

      AWS: 2022-03-15T09:06:50.000Z
      GCP: 2022-03-15T00:23:24.629-07:00
      Docker: Fri, 01 Oct 2021 09:24:26 -0000

  """
  offset_minutes = None
  if timestamp_string.endswith('Z'):
    offset_minutes = 0
  else:
    match = time_delta_regexp.search(timestamp_string)
    if match:
      offset_minutes = int(match.group(1) + match.group(2)) * 60 + int(match.group(1) + match.group(3))
    else:
      raise Exception(f'No timezone found in {timestamp_string!r} after regexp search')

  if not offset_minutes is None:
    base_timestamp = None

    match = timestamp1_regexp.search(timestamp_string)
    if match:
      base_timestamp = datetime.datetime.strptime(match.group(1), '%Y-%m-%dT%H:%M:%S.%f') # '2022-03-15T09:06:50.000'
    else:
      match = timestamp2_regexp.search(timestamp_string)
      if match:
        base_timestamp = datetime.datetime.strptime(match.group(1), '%a, %d %b %Y %H:%M:%S') # 'Fri, 01 Oct 2021 09:24:26'

    if not base_timestamp is None:
      return datetime.datetime.strftime(base_timestamp - datetime.timedelta(minutes=offset_minutes), '%Y-%m-%d %H:%M:%SZ')
    else:
      raise Exception(f'Can\'t normalize {timestamp_string!r}')
      return timestamp_string

class Table(object):
  def __init__(self, *args):
    if len(args) == 1 and type(args[0]) in (list, tuple):
      self.headings = args[0]
    else:
      self.headings = args

    try:
      self.p = subprocess.Popen(['column', '-t', '-s\t'], stdin=subprocess.PIPE, text=True)
    except Exception as e:
      log.error(f'Error opening `column`: {e!s}. On Ubuntu, try installing the bsdmainutils package')
      exit(1)

    self.p.stdin.write('\t'.join([str(heading) for heading in self.headings]) + '\n')

  def add(self, *args):
    self.p.stdin.write('\t'.join([str(arg) for arg in args]) + '\n')

  def close(self):
    self.p.stdin.close()
    self.p.wait()

parser = argparse.ArgumentParser(description='Get information from remote Docker repo (such as Quay)')
parser.add_argument('-l', '--long', action='store_true', help='Report long manifest hash IDs')
parser.add_argument('-a', '--authorization', help='Remote Docker repository authorization (eg `user:token`)')
parser.add_argument('-s', '--server', required=True, help='Remote Docker repository server')
parser.add_argument('-o', '--organization', required=True, help='Remote Docker repository organization')
parser.add_argument('-r', '--repositories', required=True, help='One or more remote Docker repositories, separated by commas')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

time_delta_regexp = re.compile(r'(-?)(\d{2}):?(\d{2})$') # '-07:00' or '-0000'
timestamp1_regexp = re.compile(r'^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3})') # '2022-03-15T09:06:50.000'
timestamp2_regexp = re.compile(r'^(\S{3}, \d{2} \S{3} \d{4} \d{2}:\d{2}:\d{2})') # 'Fri, 01 Oct 2021 09:24:26'

if args.authorization:
  docker_auth = tuple(args.authorization.split(':'))
  log.debug(f'auth: {docker_auth}')
else:
  docker_auth = None

repositories = args.repositories.split(',')

table = Table(*((['Repository'] if len(repositories) > 1 else []) + ['Tag', 'Manifest ID', 'Created']))

for repo in repositories:
  page = 1
  done = False
  while True:
    docker_url = f'{args.server}/api/v1/repository/{args.organization}/{repo}?page={page}'
    log.info(f'url: {docker_url}')

    try:
      req = requests.get(docker_url, auth=docker_auth)
    except Exception as e:
      log.warning(f'{docker_url} exception: {e!s}')
      break

    if req.ok:
      log.debug(f'req.json: {req.json()}')
      tags = req.json().get('tags', {})
      """
      [
        {
          'latest': {
            'name': 'latest',
            'image_id': '2593795b6de3745b95abd2e426bd985774a9d3148a537e36947ad26e72a346db',
            'size': 124946677,
            'last_modified': 'Tue, 17 May 2022 10:17:48 -0000',
            'manifest_digest': 'sha256:f61e1e2af5b6a819254454ab6a0b6c1dc9139fe9e46f7ec351c5d66366fc5143',
          }
        },
        .
        .
        .
      ]
      """
      for (tag, image) in tags.items():
        # "last_modified": "Mon, 21 Mar 2022 10:15:07 -0000"
        # timestamp = datetime.datetime.strptime(image.get('last_modified', '')[:-6], '%a, %d %b %Y %H:%M:%S')
        manifest_digest = image.get('manifest_digest')[7:]

        table.add(*(([repo] if len(repositories) > 1 else []) + [tag, manifest_digest if args.long else manifest_digest[:12], normalize_timestamp(image.get('last_modified', ''))]))
      if req.json().get('has_additional', False):
        page += 1
      else:
        break
    else:
      log.warning(f'{docker_url} failed: {req.text!r}')
      break

table.close()
