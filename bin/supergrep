#! /usr/bin/env python3

import re
import os
import sys
import signal
import logging
import argparse

def process(source):
  stream = None
  if isinstance(source, str):
    if os.path.exists(source):
      if not os.path.isdir(source):
        stream = open(source, 'rb')
        prefix = f'{source}: '
      else:
        log.warning(f'{source!r} is a directory')
    else:
      log.warning(f'{source!r} is not found')
  else:
    stream = os.fdopen(source.fileno(), 'rb')
    prefix = ''

  if stream:
    for line in stream.read().splitlines():
      work = line
      for regexp in args.exclude:
        work = regexp.sub(b'\0', work)
      if all([regexp.search(work) for regexp in args.include]):
        print(f'{prefix}{repr(line)[2:-1]}')

    stream.close()

parser = argparse.ArgumentParser(description='Perform grep with a series of regular expressions')
parser.add_argument('-i', '--include', action='append', help='Include lines that have all of these regular expressions')
parser.add_argument('-x', '--exclude', action='append', help='Exclude portions of the line that include this regular expression')
parser.add_argument('files', metavar='file', nargs='*', help='Paths to zero or more files to process')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

args.include = [re.compile(pattern.encode()) for pattern in args.include or []]
args.exclude = [re.compile(pattern.encode()) for pattern in args.exclude or []]

if not args.include:
  parser.error('At least one --include regular expression must be expressed')

if len(args.include) + len(args.exclude) < 2:
  parser.error('At least two regular expressions must be expressed')

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

log.debug(f'args: {args}')

if args.files:
  for filename in args.files:
    process(filename)
else:
  if sys.stdin.isatty():
    parser.error('stdin must be redirected if not files are specifies on command line')
  process(sys.stdin)
