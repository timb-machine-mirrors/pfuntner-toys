#! /usr/bin/env python3

import os
import re
import json
import logging
import argparse

from table import Table

def load(filename):
  if os.path.isfile(filename):
    if filename.endswith('.json'):
      with open(filename) as stream:
        return json.load(stream)['examples']
    else:
      parser.error(f'Not a JSON file: {filename!r}')
  else:
    parser.error(f'Not a file: {filename!r}')

def get_test(tests, description):
  for test in tests:
    if test['description'] == description:
      return test
  return None

def normalize(s):
  ret = s
  while True:
    match = regexp.search(ret)
    if match:
      ret = ret[:match.start(1)] + 'foo' + ret[match.end(1):]
    else:
      break
  log.debug(f'in:  {s!r}')
  log.debug(f'out: {ret!r}')
  return ret

parser = argparse.ArgumentParser(description='Compare two pytest JSON files')
parser.add_argument('file1', help='Path to first pytest JSON file')
parser.add_argument('file2', help='Path to second pytest JSON file')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

"""
/examples/0/description '[CIS_AMAZON2_1.1.1.1] Ensure mounting of cramfs filesystems is disabled (Scored)'
/examples/0/file_path 'tests/os/test_os_1_initial_setup.py'
/examples/0/level 1
/examples/0/line_number 26
/examples/0/pending_message None
/examples/0/psb_req_id/0 'SEC-HRD-OS'
/examples/0/run_time 0.7670354843139648
/examples/0/scored True
/examples/0/skip_if_not_etcd False
/examples/0/skip_if_not_k8s_master False
/examples/0/skip_if_not_k8s_worker False
/examples/0/skip_if_single_partition False
/examples/0/skip_in_container True
/examples/0/skip_in_platform False
/examples/0/status 'passed'
/examples/0/test_function 'test_os_1_initial_setup.py:test_ensure_mounting_of_cramfs_filesystems_is_disabled'
"""

tests1 = load(args.file1)
tests2 = load(args.file2)

table = Table('Description', args.file1, args.file2, 'Equal')

regexp = re.compile(r'((?:\d(?:[-0-9a-f]{2,}))|(?:[-0-9a-f]+\d(?:[0-9a-f]+))|(?:[-0-9a-f]*\d(?:[0-9a-f]{2,}))|(?:[-0-9a-f]{2,}\d(?:[0-9a-f]*))|(?:[-0-9a-f]{2,}\d))')

for test1 in tests1:
  test2 = get_test(tests2, test1['description'])
  if test2:
    equal = test1['status'] == test2['status']
    if equal and test1['status'] == 'failed':
      if normalize(test1['stack_trace']['message']) != normalize(test2['stack_trace']['message']):
        equal = 'Stack trace differ'
        log.error('{equal} for {description}:'.format(equal=equal, description=test1['description']))
        log.error('  test1: {stack_trace!r}'.format(stack_trace=test1['stack_trace']['message']))
        log.error('  test2: {stack_trace!r}'.format(stack_trace=test2['stack_trace']['message']))
    table.add(test1['description'], test1['status'], test2['status'], equal)
  else:
    table.add(test1['description'], test1['status'], '', f'Only in {args.file1}')

for test2 in tests2:
  test1 = get_test(tests1, test2['description'])
  if not test1:
    table.add(test1['description'], '', test2['status'], f'Only in {args.file2}')

print(str(table), end='')
