#! /usr/bin/env python3

import os
import sys
import signal
import logging
import datetime
import argparse
import subprocess

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))

  p = None
  try:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  except Exception as e:
    (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

  if p:
    if stdin:
      p.stdin.write(stdin.encode())
    if capture:
      (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    else:
      (stdout, stderr) = ('', '')
    rc = p.wait()

  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Tee stdin and backup old versions')
parser.add_argument('filename', help='File to write lines to')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if sys.stdin.isatty():
  parser.error('stdin must be redirected')

if os.path.exists(args.filename):
  if os.path.isfile(args.filename):
    new_filename = f'{args.filename}.{datetime.datetime.fromtimestamp(os.path.getmtime(args.filename).isoformat()}'
    (rc, stdout, stderr) = run(['mv', '--verbose', '--no-clobber', args.filename, new_filename], capture=False)
    if rc != 0:
      log.error(f'Could not backup to {new_filename!r}')
      exit(1)
  else:
    parser.error(f'{args.filename!r} already exists but is not a regular file')

stream = open(args.filename, 'w')
print(f'Writing to {args.filename!r}')

eof = False
while not eof:
  line = sys.stdin.readline()
  if line:
    print(line.strip('\n') .strip('\r'))
    print(line.strip('\n') .strip('\r'), file=stream)
  else:
    eof = True
