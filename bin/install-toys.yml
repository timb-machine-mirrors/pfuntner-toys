- name: Install Bruno's Toys
  hosts: "{{ hosts }}"
  tasks:

  - block:
    - name: Query peon home directory
      shell: "echo ~"
      register: peon_pwd

    - name: Capture peon home directory
      set_fact:
        peon_home: "{{ peon_pwd.stdout_lines[0] }}"
    when: peon_home is not defined

  - name: Display peon home directory
    debug:
      msg: "{{ peon_home }}"

  - name: Collect home directory of controlling system user
    shell: echo ~
    register: local_home_directory
    delegate_to: localhost

  - name: Create .ssh directory
    file:
      path: "{{ peon_home }}/.ssh"
      mode: 0700
      state: directory

  - name: Share ssh keys
    copy:
      src: "{{ local_home_directory.stdout }}/.ssh/{{ item }}"
      dest: "{{ peon_home }}/.ssh/{{ item }}"
      mode: 0600
      force: no
    loop:
      - id_rsa
      - id_rsa.pub

  - name: Use correct Python package for Amazon 1
    set_fact:
      python_pkg: python36
    when: ansible_distribution == 'Amazon' and ansible_distribution_major_version == '2018'

  - name: Install packages
    package:
      name: "{{ item }}"
    loop: 
      - "{{ python_pkg }}"
      - git
    become: true

  - name: "Create {{ peon_home }}/repos directory"
    file:
      path: "{{ peon_home }}/repos"
      state: directory

  - name: "Test for {{ peon_home }}/repos/toys directory"
    shell: "test -d '{{ peon_home }}/repos/toys'"
    register: test_for_peon_repos_toys
    failed_when: false

  - name: Clone toys repository
    command: "git clone https://github.com/pfuntner/toys.git"
    args:
      chdir: "{{ peon_home }}/repos"
    when: test_for_peon_repos_toys.rc != 0

  - name: "Create {{ peon_home }}/bin symlink"
    file:
      path: "{{ peon_home }}/bin"
      src: "{{ peon_home }}/repos/toys/bin"
      state: link
    failed_when: false

  - name: "Test for {{ peon_home }}/.bash_profile"
    file:
      path: "{{ peon_home }}/.bash_profile"
      state: present
    register: test_for_peon_bash_profile
    failed_when: false

  - name: "Use {{ peon_home }}/.bash_profile"
    set_fact:
      peon_bash_profile: ".bash_profile"
    when: not test_for_peon_bash_profile.failed

  - name: "Test for {{ peon_home }}/.bash_login"
    file:
      path: "{{ peon_home }}/.bash_login"
      state: present
    register: test_for_peon_bash_login
    when: test_for_peon_bash_profile.failed
    failed_when: false

  - name: "Use {{ peon_home }}/.bash_login"
    set_fact:
      peon_bash_profile: ".bash_login"
    when: test_for_peon_bash_profile.failed and not test_for_peon_bash_login.failed

  - name: "Test for toys changes to {{ peon_home }}/{{ peon_bash_profile }}"
    command: "grep 'This is a fragment of a bash profile that I liked to use' '{{ peon_home }}/{{ peon_bash_profile }}'"
    register: test_for_toys_changes_to_profile
    failed_when: false

  - block:
    - name: "Make changes to {{ peon_home }}/{{ peon_bash_profile }}"
      shell: "cat '{{ peon_home }}/repos/toys/misc/.profile' >> '{{ peon_home }}/{{ peon_bash_profile }}'"

    - name: "Make changes to {{ peon_home }}/.bashrc"
      shell: "cat '{{ peon_home }}/repos/toys/misc/.bashrc' >> '{{ peon_home }}/.bashrc'"
    when: (test_for_toys_changes_to_profile | default(empty_stdout)).stdout == ''

  - name: Try a tool for peon
    shell: "source '{{ peon_home }}/{{ peon_bash_profile }}' && whatami"
    args:
      executable: /bin/bash
    register: peon_try_a_tool

  - name: See trial output for peon
    debug:
      var: peon_try_a_tool.stdout_lines

  # This block allows runs all the enclosed tasks as root
  - block:
    - name: Query root home directory
      shell: "echo ~"
      register: root_pwd

    - name: Capture root home directory
      set_fact:
        root_home: "{{ root_pwd.stdout_lines[0] }}"
  
    - name: Display root home directory
      debug:
        msg: "{{ root_home }}"

    - name: "Create {{ root_home }}/repos symlink"
      file:
        path: "{{ root_home }}/repos"
        src: "{{ peon_home }}/repos"
        state: link

    - name: "Create {{ root_home }}/bin symlink"
      file:
        path: "{{ root_home }}/bin"
        src: "{{ peon_home }}/repos/toys/bin"
        state: link
      failed_when: false

    - name: "Test for {{ root_home }}/.bash_profile"
      file:
        path: "{{ root_home }}/.bash_profile"
        state: present
      register: test_for_root_bash_profile
      failed_when: false
  
    - name: "Use {{ root_home }}/.bash_profile"
      set_fact:
        root_bash_profile: ".bash_profile"
      when: not test_for_root_bash_profile.failed
  
    - name: "Test for {{ root_home }}/.bash_login"
      file:
        path: "{{ root_home }}/.bash_login"
        state: present
      register: test_for_root_bash_login
      when: test_for_root_bash_profile.failed
      failed_when: false
  
    - name: "Use {{ root_home }}/.bash_login"
      set_fact:
        root_bash_profile: ".bash_login"
      when: test_for_root_bash_profile.failed and not test_for_root_bash_login.failed
  
    - name: "Test for toys changes to {{ root_home }}/{{ root_bash_profile }}"
      command: "grep 'This is a fragment of a bash profile that I liked to use' '{{ root_home }}/{{ root_bash_profile }}'"
      register: test_for_toys_changes_to_profile
      failed_when: false
  
    - block:
      - name: "Make changes to {{ root_home }}/{{ root_bash_profile }}"
        shell: "cat '{{ peon_home }}/repos/toys/misc/.profile' >> '{{ root_home }}/{{ root_bash_profile }}'"
  
      - name: "Make changes to {{ root_home }}/.bashrc"
        shell: "cat '{{ peon_home }}/repos/toys/misc/.bashrc' >> '{{ root_home }}/.bashrc'"
      when: (test_for_toys_changes_to_profile | default(empty_stdout)).stdout == ''
  
    - name: Try a tool for root
      shell: "source '{{ root_home }}/{{ root_bash_profile }}' && whatami"
      args:
        executable: /bin/bash
      register: root_try_a_tool
  
    - name: See trial output for root
      debug:
        var: root_try_a_tool.stdout_lines
  
    become: true

  vars:
    python_pkg: python3 # this might change depending on the distro

    peon_bash_profile: ".profile" # default bash profile for non-root user (peon) - this might change depending on other profiles that might be in use

    root_bash_profile: ".profile" # default bash profile for root - this might change depending on other profiles that might be in use

    empty_stdout:
      stdout: ''
