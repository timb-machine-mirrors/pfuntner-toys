#! /usr/bin/env python2

import re
import os
import sys
import json
import fcntl
import logging
import argparse
import datetime

basename = os.path.basename(sys.argv[0])
DEFAULT_CONFIG_FILENAME = '{HOME}/.{basename}-config.json'.format(HOME=os.environ['HOME'], **locals())

parser = argparse.ArgumentParser(description='Wait a certain amount of time.  Useful for loops')
parser.add_argument('duration', help='Duration (Nd)(Nm)(Nh)(Ns)')
parser.add_argument('-r', '--reset', action='store_true', help='Reset a pending time limit')
parser.add_argument('-c', '--config', help='Specify config file (default: {DEFAULT_CONFIG_FILENAME!r})'.format(**locals()))
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

now = datetime.datetime.now()

regexp = re.compile(r'^(?:(\d+)d)?(?:(\d+)h)?(?:(\d+)m)?(?:([1-9]\d*)s?)?$')
match = regexp.search(args.duration)
if not match:
  parser.error('{args.duration!r} does not match {regexp.pattern!r}'.format(**locals()))

groups = match.groups()
log.debug('groups: {groups}'.format(**locals()))

if not any(groups):
  parser.error('{args.duration!r} is an invalid duration'.format(**locals()))

curr_duration = ((int(match.group(1) or 0)*24 + int(match.group(2) or 0))*60 + int(match.group(3) or 0))*60 + int(match.group(4) or 0)
log.info('curr_duration: {curr_duration} seconds'.format(**locals()))

config_filename = args.config or DEFAULT_CONFIG_FILENAME 
log.debug('Opening configuration {config_filename}'.format(**locals()))
try:
  config_file = open(config_filename, 'a+')
except Exception as e:
  parser.error('Cannot open {config_filename!r}: {e!s}'.format(**locals()))

# lock file so no one else messes with the config file
fcntl.lockf(config_file, fcntl.LOCK_EX)

config_file.seek(0)
try:
  config = json.load(config_file)
except Exception as e:
  log.info('Caught {e!s} trying to read {config_filename}'.format(**locals()))
  config = {}
  log.debug('Defaulting configuration to {config}'.format(**locals()))
else:
  log.info('Read {config} from {config_filename}'.format(**locals()))

waiting = bool(config.get('expiry'))

if waiting:
  duration = str(config.get('duration', args.duration))
  if duration != args.duration:
    parser.error('Pending time {duration!r} at {expiry_timestamp} has not yet expired, cannot switch to {args.duration!r}'.format(**locals()))

  expiry = config.get('expiry', now) # seconds since Epoch (an int)
  expiry_timestamp = str(config.get('expiry_timestamp', now))
  start_timestamp = str(config.get('start_timestamp'))

  if expiry_timestamp >= str(now):
    # time has not yet expired
    remain = datetime.datetime.fromtimestamp(expiry) - now
    log.info('{remain!s} left in {duration!r}, ending at {expiry_timestamp}'.format(**locals()))
    exit(0)
  else:
    # time has expired
    log.info('{duration!r} expired at {expiry_timestamp}'.format(**locals()))
    log.debug('Truncating {config_filename}'.format(**locals()))
    config_file.truncate(0)
    exit(1)

expiry = now + datetime.timedelta(seconds=curr_duration)
config = {
  'expiry': (expiry - datetime.datetime.fromtimestamp(0)).total_seconds(),
  'expiry_timestamp': str(expiry),
  'start_timestamp': str(now),
  'duration': args.duration,
}

log.info('New config: {config}'.format(**locals()))
config_file.truncate(0)
config_file.seek(0)
json.dump(config, config_file)
