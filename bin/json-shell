#! /usr/bin/env python3

import os
import sys
import json
import shlex
import signal
import logging
import argparse

import bruno_tools

class StackNode(object):
  def __init__(self, idx, obj):
    self.idx = idx
    self.obj = obj

def is_list_or_dict(node):
  return any([isinstance(node, cls) for cls in [list, dict]])

def pwd():
  return '/' + ('/'.join([str(node.idx) for node in stack[1:]]))

def curr_node():
  return stack[-1].obj

def elems(node):
  if isinstance(node, list):
    if not node:
      log.warning(f'No elements at {pwd()}')
    return range(len(node))
  elif isinstance(node, dict):
    if not node:
      log.warning(f'No elements at {pwd()}')
    return node.keys()
  else:
    log.warning(f'elems() does not understand node at {pwd()}')
    return []

def display(node):
  json.dump(node, sys.stdout, indent=2)
  print()

def help():
  print("""Navigate around a JSON file - it's not *exactly* a `shell` but it is what it is!

Commands:

  ls                         # show keys of current element

  cd                         # make root element the current element
  cd key                     # make `key` of the current element the current element

  cat                        # display current object
  cat key                    # display `key` of current element

  help
  exit/quit                  # there are a few other simple obvious aliases
""")

parser = argparse.ArgumentParser(description='Interactive shell for dealing with a JSON object')
parser.add_argument('filename', help='Name of JSON file')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if not os.path.exists(args.filename):
  parser.error(f'Cannot find {filename!r}')

if not os.path.isfile(args.filename):
  parser.error(f'{filename!r} is not a regular file')

with open(args.filename) as stream:
  stack = [StackNode(None, json.load(stream))]

if not is_list_or_dict(curr_node()):
  display(curr_node())
  exit()

while True:
  try:
    # print the prompt with the current position and prompt for a command
    command = input(pwd() + ' > ').strip()
  except EOFError:
    break

  command_tokens = shlex.split(command)

  if command_tokens == ['ls']:
    for elem in elems(stack[-1].obj):
      print(elem)

  elif command_tokens[0] in ['cd', 'cat']:
    if command_tokens == ['cd']:
      # cd to root
      stack = [stack[0]]
    elif command_tokens == ['cat']:
      display(curr_node())
    elif command_tokens == ['cd', '..']:
      if len(stack) == 1:
        log.warning('Already at root')
      else:
        # cd to parent
        del stack[-1]

    elif isinstance(curr_node(), list):
      if len(command_tokens) != 2:
        log.warning(f'Too many arguments in {command_tokens}')
      else:
        idx = None
        try:
          idx = int(command_tokens[1])
        except Exception as e:
          log.warning(f'{command_tokens[1]!r} is not an integer')
        if idx is not None:
          if not (0 <= idx < len(curr_node())):
            log.warning(f'{command_tokens[1]!r} is out of range')
          else:
            if command_tokens[0] == 'cd' and not is_list_or_dict(curr_node()[idx]):
              log.warning(f'{idx!r} is not a list or dictionary')
            else:
              if command_tokens[0] == 'cd':
                stack.append(StackNode(idx, curr_node()[idx]))
              elif command_tokens[0] == 'cat':
                display(curr_node()[idx])
              else:
                log.warning('unhandled else')

    elif isinstance(curr_node(), dict):
      if len(command_tokens) != 2:
        log.warning(f'Too many arguments in {command_tokens}')
      else:
        idx = command_tokens[1]
        if not idx in curr_node().keys():
          log.warning(f'{command_tokens[1]!r} not found')
        else:
          if command_tokens[0] == 'cd' and not is_list_or_dict(curr_node()[idx]):
            log.warning(f'{idx!r} is not a list or dictionary')
          else:
            if command_tokens[0] == 'cd':
              stack.append(StackNode(idx, curr_node()[idx]))
            elif command_tokens[0] == 'cat':
              display(curr_node()[idx])
            else:
              log.warning('unhandled else')

    else:
      log.warning(f'{"cd"!r} does not understand {pwd()!r} - it\'s not a list or dictionary!')

  elif command == ['help']:
    help()

  elif command in ['exit', 'exit()', 'quit', 'quit()', 'q', 'qq']:
    break

  else:
    print(f'Unknown command {command!r}')

print()
