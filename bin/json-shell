#! /usr/bin/env python3

import pdb

import os
import re
import cmd
import sys
import json
import shutil
import inspect
import logging
import argparse


class StackNode(object):
  """
  This class encapsulates a node in a tree along with the "index" used to get to that object.  The class is designed to be pushed onto a LIFO stack.

  It's best to explain with an example.  Consider processing this object:

  [
    '1',
    [
      '2-1',
    ],
  ]

  The stack starts out with the root object:

    stack: [StackNode(None, ['a', ['b-a']])]

  If you `cd` into element index 1, the stack becomes:

    stack: [StackNode(None, ['a', ['b-a']]), StackNode(1, ['b-a'])]

  The current item is always at the end of the stack and you you can use the indices of all the nodes on the stack (except the top!) as "bread crumbs" to
  figure out the "cwd".  If you do `cd ..`, you'll pop the last end of the stack and be back in the root.
  """
  def __init__(self, idx, obj):
    self.idx = idx
    self.obj = obj


def is_list_or_dict(node):
  """
  Test a node to see if it is a list or dictionary.

  Parameters:
    node: The node to test

  Returns:
    True if the node is either a list or dictionary, False otherwise
  """
  return any([isinstance(node, cls) for cls in [list, dict]])


def pwd():
  """
  Prints the "current working directory" of your location in the object.  We do this by simply joining all the indices
  in the stack (except for the root object).
  """
  return '/' + ('/'.join([str(node.idx) for node in stack[1:]]))


def curr_node():
  """
  Returns the current node - the top of the stack (most recently added).
  """
  return stack[-1].obj


def node_keys(node, stringify=False):
  """
  Returns the elements of a node - targets to which you can `cd` into or `cat`.

  Parameters:
    node: The node of which to list elements
    stringify: Turn integer keys (list indices) into string when true, leave as integers otherwise

  Returns:
    A list of elements:
      If the node is a dictionary, it returns a list of keys of the dictionary.
      If the node is a list, it returns a list of integers: 0 to (the length of the list)-1.  The number of elements
      returned matches the number of elements in the list.
      If the node is not a dictionary or list (we shouldn't be calling this function), a warning is printed and an empty
      list is returned
  """
  if isinstance(node, list):
    if not node:
      log.warning(f'No elements at {pwd()}')
    return [str(elem) if stringify else elem for elem in range(len(node))]
  elif isinstance(node, dict):
    if not node:
      log.warning(f'No elements at {pwd()}')
    return node.keys()
  else:
    log.warning(f'elems() does not understand node at {pwd()}')
    return []


def display(node):
  """
  Prints the current object including its children.
  """

  json.dump(node, sys.stdout, indent=2)
  print()


def grepper(path, node, args):
  display = args.negate

  if is_list_or_dict(node):
    if path:
      if args.regexp and args.regexp.search(path[-1]):
        display = not args.negate
      elif args.key_regexp and args.key_regexp.search(path[-1]) and args.value_regexp.search(''):
        display = not args.negate
  elif args.regexp:
    if path and args.regexp.search(path[-1]):
      display = not args.negate
    elif args.regexp.search(str(node)):
      display = not args.negate
  elif path and args.key_regexp.search(path[-1]) and args.value_regexp.search(str(node)):
      display = not args.negate

  if display:
    if is_list_or_dict(node):
      if path:
        print(f'/{"/".join(path)}/')
      else:
        print('/')
    else:
      print(f'/{"/".join(path)}: {node!r}')


def finder(path, node, args):
  # args is not used for finder() - I'll just do the assert
  # to pacify PyCharm into thinking the the variable is used
  assert args is None

  if is_list_or_dict(node):
    if path:
      print(f'/{"/".join(path)}/')
    else:
      print('/')
  else:
    print(f'/{"/".join(path)}: {node!r}')


def dive(action, path, node, args=None):
  action(path, node, args)
  if isinstance(node, list):
    for idx in range(len(node)):
      dive(action, path + [str(idx)], node[idx], args)
  elif isinstance(node, dict):
    for idx in node.keys():
      dive(action, path + [idx], node[idx], args)


class CmdProcessor(cmd.Cmd):
  def __init__(self, stack):
    super(CmdProcessor, self).__init__()
    self.stack = stack
    self.prompt = f'{pwd()}> '

  def emptyline(self):
    print('Confoozed?  Try `help`')

  def do_exit(self, args, cmd='exit'):
    """Exit from json-shell"""
    if args.strip() not in ['', '()']:
      log.warning(f'`{cmd}` does not take an argument')
    return True

  def do_quit(self, args):
    """Exit from json-shell"""
    return self.do_exit(args, cmd='quit')

  def do_ls(self, args):
    """List keys in the current node"""
    if args.strip():
      log.warning('`ls` does not take an argument')
      return
    self.columnize(list(node_keys(curr_node(), stringify=True)), displaywidth=shutil.get_terminal_size().columns)

  def _perform_with_key(self, args, performer):
    if isinstance(curr_node(), list):
      key = None
      try:
        key = int(args)
      except Exception as e:
        print(f'{args!r} is not an integer: {e!s}')
      if key is not None:
        if key < 0 or key >= len(curr_node()):
          print(f'{key!r} is out of range')
        else:
          performer(key)
    elif isinstance(curr_node(), dict):
      if args not in curr_node():
        print(f'{args!r} is not a key')
      else:
        performer(args)
    else:
      print(f'Unexpected {curr_node().__class__.__name__} node')

  def _complete_key_helper(self, text, line, start_index, end_index):
    possibles = node_keys(curr_node())
    if text:
      return [str(possible) for possible in possibles if str(possible).startswith(text)]
    else:
      return list(map(str, possibles))

  def complete_cd(self, text, line, start_index, end_index):
    return self._complete_key_helper(text, line, start_index, end_index)

  def _perform_cd_with_key(self, key):
    if not is_list_or_dict(curr_node()[key]):
      print(f'{key!r} is not a list or dictionary')
    else:
      self.stack.append(StackNode(key, curr_node()[key]))
      self.prompt = f'{pwd()}> '

  def do_cd(self, args):
    """Change the current node
  `cd` by itself goes to root node
  `cd ..` go to parent node as long as you're not already at the root
  `cd key` goes to a child node if the key exists and its node is a dictionary or list"""

    args = args.strip()
    if args == '':
      # cd to the root node
      if len(self.stack) == 1:
        print('Already at the root node')
      else:
        # I tried doing this with `stack = [stack[0]]` but created a NEW stack and the old global stack list still had all the elements
        while len(self.stack) > 1:
          del self.stack[-1]
        self.prompt = f'{pwd()}> '
    elif args == '..':
      if len(self.stack) == 1:
        log.warning('Already at root')
      else:
        # cd to parent node
        del self.stack[-1]
        self.prompt = f'{pwd()}> '
    else:
      self._perform_with_key(args, self._perform_cd_with_key)

  def _perform_cat_with_key(self, key):
    display(curr_node()[key])

  def complete_cat(self, text, line, start_index, end_index):
    return self._complete_key_helper(text, line, start_index, end_index)

  def do_cat(self, args):
    """Display the current node or a child
  `cat` by itself displays the current node
  `cat key` display child element `key` of the current node"""

    args = args.strip()
    if args == '':
      display(curr_node())
    else:
      self._perform_with_key(args, self._perform_cat_with_key)

  def do_pwd(self, args):
    """Print the current node - note that this is included in each prompt"""
    if args.strip():
      log.warning('`pwd` does not take an argument')
      return
    print(pwd())

  def _perform_describe_with_key(self, key):
    description = pwd()
    if key is not None:
      description += ('' if description == '/' else '/') + str(key)
    description += ' is a '
    target = curr_node() if key is None else curr_node()[key]
    description += target.__class__.__name__
    if is_list_or_dict(target):
      description += f' with {len(target)} elements'
    elif isinstance(target, str):
      description += f' with {len(target)} characters'
    print(description)

  def complete_describe(self, text, line, start_index, end_index):
    return self._complete_key_helper(text, line, start_index, end_index)

  def do_describe(self, args):
    """Describe a node
  `describe` describes the current node
  `describe key` describes the child element `key` of the current node"""
    args = args.strip()
    if args == '':
      self._perform_describe_with_key(None)
    else:
      self._perform_with_key(args.strip(), self._perform_describe_with_key)

  def do_grep(self, args):
    """Search structure for regular expressions
   grep re        # search for the regular expression in key or value
   grep re1=re2   # search for re1 in key and re2 in value

Options:
   -i     perform case-insensitive search
   -v     show elements that do not match regular expression(s)

Notes:
   Non-string values are cast to strings and then searched"""
    parser = argparse.ArgumentParser(description='json-shell grep command', add_help=False)
    parser.add_argument('-i', '--ignore-case', action='store_true')
    parser.add_argument('-v', '--negate', action='store_true')
    parser.add_argument('pattern', nargs='?')
    (grep_args, remain) = parser.parse_known_args(args.split())
    if remain:
      log.warning(f'Unrecognized arguments: {remain!r}')
      return
    if grep_args.pattern is None:
      log.warning('A regular expression is required')
      return

    match = re.search(r'^([^=]*)(?:(=)(.*))?$', grep_args.pattern)
    if not match:
      log.warning(f'Malformed pattern: {grep_args.pattern!r}')
      return

    if match.group(2):
      try:
        setattr(grep_args, 'key_regexp', re.compile(match.group(1), flags=re.IGNORECASE if grep_args.ignore_case else 0))
      except Exception as e:
        log.warning(f'{match.group(1)!r} is not a valid regular expression: {e!s}')
        return
      try:
        setattr(grep_args, 'value_regexp', re.compile(match.group(3), flags=re.IGNORECASE if grep_args.ignore_case else 0))
      except Exception as e:
        log.warning(f'{match.group(3)!r} is not a valid regular expression: {e!s}')
        return
      setattr(grep_args, 'regexp', None)
    else:
      try:
        setattr(grep_args, 'regexp', re.compile(match.group(1), flags=re.IGNORECASE if grep_args.ignore_case else 0))
      except Exception as e:
        log.warning(f'{match.group(1)!r} is not a valid regular expression: {e!s}')
        return
      setattr(grep_args, 'key_regexp', None)
      setattr(grep_args, 'value_regexp', None)

    dive(grepper, [] if pwd() == '/' else pwd().split('/')[1:], curr_node(), grep_args)

  def do_find(self, args):
    """List structure with each element on a separate line without indentation:
   key/key/.../key/key: value"""
    if args.strip():
      log.warning('`find` does not take an argument')
      return
    dive(finder, [] if pwd() == '/' else pwd().split('/')[1:], curr_node())

  def do_help(self, args):
    """Display help"""

    if not args.strip():
      print('Navigate around a JSON document, just like a shell, only different!')
      print()
      print('Commands:')
      print()
      count = 0
      for (name, doc) in doers.items():
        if doc:
          if count > 0:
            print()
          doc = doc.splitlines()
          print(f'  {name:10}{doc[0]}')
          for extra_doc in doc[1:]:
            print(f'{" "*12}{extra_doc}')
          count += 1
    else:
      doc = doers.get(args)
      if doc:
        print(doc)
      else:
        self.do_help('')

  def do_EOF(self, args):
    exit()

parser = argparse.ArgumentParser(description='Interactive shell for dealing with a JSON object')
parser.add_argument('filename', help='Name of JSON file')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

if not os.path.exists(args.filename):
  parser.error(f'Cannot find {args.filename!r}')

if os.path.isdir(args.filename):
  parser.error(f'{args.filename!r} is directory')

with open(args.filename) as stream:
  try:
    root = json.load(stream)
  except Exception as e:
    parser.error(f'Could not parse {args.filename} as JSON: {e!s}')
  # The stack starts out with the root and this element never goes away.  It's like being at / in a filesystem and not
  # being able to do `cd ..`
  stack = [StackNode(None, root)]

if not is_list_or_dict(curr_node()):
  parser.error(f'The root object of {args.filename!r} is not a list or directory')
  exit()

# make a dictionary of `do-er` methods and their docstring
doers = {func[0][3:]: func[1].__doc__ for func in inspect.getmembers(CmdProcessor, predicate=inspect.isfunction) if func[0].startswith('do_')}

print('Confoozed?  Try `help`')
CmdProcessor(stack).cmdloop()
