#! /usr/bin/env python3

import sys
import math
import logging
import argparse
import subprocess

def run(cmd):
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = p.communicate()
  stdout = stdout.decode('utf-8')
  stderr = stderr.decode('utf-8')
  rc = p.wait()
  log.log(logging.INFO if (rc == 0) and stdout else logging.ERROR, '{cmd!r}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  if (rc != 0) or (not stdout):
    exit(1)
  return stdout

parser = argparse.ArgumentParser(description='Make Python library doc page', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('-w', '--width', dest='width', help='Number of columns wide', type=int, default=5)

group = parser.add_mutually_exclusive_group()
group.add_argument('-V', '--vertical', dest='vertical', action='store_true', help='Display libraries vertically')
group.add_argument('-H', '--horizontal', dest='horizontal', action='store_true', help='Display libraries horizontally')

parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

if not (args.horizontal or args.vertical):
  args.vertical = True

log.debug('args: {args}'.format(**locals()))

libraries = [
  ('argparse', 'https://docs.python.org/2/library/argparse.html'),
  ('datetime', 'https://docs.python.org/2/library/datetime.html'),
  ('logging', 'https://docs.python.org/2/library/logging.html'),
  ('os', 'https://docs.python.org/2/library/os.html'),
  ('os.path', 'https://docs.python.org/2/library/os.path.html'),
  ('random', 'https://docs.python.org/2/library/random.html'),
  ('re', 'https://docs.python.org/2/library/re.html'),
  ('requests', 'http://docs.python-requests.org/en/master/api/'),
  ('signal', 'https://docs.python.org/2/library/signal.html'),
  ('string', 'https://docs.python.org/2/library/string.html'),
  ('subprocess', 'https://docs.python.org/2/library/subprocess.html'),
  ('sys', 'https://docs.python.org/2/library/sys.html'),
  ('threading', 'https://docs.python.org/2/library/threading.html'),
  ('itertools', 'https://docs.python.org/2/library/itertools.html'),
]

libraries.sort(key=lambda library: library[0])

print('''<html>
<head>
<title>Python Libraries</title>
<style>
table {
  margin: 8px;
}

td {
  width: 2in;
  font-size: 115%;
  padding: 5px;
  # text-color: grey;
  background-color: lightgrey;
}

.footer {
  color: grey;
  font-size:75%;
  font-style: italic;
  text-align: center;
}
</style>
</head>
<body>
<h1>Python Libraries</h1>
<p>Below are some of my favorite Python libraries.  I'm often pulling up their pages because I can't remember all the details.  There are many more libraries - some I rarely use and others I use less regularly than the ones below.  I might expand the list if I want to include another library.
<table border="1">''')

depth = int(math.ceil(float(len(libraries))/args.width))
log.debug('{count} libraries, depth={depth}'.format(count=len(libraries), **locals()))
row = 0
col = 0
while row < depth:
  if col == 0:
    print('  <tr>')
  pos = row*args.width + col if args.horizontal else col*depth + row
  log.debug('({row},{col}) => {pos}'.format(**locals()))
  if pos < len(libraries):
    print('    <td><a href="{url}">{text}</a></td>'.format(text=libraries[pos][0], url=libraries[pos][1]))
  else:
    print('<td></td>')
  col += 1
  if col >= args.width:
    print('  </tr>')
    row += 1
    col = 0

print('</table>')
print('</p>')

print('<hr/>')
print('''<p class="footer">Generated by makepdoc script on {now}</p>'''.format(now=run(['date', '+%a %Y-%m-%d %H:%M:%S %Z']).strip('\n')))
print('<hr/>')

print('</body>')
print('</html>')
