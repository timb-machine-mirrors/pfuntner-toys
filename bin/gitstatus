#! /usr/bin/env python3

import re
import sys
import signal
import logging
import argparse

import bruno_tools

parser = argparse.ArgumentParser(description='Display status of git files')
parser.add_argument('args', nargs='*', help='Arguments for `git status`')
parser.add_argument('-u', '--untracked', action='store_true', help='Include untracked files')
parser.add_argument('-l', '--long', action='store_true', help='Short long output')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

status_regexp = re.compile(r'^(..)\s+(.*)$')
rename_regexp = re.compile(r'^(.*)\s+->\s+(.*)$')

cmd = ['git', 'status', '--short'] + args.args
(short_rc, short_stdout, short_stderr) = bruno_tools.run(cmd)
if short_rc != 0:
  parser.error(f'{cmd} failed: {short_stderr!r}')

lines = short_stdout.splitlines()

if lines:
  (long_rc, long_stdout, long_stderr) = bruno_tools.run(['git', 'status'] + args.args)
  rebase_in_progress = 'rebase in progress' in long_stdout
  if rebase_in_progress:
    log.warning('Rebase in progress!')

  table = bruno_tools.Table('File', 'Status') if args.long else None

  conflicts = any([line.startswith('UU') for line in lines])
  if conflicts and not args.long:
    log.warning('There are rebase conflicts')

  files_to_stage = list()
  staged_files = list()

  for line in lines:
    log.info(f'{line=!r}')
    match = status_regexp.search(line)
    if match:
      (status, remain) = match.groups()
      if status == '??':
        if args.long:
          table.add(remain, 'Untracked file')
        elif not conflicts:
          if args.untracked:
            print(remain)
          else:
            log.warning(f'Untracked file {remain!r}')
      elif status == 'A ':
        if args.long:
          table.add(remain, 'Staged new file')
        else:
          staged_files.append(remain)
      elif status in [' M', 'MM']:
        if args.long:
          table.add(remain, 'Un-staged modified file')
        elif not conflicts:
          files_to_stage.append(remain)
      elif status == 'M ':
        if args.long:
          table.add(remain, 'Staged modified file')
        else:
          staged_files.append(remain)
      elif status == 'D ':
        if args.long:
          table.add(remain, 'Staged deleted file')
        else:
          staged_files.append(remain)
      elif status == ' D':
        if args.long:
          table.add(remain, 'Un-staged deleted file')
      elif status == 'R ':
        match = rename_regexp.search(remain)
        if match:
          (old_name, new_name) = match.groups()
          if args.long:
            table.add(old_name, f'Staged rename to {new_name!r}')
          else:
            staged_files.append(f'{old_name}->{new_name}')
        else:
          log.warning(f'Cannot parse rename: {line!r}')
      elif status == 'UU':
        if args.long:
          table.add(remain, 'File with merge conflict')
        else:
          files_to_stage.append(remain)
      else:
        log.warning(f'Unexpected status: {line!r}')
    else:
      log.warning(f'Cannot find status: {line!r}')

  if args.long:
    table.close()
  elif files_to_stage:
    print('\n'.join(files_to_stage))
  else:
    if staged_files:
      if rebase_in_progress:
        log.warning(f'No files to stage but ready to continue rebase: {", ".join(sorted(staged_files))}')
      else:
        log.warning(f'No files to stage but ready to commit: {", ".join(sorted(staged_files))}')
    else:
      log.warning('No files to stage and nothing to commit')
else:
  if args.long:
    print('No changes')
  else:
    log.warning('No changes')
