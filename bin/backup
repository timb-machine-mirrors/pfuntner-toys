#! /usr/bin/env python3

import sys
import os
import datetime
import time
import commands
import getopt
import re
import os.path
import subprocess

def listAll(dir):
  for file in os.listdir(dir):
    path = os.path.join(dir, file)
    # print "Examining %s" % path
    if re.search("\.tgz$", file) and os.path.isfile(path):
      print(path)
      p = subprocess.Popen(["tar", "-tvf", path], stdout=subprocess.PIPE)
      (stdout, stderr) = p.communicate()
      rc = p.wait()
      for line in stdout.strip('\n').split('\n'):
        print("  %s" % line)
      print("")
    elif os.path.isdir(path):
      listAll(path)
    
def waitCheck(status):
  return os.WIFEXITED(status) and os.WEXITSTATUS(status) == 0

list = None
(opts,args) = getopt.getopt(sys.argv[1:], "l", ["list"])
for (opt,arg) in opts:
  if opt in ["-l", "--list"]:
    list = not list
  else:
    assert false, "Don't know how to handle `%s`" % opt

if list:
  listAll("%(HOME)s/backups" % os.environ)
else:
  if len(args) == 0:
    name = os.getcwd().replace("/", "_")[1:]
    tarSubjects = "."
  else:
    name = ""
    tarSubjects = ""
    for i in range(len(args)):
      curr = args[i]
      if not curr.startswith("/"):
        curr = os.getcwd() + "/" + curr
      curr = curr[1:].replace("//", "/").replace("/", "_")
      if i > 1:
        name += ","
        tarSubjects += " "
      name += curr
      tarSubjects += "'" + args[i] + "'"
  
  home = os.path.expandvars("$HOME")
  backupDir = "/".join([home, "backups", name])
  
  if not os.path.isdir(backupDir):
    if os.path.exists(backupDir):
      raise Exception("%s is not a directory" % backupDir)
    else:
      os.makedirs(backupDir)
  
  now = str(datetime.datetime.fromtimestamp(time.time())).replace(' ', 'T')
  
  tarball = "%s/%s.tgz" % (backupDir, now)
  cmd = "tar --exclude stddbDart.tar.gz -czf %s %s" % (tarball, tarSubjects)
  (status, output) = commands.getstatusoutput(cmd)
  if waitCheck(status):
    print(output)
    (status, output) = commands.getstatusoutput("ls -hl %s" % tarball)
    print(output)
  else:
    print(>> sys.stderr, "%s failed: %s" % (cmd, output))
    raise Exception("tar command failed")
