#! /usr/bin/env python3

import sys
import logging
import argparse
import subprocess
import pandas

class Table(object):
  def __init__(self, *args):
    if len(args) == 1 and type(args[0]) in (list, tuple):
      self.headings = args[0]
    else:
      self.headings = args

    try:
      self.p = subprocess.Popen(['column', '-t', '-s\t'], stdin=subprocess.PIPE, text=True)
    except Exception as e:
      log.error(f'Error opening `column`: {e!s}. On Ubuntu, try installing the bsdmainutils package')
      exit(1)

    self.p.stdin.write('\t'.join([str(heading) for heading in self.headings]) + '\n')

  def add(self, *args):
    self.p.stdin.write('\t'.join([str(arg) for arg in args]) + '\n')

  def close(self):
    self.p.stdin.close()
    self.p.wait()

parser = argparse.ArgumentParser(description='Query sheets and columns in an Excel spreadsheet', epilog='Required packages: pandas, openpyxl')
parser.add_argument('filenames', metavar='filename', nargs='+', help='One or more paths to Excel files')
parser.add_argument('-a', '--all', action='store_true', help='Display all cells')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

if not args.all:
  table = Table('Filename', 'Sheet', 'Column')

for filename in args.filenames:
  spreadsheet = pandas.read_excel(filename, sheet_name=None)
  for sheet_name in list(spreadsheet.keys()):
    sheet = spreadsheet[sheet_name]
    column_names = list(sheet.axes[1])
    if args.all:
      columns = {column_name: list(sheet[column_name]) for column_name in column_names}
      for row in range(len(columns[column_names[0]])):
        for column in columns:
          print(f'{filename!r} {sheet_name!r} {row} {column!r} {columns[column][row]!r}')
    else:
      for column_name in column_names:
        table.add(filename, sheet_name, column_name)

if not args.all:
  table.close()
