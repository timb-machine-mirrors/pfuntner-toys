#! /usr/bin/env python3

import re
import sys
import math
import json
import logging
import argparse
import datetime
import subprocess

def run(cmd):
  if isinstance(cmd, str):
    cmd = cmd.split()
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = p.communicate()
  stdout = stdout.decode('utf-8')
  stderr = stderr.decode('utf-8')
  rc = p.wait()
  if rc != 0:
    log.error('{cmd} failed: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
    exit(1)
  else:
    log.debug('{cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Extract all commits into local branches')
parser.add_argument('-c', '--commits', dest='commits', action='append', help='One or more commits (can be comma-separated)')
parser.add_argument('-j', '--json', dest='json', action='store_true', help='Display output in JSON form')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('cmd', nargs='?', help='Command to run after each checkout')
parser.add_argument('args', metavar='arg', nargs='*', help='Arguments for command')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

commit_regexp = re.compile('^commit\s([a-f0-9]{40})$')
date_regexp = re.compile('^Date:\s+(\w{3} \w{3} \d{1,2} \d{2}:\d{2}:\d{2} \d{4}) ([-+]\d{2})(\d{2})$')

commits = []
for curr in args.commits or []:
  commits += curr.split(',')

commit = None
date = None
output = []

(rc, stdout, stderr) = run('git log .')
for line in stdout.splitlines():
  """
  commit abdd398a89e618811dbbd057a5d5af7365f380f5
  Author: John Pfuntner <jpfuntne@cisco.com>
  Date:   Tue Mar 26 15:08:22 2019 -0400
  
      Creating --version option
  """
  
  match = commit_regexp.search(str(line))
  if match:
    new_commit = match.group(1)
    if commit:
      sys.stderr.write('Encountered {new_commit} before closing out {commit}'.format(**locals()))
      exit(1)
    if (not commits) or (new_commit in commits):
      commit = new_commit
      log.info('Encountered {commit}'.format(**locals()))
    else:
      log.debug('Ignoring commit {new_commit} because it is not in the list of desired commits'.format(**locals()))
  else:
    match = date_regexp.search(str(line))
    if match:
      date = datetime.datetime.strptime(match.group(1), '%a %b %d %H:%M:%S %Y')
      offset_hours = int(match.group(2))
      offset_minutes = math.copysign(int(match.group(2)), offset_hours)
      date -= datetime.timedelta(hours=offset_hours, minutes=offset_minutes)
      if commit:
        log.info('Encountered {date}'.format(**locals()))

        if args.json:
          output.append({
            'commit': commit,
            'date': str(date),
          })
        else:
          print('{commit} {date}'.format(**locals()))
        run('git checkout {commit} -b {commit}'.format(**locals()))
        if args.cmd:
          (rc, stdout, stderr) = run([args.cmd] + args.args)
          if args.json:
            output[-1]['stdout'] = stdout
          else:
            sys.stdout.write(stdout)

        commit = None
        date = None

if args.json:
  print(json.dumps(output, indent=2, sort_keys=True))
