#! /usr/bin/env python3

import re
import sys
import json
import getopt
import signal
import logging
import argparse
import datetime
import subprocess

from gityup import Git
from table import Table

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

parser = argparse.ArgumentParser(description='Report on files in git commits')
parser.add_argument('-s', '--summary', action='store_true', help='Summarize report')
parser.add_argument('-f', '--files-only', action='store_true', help='Report on files only')
parser.add_argument('-j', '--json', action='store_true', help='Product JSON output')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
(args, unknown_args) = parser.parse_known_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

gitlog = Git(log).parse_log(unknown_args)

commit = None
author = None
date = None
text = ""
files = []

if args.json:
  root = []
else:
  table = Table('Commit', 'Author', 'Date', 'Text', 'File')

for curr in gitlog:
  (commit, author, date, text) = (curr['commit'], curr['author'], curr['utc_date'], (curr['messages'] or [''])[0])
  for file in curr.get('files', []):
    if args.json:
      root.append({
        'commit': commit,
        'author': author,
        'date': date,
        'text': text,
        'file': file['name'],
      })
    else:
      table.append(commit, author, date, text, file['name'])

if args.json:
  print(json.dumps(root))
else:
  print(str(table), end='')
