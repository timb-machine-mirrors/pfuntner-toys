#! /usr/bin/env python3

import json
import signal
import logging
import argparse
import subprocess

from instances import Instances

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))

  p = None
  try:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  except Exception as e:
    (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

  if p:
    if stdin:
      p.stdin.write(stdin.encode())
    if capture:
      (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    else:
      (stdout, stderr) = ('', '')
    rc = p.wait()

  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Delete an AWS EC2 instance')
parser.add_argument('name', help='Name or ID of instance')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

id = args.name

instances_class = Instances(log)
instances = instances_class.get_instances()
for instance in instances:
  if instance.provider == "aws" and instance.name == id:
    id = instance.id
    log.info(f'Overriding ID with {instance!s}')
  else:
    log.info(f'Skipping {instance!s}')

cmd = [
  'aws', 'ec2', 'terminate-instances',
  '--instance-ids', id
]

(rc, stdout, stderr) = run(cmd)
if rc == 0:
  try:
    """
       {
           "TerminatingInstances": [
               {
                   "InstanceId": "i-1234567890abcdef0",
                   "CurrentState": {
                       "Code": 32,
                       "Name": "shutting-down"
                   },
                   "PreviousState": {
                       "Code": 16,
                       "Name": "running"
                   }
               }
           ]
       }
    """
    resp = json.loads(stdout).get('TerminatingInstances', {})
  except Exception as e:
    log.error(f'''{cmd} rc=0 but couldn't parse stdout: {stdout!r}, {stderr!r}''')
    exit(1)

  instance_id = resp[0].get('InstanceId')
  old_state = resp[0].get('PreviousState', {}).get('Name')
  new_state = resp[0].get('CurrentState', {}).get('Name')
  print(f'Stopped {instance_id}: {old_state} => {new_state}')

  # rename the instance
  cmd = ['aws', 'ec2', 'create-tags', '--resources', id, '--tags', 'Key=Name,Value=TERMINATED']
  (rc, stdout, stderr) = run(cmd)
  if rc == 0:
    print('Instance renamed')
  else:
    log.error(f'{cmd} failed: {rc}, {stdout!r}, {stderr!r}')
else:
  log.error(f'{cmd} failed: {rc}, {stdout!r}, {stderr!r}')
  exit(1)
