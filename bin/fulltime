#! /usr/bin/env python

import re
import string
import logging
import argparse
import subprocess

def run(cmd):
  if isinstance(cmd, basestring):
    cmd = cmd.split()

  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = p.communicate()
  rc = p.wait()
  log.debug('{cmd} {rc} {stdout!r} {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

def test(regexp_var, line):
  regexp = globals()[regexp_var]
  match = regexp.search(line)
  log.debug('{regexp_var}: {groups} {line!r}'.format(groups=match.groups() if match else None, **locals()))

executable = '/usr/bin/time'

cat_regexp = re.compile('^\s{2,}([a-zA-Z/]+)\s*$')
format_regexp = re.compile('^\s{2,}%?([a-zA-Z])\s{2,}(?:\(Not in tcsh\.\) )?(\S.*)$')
multiblank = re.compile('\s{2,}')

parser = argparse.ArgumentParser(description='Utilize time utility formatting')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('cmd', help='Command to execute')
parser.add_argument('args', metavar='arg', nargs='*', help='Command arguments')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

(rc, stdout, stderr) = run(['man', executable])
lines = (stdout + stderr).splitlines()
if (rc != 0) or (not lines):
  log.error('`time -f` is not supported')
  exit(1)

cat = None

format_string = ''

for (pos, line) in enumerate(lines):
  # log.debug('Testing {line!r}'.format(**locals()))
  match = cat_regexp.search(line)
  if match:
    cat = match.group(1)
    log.debug('Captured category {cat!r}'.format(**locals()))

    format_string += ('\n\n' if format_string else '') + cat
  else:
    match = format_regexp.search(line)
    if match:
      char = match.group(1)
      description = match.group(2).strip()
      if (description[-1] != '.') and (pos < len(lines)):
        # log.debug('Description might be continued...: {description!r}'.format(**locals()))
        # log.debug('Examining: {!r}'.format(lines[pos+1][:match.start(2)+2]))
        if all(map(lambda c: c in string.whitespace, lines[pos+1][:match.start(2)])):
          description += ' ' + lines[pos+1].strip()
      description = multiblank.sub(' ', description).replace('%', '%%')
      log.debug('Captured format {char!r}: {description!r}'.format(**locals()))
      
      format_string += '\n  %{char}: {description}'.format(**locals())

if format_string:
  log.debug('format_string: {format_string!r}'.format(**locals()))

  p = subprocess.Popen([executable, '-f', format_string, args.cmd] + args.args)
  p.wait()
else:
  log.error('empty format string')
  exit(1)
