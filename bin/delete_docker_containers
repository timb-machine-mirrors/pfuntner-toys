#! /usr/bin/env python

import re
import sys
import logging
import argparse
import subprocess

def run(cmd, capture=True):
  if isinstance(cmd, basestring):
    cmd = cmd.split()
  log.debug('Running: {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None)
  (stdout, stderr) = p.communicate()
  rc = p.wait()
  log.debug('{cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='delete_docker_containers')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

(rc, stdout, stderr) = run('docker ps -a')
if (rc != 0) or stderr:
  parser.error('`docker ps -a` failed: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
lines = stdout.splitlines()
if len(lines) > 1:
  sys.stdout.write(stdout)

  sys.stdout.write('\nRemove all containers? ')
  ans = sys.stdin.readline()
  if re.match('y', ans, flags=re.IGNORECASE):
    (rc, stderr, stderr) = run(['docker', 'rm', '-f'] + [line.split()[0] for line in lines[1:]], capture=False)
    exit(rc)
else:
  print 'No docker containers'
