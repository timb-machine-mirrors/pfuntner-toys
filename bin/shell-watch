#! /usr/bin/env python3

DEFAULT_THRESHOLD = 300 # maximum time in seconds the command can run
DEFAULT_INTERVAL = 15   # interval in seconds between checks to see if command is still running

import time
import signal
import logging
import argparse
import datetime
import threading
import subprocess

class EchoThread(threading.Thread):
  def __init__(self, label, stream):
    self.label = label
    self.stream = stream
    super().__init__()
    log.debug(f'EchoThread initialized for {self.label}')
    self.start()

  def run(self):
    log.debug(f'EchoThread {self.ident} starting for {self.label}')
    while True:
      line = self.stream.readline()
      if line:
        line = line.decode('utf-8').strip()
        log.info(f'Command {self.label}: {line!r}')
      else:
        break
    log.debug(f'EchoThread {self.ident} finishing')

parser = argparse.ArgumentParser(description='Watch a command with a timeout')
parser.add_argument('-t', '--threshold', type=float, default=DEFAULT_THRESHOLD, help=f'Max threshold for command (default: {DEFAULT_THRESHOLD} seconds)')
parser.add_argument('-i', '--interval', type=float, default=DEFAULT_INTERVAL, help=f'Interval between checks (default: {DEFAULT_INTERVAL} seconds)')
parser.add_argument('command', help='Shell command as a single string')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.INFO - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

p = subprocess.Popen(args.command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
start = datetime.datetime.now()
log.info(f'Started {args.command!r} as pid {p.pid}')
out_thread = EchoThread('stdout', p.stdout)
err_thread = EchoThread('stderr', p.stderr)

time.sleep(args.interval)
while p.poll() is None:
  log.info('Command still running')
  now = datetime.datetime.now()
  if (now-start).total_seconds() > args.threshold:
    log.info(f'Command has exceeded {args.threshold} seconds')
    p.kill()
    break
  else:
    time.sleep(args.interval)

elapsed = datetime.datetime.now()-start
status = p.wait()
log.info(f'Command ended with {status} after {elapsed!s}')
