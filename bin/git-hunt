#! /usr/bin/env python3

import re
import os
import sys
import glob
import signal
import logging
import argparse

from gityup import Git

import bruno_tools

def run(cmd):
  (rc, stdout, stderr) = bruno_tools.run(cmd)
  if rc != 0:
    parser.error(f'{cmd!r} failed: {rc=}, {stdout=}, {stderr=}')
  return(rc, stdout, stderr)

def dive(paths):
  ret = list()
  for path in paths:
    if os.path.isfile(path):
      ret.append(path)
    elif os.path.isdir(path):
      for child in os.listdir(path):
        ret += dive(os.path.join(path), child)

  return ret

parser = argparse.ArgumentParser(description='Hunt commits for a regular expression')
parser.add_argument('-d', '--depth', type=int, help='Number of commits to search')
parser.add_argument('regexp', help='Regular expression pattern')
parser.add_argument('paths', metavar='path', nargs='*', help='Paths to zero or more files')
parser.add_argument('-B', '--before', type=int, default=0, help='Number of lines to display before each hit')
parser.add_argument('-C', '--context', type=int, default=0, help='Number of lines to display before and after each hit')
parser.add_argument('-A', '--after', type=int, default=0, help='Number of lines to display after each hit')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if args.context and (args.before or args.after):
  parser.error('Do not specify -C with -A or -B')

if args.context:
  args.before = args.context
  args.after = args.context

regexp = re.compile(args.regexp)

commits = Git(log).parse_log()

spacer = ''

for (pos, commit) in enumerate(commits[:args.depth] if args.depth is not None else commits):
  log.info(f'{commit["commit"]} {commit["utc_date"]}')

  if pos > 0:
    (rc, stdout, stderr) = run(f'git checkout -b {commit["commit"]} {commit["commit"]}')

  paths = list()
  for curr in args.paths or '*':
    paths += dive(glob.glob(curr))

  for path in paths:
    with open(path) as stream:
      lines = stream.read().splitlines()
      for linenum in range(len(lines)):
        if regexp.search(lines[linenum]):
          print(spacer, end='')
          if args.before or args.after:
            spacer = ('-'*80) + '\n'

          for hit_linenum in range(linenum-args.before, linenum+args.after+1):
            if hit_linenum >= 0 and hit_linenum < len(lines):
              print(f'{commit["commit"]} {path}:{hit_linenum+1} {lines[hit_linenum]}')   

  if pos > 0:
    (rc, stdout, stderr) = run('git checkout -')
    (rc, stdout, stderr) = run(f'git branch -D {commit["commit"]}')
