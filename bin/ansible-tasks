#! /usr/bin/env python3

import re
import sys
import logging
import argparse

from table import Table

class Task(object):
  def __init__(self, task_type, role, name):
    self.type = task_type.lower()
    self.role = re.sub('\s:\s$', '', role or '')
    self.name = name
    self.hosts = {}

  def __str__(self):
    return '{self.type} {self.name} {self.hosts}'.format(**locals())

  def __eq__(self, other):
    return (self.type == other.type) and (self.role == other.role) and (self.name == other.name)

def remove_packer_overhead(s):
  match = packer_regexp.search(str(s))
  if match:
    return match.group(1)
  else:
    return s

def process(filename=None):
  stream = open(filename) if filename else sys.stdin
  host_prefix = (filename + ' ') if filename else ''

  task = None
  for line in stream.read().splitlines():
    line = remove_packer_overhead(line)
    match = task_regexp.search(str(line))
    log.debug('task match: {groups} {line!r}'.format(groups=match.groups() if match else None, **locals()))
    if match:
      task = Task(*match.groups())
      for old_task in tasks:
        if old_task == task:
          task = old_task
          break
      else:
        tasks.append(task)
    else:
      match = host_regexp.search(str(line))
      log.debug('host match: {groups} {line!r}'.format(groups=match.groups() if match else None, **locals()))
      if match and tasks:
        assert task
        host = match.group(2)
        host_match = host_simplifier_regexp.search(str(host))
        if host_match:
          host = host_match.group(1)
        task.hosts[host_prefix + host] = {'status': match.group(1), 'item': match.group(3) }

  if filename:
    stream.close()

parser = argparse.ArgumentParser(description='Scrape info from Ansible playbook task output')
parser.add_argument('files', metavar='file', nargs='*', help='Zero or more Ansible output files')
parser.add_argument('-v', '--verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

task_regexp = re.compile('^(?:RUNNING\s+)?(\S+)\s+\[([^:]*\s:\s)?\s*(.*)\]\s+\*{5,}$')

"""
2020-10-01 10:44:13,927 DEBUG /home/centos/bin/ansible-tasks:49 host match: ('ok', 'localhost') 'ok: [localhost]'
2020-10-01 10:44:13,927 DEBUG /home/centos/bin/ansible-tasks:49 host match: ('ok', 'localhost') "ok: [localhost] => (item=[u'item1.1', u'item2.1', u'item3.1']) => {"
"""
host_regexp = re.compile('^([a-z]+):\s+\[([^\]]*)\](?: => \(item=\[(.+)\]\) => \{)?')

# Remove packer overhead if necessary
packer_regexp = re.compile('^\x1b\[\d+;\d+2m\s+\S+:\s(.*)\x1b\[\d+m$')

# Simplify host: [foo -> bar] => [foo]
host_simplifier_regexp = re.compile('^(\S+)\s+->\s+\S+$')

tasks = []

if args.files:
  list(map(process, args.files))
else:
  if sys.stdin.isatty():
    parser.error('stdin must be redirected if no files are specified')
  process()

if tasks:
  log.info(tasks[-1])

hosts = set()
for task in tasks:
  for host in task.hosts.keys():
    hosts.add(host)
hosts = sorted(list(hosts))

table = Table('Task type', 'Role', 'Task', *hosts)
for task in tasks:
  row = [task.type, task.role, task.name]
  for host in hosts:
    row.append(task.hosts.get(host, {'status': '', 'item': None})['status'])
  table.add(row)
sys.stdout.write(str(table))
