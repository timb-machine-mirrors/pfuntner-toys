#! /usr/bin/env python3

import re
import sys
import logging
import argparse
import subprocess

def run(cmd):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Perform git push')
parser.add_argument('-f', '--force', action='store_true', help='Use `git push --force`')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

branch_regexp = re.search('^\*\s+(\S+)', re.MULTILINE)
(rc, stdout, stderr) = run('git branch')
match = branch_regexp.search(stdout)
if match:
  branch = match.group(1)
  log.info(f'Current branch: {branch}')

  cmd = f'git push origin {branch}'
  if args.force:
    cmd += ' --force'

  (rc, stdout, stderr) = run(cmd)
  sys.stdout.write(stdout)
  sys.stderr.write(stderr)
else:
  parser.error('Could not determine current branch')
