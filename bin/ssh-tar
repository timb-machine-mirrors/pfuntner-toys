#! /usr/bin/env python3

import sys
import gzip
import shlex
import base64
import signal
import logging
import argparse
import subprocess

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = shlex.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))

  p = None
  try:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  except Exception as e:
    (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

  if p:
    if stdin:
      p.stdin.write(stdin.encode())
      p.stdin.close()
    if capture:
      (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    else:
      (stdout, stderr) = ('', '')
    rc = p.wait()

  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(
  description='tar up files on a remote system, writing tarball to stdout',
  epilog=f'Usage:\n  $ {sys.argv[0]} -q TARGET FILE1 ... | tar -tf -',
  formatter_class=argparse.RawTextHelpFormatter,
)
parser.add_argument('target', help='Remote system')
parser.add_argument('files', metavar='file', nargs='+', help='One or more remote files')
parser.add_argument('-b', '--become', action='store_true', help='Escalate to root on remote system')
parser.add_argument('-q', '--quiet', action='store_true', help='Use ssh --quiet option')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if sys.stdout.isatty():
  log.error('stdout must be redirected')
  exit(1)

(rc, stdout, stderr) = run(
  ['ssh'] +
  (['-q'] if args.quiet else []) +
  [args.target, '--', 'set -o pipefail; '] +
  (['sudo'] if args.become else []) +
  ['tar', '-czf', '-'] +
  args.files +
  ['|', 'base64']
)
if rc == 0:
  print(''.join([chr(byte) for byte in gzip.decompress(base64.b64decode(stdout))]), end='')
else:
  print(stderr, file=sys.stderr, end='')
  exit(1)
