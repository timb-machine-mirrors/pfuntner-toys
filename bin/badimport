#! /usr/bin/env python

import re
import os
import signal
import logging
import argparse
import subprocess

def process(filename):
  global output

  if os.path.isfile(filename):
    data = ''
    try:
      with open(filename) as stream:
        data = stream.read()
    except Exception as e:
      log.error('Caught `{e!s}` trying to read {filename!r}'.format(**locals()))
    hits = regexp.findall(data)
    log.info('imports for {filename}: {hits}'.format(**locals()))
    for hit in hits:
      if not re.search('{hit}\.'.format(**locals()), data, re.MULTILINE):
        log.debug('{filename} does not use {hit}'.format(**locals()))
        output.write('{filename} {hit}\n')
  else:
    log.error('{filename!r} is not a file'.format(**locals()))

parser = argparse.ArgumentParser(description='Scan Python code for unnecessary `import`s')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('files', metavar='file', nargs='+', help='One or more Python scripts')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

regexp = re.compile('^(?:from\s+\w+\s+)?import\s+(\w+)', re.MULTILINE)

pipe = os.pipe()
output = os.fdopen(pipe[1], 'w')
p = subprocess.Popen(['column'], stdin=pipe[0])
map(process, args.files)
output.close()
log.debug('Waiting for `column` to end')
p.wait()
