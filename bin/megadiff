#! /usr/bin/env python3

import os
import sys
import logging
import argparse
import subprocess

def run(cmd):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

def listdir(dir):
  ret = []
  basename = os.path.basename(dir)
  if not args.hidden and basename != '.' and basename.startswith('.'):
    log.info(f'Ignoring {dir!r}')
  else:
    ret = os.listdir(dir)
    if not args.hidden:
      pos = 0
      while pos < len(ret):
        if ret[pos].startswith('.'):
          del ret[pos]
        else:
          pos += 1
  return ret

def block(s):
  s = str(s)
  print('*' * (len(s)+4))
  print(f'* {s} *')
  print('*' * (len(s)+4))

def compare(file1, file2, report_missing_only):
  log.debug(f'compare(file1={file1!r}, file2={file2!r}, report_missing_only={report_missing_only})')
  if report_missing_only:
    if not os.path.isfile(file2):
      block(f'No {file2!r} to match {file1!r}')
  elif os.path.isfile(file2):
    log.info(f'Compare {file1!r} against {file2!r}')
    cmd = ['diff', file1, file2]
    (rc, stdout, stderr) = run(cmd)
    if rc != 0:
      block(cmd)
      sys.stdout.write(stdout)
      sys.stderr.write(stderr)
      print('')
  elif os.path.exists(file2):
    parser.error(f'{file2!r} is an unsupported file')
  else:
    log.warning('No {file2!r} to match {file1!r}')

def dive(tree1, tree2, paths=None, report_missing_only=False):
  log.debug(f'dive(tree1={tree1!r}, tree2={tree2!r}, paths={paths}, report_missing_only={report_missing_only})')
  if paths is None:
    if os.path.isfile(tree1):
      compare(tree1, tree2, report_missing_only)
    elif os.path.isdir(tree1):
      dive(tree1, tree2, paths=listdir(tree1), report_missing_only=report_missing_only)
    elif not report_missing_only:
      if os.path.exists(tree1):
        parser.error(f'{tree1!r} is an unsupported file')
      else:
        parser.error(f'{tree1!r} does not exist')
  else:
    for child in paths:
      path = os.path.join(tree1, child)
      if os.path.isfile(path):
        compare(path, os.path.join(tree2, child), report_missing_only)
      elif os.path.isdir(path):
        dive(path, os.path.join(tree2, child), None, report_missing_only=report_missing_only)
      elif not report_missing_only:
        if os.path.exists(path):
          parser.error(f'{path!r} is an unsupported file')
        else:
          parser.error(f'{path!r} does not exist')

parser = argparse.ArgumentParser(description='Perform diff on two trees, ignoring files')
parser.add_argument('tree1', help='Path to tree 1')
parser.add_argument('tree2', help='Path to tree 2')
parser.add_argument('-x', '--exclude', nargs='*', help='Specify regular filename expressions to exclude from search')
parser.add_argument('-H', '--hidden', action='store_true', help='Process `hidden files`')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

dive(args.tree1, args.tree2)
dive(args.tree2, args.tree1, report_missing_only=True)
