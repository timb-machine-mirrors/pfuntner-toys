#! /usr/bin/env python3

import re
import sys
import json
import signal
import string
import logging
import argparse

digits = string.digits + '.-'
alphanumerics = string.ascii_letters + string.digits + '_'

class Buffer(object):
  def __init__(self):
    self.pos = 0
    self.char = ''
    if args.strings and args.file:
      parser.error('Specify --file or strings on command line but not both')

    if args.strings:
      data = ' '.join(args.strings)
    elif args.file:
      with open(args.file) as stream:
        data = stream.read()
    else:
      if sys.stdin.isatty():
        parser.error('stdin must be redirected if you do not specify --file or strings on command line')
      data = sys.stdin.read()

    # package has a weird habit of obfuscating commas for some stupid reason
    data = data.replace('%!(PACKER_COMMA)', ',')

    self.stream = [c for c in data]
    self.buf = []

  def get(self):
    c = ''
    if self.buf:
      c = self.buf.pop(0)
      self.pos += 1
    elif self.stream:
      c = self.stream.pop(0)
      self.pos += 1
    self.char = c
    return c

  def next_nonwhitespace(self):
    c = ''
    while True:
      c = self.get()
      if c == '' or c not in string.whitespace:
        break
    return c

  def next_whitespace(self):
    c = ''
    while True:
      c = self.get()
      if c == '' or c in string.whitespace:
        break
    return c

  def push(self, s):
    for c in s:
      self.buf.append(c)
      self.pos -= 1

def parse_string(buf):
  escaped = False
  done = False
  root = ''
  while not done:
    c = buf.get()
    if c:
      if not escaped and c == '\\':
        escaped = True
      elif escaped or c != '"':
        root += c
        escaped = False
      else:
        done = True
    else:
      raise Exception('Not string element')
    log.debug(f'c: {c!r}, root: {root}')
  return root

def parse_number(buf):
  done = False
  root = ''
  while not done:
    c = buf.get()
    if c != '' and c in digits:
      root += c
    else:
      done = True
      buf.push(c)
    log.debug(f'c: {c!r}, root: {root}')
  if root:
    root = re.sub('^0+(?=\d)', '', root)
    root = eval(root)
  else:
    raise Exception('Not number element')
  return root

def parse_bool(buf):
  done = False
  root = ''
  while not done:
    c = buf.get()
    if c != '' and c in alphanumerics:
      root += c
    else:
      done = True
      buf.push(c)
    log.debug(f'c: {c!r}, root: {root}')
  root = root.title()
  if root in ['True', 'False']:
    root = eval(root)
  else:
    raise Exception('Not boolean element')
  return root

def parse_none(buf):
  done = False
  root = ''
  while not done:
    c = buf.get()
    if c != '' and c in alphanumerics:
      root += c
    else:
      done = True
      buf.push(c)
    log.debug(f'c: {c!r}, root: {root}')
  root = root.lower()
  if root == 'null':
    root = None
  else:
    raise Exception('Not None element')
  return root

def parse_list(buf):
  done = False
  root = []

  c = buf.next_nonwhitespace()
  if c == ']':
    done = True  # empty list
  else:
    buf.push(c)

  while not done:
    log.debug(f'list root is now {root}')
    datum = parse_root(buf)
    log.debug(f'Adding {datum!r} to list')
    root.append(datum)
    c = buf.next_nonwhitespace()
    if c == ',':
      pass # read next element
    elif c == ']':
      done = True
    else:
      raise Exception('Not list object')
  return root

def parse_dict(buf):
  done = False
  root = {}

  c = buf.next_nonwhitespace()
  if c == '}':
    done = True # empty dict
  else:
    buf.push(c)

  while not done:
    log.debug(f'dict root is now {root}')

    key = parse_root(buf)

    if isinstance(key, str):
      c = buf.next_nonwhitespace()
      if c == ':':
        datum = parse_root(buf)
        log.debug(f'Adding {key!r}:{datum!r} to dict')
        root[key] = datum
        c = buf.next_nonwhitespace()
        if c == ',':
          pass # read next element
        elif c == '}':
          done = True
        else:
          raise Exception('Not dict object')
      else:
        raise Exception('Not dict object')
    else:
      raise Exception('Not dict object')
  return root

def parse_root(buf):
  root = None
  c = ''

  done = False
  while not done:
    c = buf.next_nonwhitespace()

    if c:
      if c == '"':
        root = parse_string(buf)
        done = True
      elif c in digits:
        buf.push(c)
        root = parse_number(buf)
        done = True
      elif c in ['t', 'T', 'f', 'F']:
        buf.push(c)
        root = parse_bool(buf)
        done = True
      elif c in ['n', 'N']:
        buf.push(c)
        root = parse_none(buf)
        done = True
      elif c == '[':
        root = parse_list(buf)
        done = True
      elif c == '{':
        root = parse_dict(buf)
        done = True
      else:
        buf.next_whitespace()
    else:
      raise Exception('No more objects')

  return root

parser = argparse.ArgumentParser(description='Parse arbitrary JSON from stdin')
parser.add_argument('-f', '--file', help='File from which to read')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
parser.add_argument('strings', metavar='string', nargs='*', help='Zero or more strings')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

buf = Buffer()
while True:
  try:
    root = parse_root(buf)
    json.dump(root, sys.stdout, indent=2, sort_keys=True)
    print('')
  except Exception as e:
    if buf.buf + buf.stream:
      log.info(f'Caught {e!s} at position {buf.char!r} ({buf.pos})')
    else:
      break
