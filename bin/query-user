#! /usr/bin/env python3

import pwd
import sys
import signal
import logging
import argparse

class Table(object):
    """
    A class the produces pretty tabular output - nicely alinged rows and columns
    """
    def __init__(self, *headings):
        """
        Constructor that initializes the Table class

        Args:
            headings: A list of objects for the headings of the columns.  The number
            of headings must match the number of cells in each row.
        """
        # `self.data` is a list that contains all the cells in the table, including the headings
        self.data = [ [str(heading) for heading in headings] ]

        # `self.widths` contains the widths of each column - the maximum width of each cell in a column
        self.widths = [len(heading) for heading in self.data[0]]

    def add(self, *columns):
        """
        Adds a row to the table

        Args:
            columns: A list of objects for the cells in the row.
        """

        # assure the number of cells matches the number of headings
        assert len(columns) == len(self.data[0])

        self.data.append(list(map(str, columns)))

        # recalculate the maximum columns widths
        for (column_number, column) in enumerate(self.data[-1]):
            self.widths[column_number] = max(self.widths[column_number], len(column))

    def close(self):
        """
        Completes the table and prints out all the rows (including headings) and columns aligned according to
        the maximum width of each column
        """

        for row_num in range(len(self.data)):
            print('  '.join([self.data[row_num][col_num].ljust(self.widths[col_num]) for col_num in range(len(self.data[0]))]))

parser = argparse.ArgumentParser(description='Query users')
parser.add_argument('users', metavar='user', nargs='+', help='One or more users to query')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

table = Table('User', 'UID', 'GID', 'User name', 'Home directory', 'Shell', 'Encrypted password')
for user in args.users:
  user_struct = None
  try:
    user_struct = pwd.getpwnam(user)
  except Exception as e:
    log.warning(f'Error for {user!r}: {e!s}')

  if user_struct:
    table.add(
      user_struct.pw_name,
      user_struct.pw_uid,
      user_struct.pw_gid,
      user_struct.pw_gecos,
      user_struct.pw_dir,
      user_struct.pw_shell,
      user_struct.pw_passwd,
    )
table.close()
