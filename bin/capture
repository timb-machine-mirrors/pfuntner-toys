#! /usr/bin/env python3

import sys
import time
# import shlex
import signal
import logging
import argparse
import datetime
import threading
import subprocess

def human(specimen):
  if isinstance(specimen, datetime.timedelta):
    seconds = specimen.total_seconds()
    (minutes, seconds) = divmod(seconds, 60)
    return f'+{int(minutes):03}:{seconds:09.6f}'
  elif isinstance(specimen, datetime.datetime):
    return specimen.isoformat().replace('T', ' ')
  else:
    raise Exception(f'{specimen!r} is an unexpected {specimen.__class__.__name__}')

class OutputThread(threading.Thread):
  def __init__(self, label, input_pipe, output_stream):
    self.label = label
    self.input_pipe = input_pipe
    self.output_stream = output_stream
    super().__init__()
    self.start()

  def run(self):
    label = f' {self.label} ' if args.label else ' '
    buf = ''
    start_time = None
    last_time = None
    while True:
      log.info(f'{self.label}: reading')
      c = self.input_pipe.read(1)
      if c == b'':
        break
      else:
        c = c.decode()
        if start_time is None:
          start_time = datetime.datetime.now()
        buf += c
        if c == '\n':
          print(f'{human(start_time)} {human(start_time-(last_time or start_time))} {human(start_time-command_start_time)}{label}{buf}', file=self.output_stream, end='')
          buf = ''
          last_time = start_time
          start_time = None
    log.info(f'{self.label}: EOF')
    if buf:
      print(f'{human(start_time)} {human(start_time-(last_time or start_time))} {human(start_time-command_start_time)}{label}{buf}', file=self.output_stream)

parser = argparse.ArgumentParser(description='Capture stdout/stderr of a command')
parser.add_argument('command', nargs='+', help='Command and arguments')
parser.add_argument('-l', '--label', action='store_true', help='Label output lines with `stdout` or `stderr`')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

command_start_time = datetime.datetime.now()
try:
  # command = shlex.join(args.command)
  command = ' '.join(args.command)
  log.info(f'command={command!r}')
  options = {
    'stdout': subprocess.PIPE,
    'stderr': subprocess.PIPE,
    'bufsize': 0,
    'shell': True,
  }
  #  text: True,
  p = subprocess.Popen(command, **options)
except Exception as e:
  log.fatal(f'{command} failed: {e!s}')
  exit(1)

stdout = OutputThread('stdout', p.stdout, sys.stdout)
stderr = OutputThread('stderr', p.stderr, sys.stderr)

while stdout.is_alive() or stdout.is_alive():
  time.sleep(.05)

print(f'rc={p.wait()}, total elapsed time: {datetime.datetime.now()-command_start_time!s}')
