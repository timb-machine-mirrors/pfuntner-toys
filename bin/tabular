#! /usr/bin/env python3

"""
   Turn any text with lines that are made up of tokens separated by some
   regular expression.
"""

import re
import pdb
import sys
import json
import getopt

def syntax(msg=None):
  if msg:
    sys.stderr.write('{msg}\n'.format(**locals()))
  sys.stderr.write('Syntax: {pgm} [-r REGEXP] [--regexp REGEXP] [-m MAXCOLS] [--maxcols MAXCOLS] [-c CHAR] [--characters CHAR] [-b|--box] [-d|--debug] [-v|--verbose] [file ...]\n'.format(pgm=sys.argv[0]))
  exit(1)

def debug(msg):
  if verbose:
    sys.stderr.write('{msg}\n'.format(**locals()))

def show(expr):
  if verbose:
    value = eval(expr)
    sys.stderr.write('{expr}: {value}\n'.format(**locals()))

def uniprint(msg):
  print(msg.encode('utf-8'))

def process(stream):
  widths = []
  data = []
  for line in stream.read().splitlines():
    show('line')

    if maxcols:
      data.append([])
      while (len(data[-1])+1) < maxcols:
        match = regexp.search(line)
        if match:
          data[-1].append(line[:match.start()].strip())
          line = line[match.end():]
        else:
          break
      data[-1].append(line.strip())
    else:
      data.append([token.strip() for token in regexp.split(line)])

    show('data[-1]')
    for (pos, token) in enumerate(data[-1]):
      if len(widths) == pos:
        widths.append(len(token))
      else:
        widths[pos] = max(widths[pos], len(token))

  border = topTee.join([horizontal * (width+2) for width in widths])
  uniprint(topLeftCorner + border + topRightCorner)
  for row in data:
    middle = ''
    for pos in range(len(widths)):
      if middle:
        middle += ' ' + vertical + ' '
      middle += (row[pos] if pos < len(row) else '').ljust(widths[pos])
    uniprint(vertical + ' ' + middle + ' ' + vertical)
  border = bottomTee.join([horizontal * (width+2) for width in widths])
  uniprint(bottomLeftCorner + border + bottomRightCorner)

(opts, args) = ([], [])
try:
  (opts, args) = getopt.getopt(sys.argv[1:], 'r:bc:vdm:', ['regexp=', 'character=', 'box', 'verbose', 'debug', 'maxcols='])
except Exception as e:
  syntax('Caught: %s' % e)

horizontal = unichr(9473)
vertical = unichr(9475)

topLeftCorner = unichr(9487)
topRightCorner = unichr(9491)
topTee = unichr(9523)
bottomLeftCorner = unichr(9495)
bottomRightCorner = unichr(9499)
bottomTee = unichr(9531)

verbose = False
regexp = re.compile('\s+')
maxcols = 0

for (opt, arg) in opts:
  if opt in ['-r', '--regexp']:
    regexp = re.compile(arg)
  elif opt in ['-b', '--box']:
    horizontal = '-'
    vertical = '|'

    topLeftCorner = '+'
    topRightCorner = '+'
    topTee = '+'
    bottomLeftCorner = '+'
    bottomRightCorner = '+'
    bottomTee = '+'
  elif opt in ['-c', '--character']:
    horizontal = arg
    vertical = arg

    topLeftCorner = arg
    topRightCorner = arg
    topTee = arg
    bottomLeftCorner = arg
    bottomRightCorner = arg
    bottomTee = arg
  elif opt in ['-v', '--verbose']:
    verbose = not verbose
  elif opt in ['-d', '--debug']:
    pdb.set_trace()
  elif opt in ['-m', '--maxcols']:
    maxcols = int(arg)
  else:
    syntax('Unexpected option: {opt!r}'.format(**locals()))

if not args:
  if sys.stdin.isatty():
    syntax('stdin must be redirected if no files are specified')
  process(sys.stdin)
else:
  for filename in args:
    print('{filename}:'.format(**locals()))
    with open(filename) as stream:
      process(stream)
