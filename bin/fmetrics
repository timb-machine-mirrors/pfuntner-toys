#! /usr/bin/env python3

import re
import sys
import logging
import argparse
import subprocess

def process(file_name=None):
  global p

  log.debug('Processing {name}'.format(name=repr(file_name) if file_name else 'stdin'))

  chars = 0
  words = 0
  lines = 0
  max_line = 0
  min_line = None

  if file_name:
    p.stdin.write(file_name + '\t')
    stream = open(file_name)
  else:
    stream =  sys.stdin
  
  for line in stream.read().splitlines():
    log.debug('{line!r}'.format(**locals()))
    lines += 1
    chars += len(line) + 1
    words += len(word_regexp.findall(str(line)))
    max_line = max(max_line, len(line))
    min_line = len(line) if min_line is None else min(min_line, len(line))

  p.stdin.write('{chars}\t{words}\t{lines}\t{min_line}\t{max_line}\t{avg_line:.2f}\n'.format(
    avg_line=((chars*1.0)/lines) if lines else 0,
    **locals()
  ))

  if file_name:
    stream.close()

parser = argparse.ArgumentParser(description='Print metrics about files')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('files', metavar='file', nargs='*', help='Zero or more files')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

word_regexp = re.compile('\w+')

p = subprocess.Popen(['column', '-t', '-s\t'], stdin=subprocess.PIPE)

if args.files:
  p.stdin.write('File name\t')

p.stdin.write('Chars\tWords\tLines\tMin len\tMax len\tAvg len\n')

if args.files:
  list(map((process, args.files))
else:
  process()

log.debug('Wrapping up')
p.stdin.close()
p.wait()
