#! /usr/bin/env python

import sys
import re
import logging
import argparse
import xml.etree.ElementTree as ET

simplifyingRegexp = re.compile("\{[^{}]+\}(.+)$")

def simplify(s):
  ret = s
  if args.simple:
    match = simplifyingRegexp.match(s)
    if match:
      s = match.group(1)
  return s

def unravel(attribs):
  ret = ''
  if attribs:
    ret = " %s" % ' '.join(["%s=%s" % (key, repr(attribs[key])) for key in sorted(attribs.keys())])
  return ret

def visit(node, tags=[]):
  if node is not None:
    if args.flatten:
      print '/{tags}/{tag} {attrib} {text!r}'.format(tags='/'.join(tags), tag=node.tag, attrib=node.attrib, text=node.text.encode('utf-8') if node.text else '')
    else:
      sys.stdout.write("%s<%s%s>" % (' ' * (len(tags)*2), simplify(node.tag), unravel(node.attrib)))

    if len(node):
      if not args.flatten:
        sys.stdout.write('\n')
      for child in node:
        visit(child, tags+[node.tag])
    elif node.text == None:
      if not args.flatten:
        sys.stdout.write('\n')

    if not args.flatten:
      if node.text != None:
        sys.stdout.write(node.text.encode('utf-8'))
      else:
        sys.stdout.write("%s" % (' ' * (len(tags)*2)))
      sys.stdout.write("</%s>\n" % simplify(node.tag))

def process(f):
  visit(ET.fromstring(f.read()))

parser = argparse.ArgumentParser(description='See XML')
parser.add_argument('-s', '--simple', dest='simple', action='store_true', help='Simplify XML tag')
parser.add_argument('-f', '--flatten', dest='flatten', action='store_true', help='Flatten XML')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('filename', nargs='?', help='Specify file from which to read')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

if args.filename:
  with open(filename, "r") as f:
    process(f)
elif sys.stdin.isatty():
  parser.error('stdin must be directed if filename is not provided')
else:
  process(sys.stdin)
