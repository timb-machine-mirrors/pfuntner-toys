#! /usr/bin/env python3

import re
import sys
import json
import argparse

SIMPLE_TYPES = (str, unicode, int, float, bool)

def load(filename):
  global yaml

  ret = None

  if filename == '-':
    ret = json.load(sys.stdin.read())
  else:
    data = ''
    with open(filename) as stream:
      data = stream.read()

    try:
      if re.search(r'\.ya?ml', filename):
        if not yaml:
          yaml = __import__('yaml')
        ret = yaml.load(data)
      else:
        ret = json.loads(data)
    except Exception as e:
      sys.stderr.write('Caught `{e!s}` trying to parse {data!r}'.format(**locals()))
      exit(1)

  return ret

def emit(equal, path, msg):
  if (not equal) or args.report_all:
    print('/{path} {equal} {msg}'.format(path='/'.join(path), equal='+' if equal else '-', msg=msg))

def type_and_value(obj):
  return '{_type_}{value}'.format(_type_=type(obj), value=(' ' + repr(obj)) if type(obj) in SIMPLE_TYPES else '')

def unitype(obj):
  if isinstance(obj, unicode):
    return str
  return type(obj)

def compare(path, tree1, tree2):
  if unitype(tree1) == unitype(tree2):
    if isinstance(tree1, list):
      for item in range(max(len(tree1), len(tree2))):
        if item >= len(tree1):
          emit(False, path, 'Tree 1 is missing key {item}'.format(**locals()))
        elif item >= len(tree2):
          emit(False, path, 'Tree 2 is missing key {item}'.format(**locals()))
        else:
          emit(True, path, 'Key {item} present in both trees'.format(**locals()))
          compare(path + [str(item)], tree1[item], tree2[item])
    elif isinstance(tree1, dict):
      for item in sorted(set(tree1.keys()) | set(tree2.keys())):
        if item not in tree1:
          item = str(item)
          emit(False, path, 'Tree 1 is missing key {item!r}'.format(**locals()))
        elif item not in tree2:
          item = str(item)
          emit(False, path, 'Tree 2 is missing key {item!r}'.format(**locals()))
        else:
          emit(True, path, 'Key {item!r} present in both trees'.format(item=str(item)))
          compare(path + [str(item)], tree1[item], tree2[item])
    else:
      emit(tree1 == tree2, path, '{tree1!r} vs {tree2!r}'.format(**locals()))
  else:
    emit(False, path, 'Type mismatch: {type1} vs {type2}'.format(type1=type_and_value(tree1), type2=type_and_value(tree2)))

parser = argparse.ArgumentParser(description='Compare json/yaml files')
parser.add_argument('-a', '--all', dest='report_all', action='count', help='Report on everything - matches as well as differences')
parser.add_argument('file1', help='Path to file 1 or `-` for stdin')
parser.add_argument('file2', help='Path to file 2 or `-` for stdin')
args = parser.parse_args()

if (args.file1 == '-') and (args.file1 == '-'):
  sys.stderr.write('Files cannot both be stdin\n\n')
  parser.print_help(sys.stderr)
  exit(1)

args.report_all = bool((args.report_all or 0) % 2)

yaml = None
tree1 = load(args.file1)
tree2 = load(args.file2)

compare([], tree1, tree2)
