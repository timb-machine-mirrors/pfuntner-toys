#! /usr/bin/env python2

import subprocess
import datetime
import json
import sys
import getopt
import re
import time

def syntax():
  sys.stderr.write("Syntax: %s [-h|--host HOST] [-p|--port PORT] [-f|--from FROM] [-u|--until UNTIL] [-U|--user USER -P|--password PASSWORD -O|--org ORG -S|--space SPACE] [-n|--nulls] metric\n" % sys.argv[0])
  exit(1)

class TimeOnly:
  pattern = "%H:%M"

  @staticmethod
  def parse(s):
    ret = None
    try:
      if verbose:
        sys.stderr.write("Trying %s against %s\n" % (repr(s), repr(TimeOnly.pattern)))
      s = datetime.datetime.strftime(now, "%Y/%m/%dT") + s
      ret = datetime.datetime.strptime(s, "%Y/%m/%dT" + TimeOnly.pattern)
    except Exception as e:
      if verbose:
        sys.stderr.write("Caught %s\n" % repr(e))
      pass
    return ret

class DateAndTime:
  pattern = "%Y/%m/%dT%H:%M"

  @staticmethod
  def parse(s):
    ret = None
    try:
      if verbose:
        sys.stderr.write("Trying %s against %s\n" % (repr(s), repr(DateAndTime.pattern)))
      ret = datetime.datetime.strptime(s, DateAndTime.pattern)
    except Exception as e:
      pass
    return ret

class Relative:
  pattern = "^(\d+\.?\d*|\.\d+)([mhd])$"
  regexp = re.compile(pattern)

  @staticmethod
  def parse(s):
    ret = None
    if verbose:
      sys.stderr.write("Trying %s against %s\n" % (repr(s), repr(Relative.pattern)))
    match = Relative.regexp.search(s)
    if match:
      value = float(match.group(1))
      if match.group(2) == 'm':
        ret = now - datetime.timedelta(minutes = value)
      elif match.group(2) == 'h':
        ret = now - datetime.timedelta(hours = value)
      elif match.group(2) == 'd':
        ret = now - datetime.timedelta(days = value)
      else:
        assert ret, "%s (suffix of %s) is not 'm', 'h', or 'd'... how did the string pass the regexp?!" % (repr(match.group(2)), s)
    return ret

def timestampParse(arg):
  ret = None
  for parser in parsers:
    ret = parser.parse(arg)
    if ret:
      break

  if not ret:
    sys.stderr.write("%s was not parsed by %s\n" % (repr(arg), ", ".join([repr(parser.pattern) for parser in parsers])))
    syntax()

  return ret

parsers = [TimeOnly, DateAndTime, Relative]

dateFormatter = "%H:%M%Y%m%d"
now = datetime.datetime.utcnow()

host = "localhost"
port = 80
frm = None
until = None
nulls = True
verbose = False

protocol = "http"

bluemix = {}
bluemix["BLUEMIX_USERNAME"] = None
bluemix["BLUEMIX_PASSWORD"] = None
bluemix["BLUEMIX_ORG"] = None
bluemix["BLUEMIX_SPACE"] = None

metric = None

format = "json"

(opts, args) = ([], [])

try:
  (opts,args) = getopt.getopt(sys.argv[1:], "h:p:f:u:nvU:P:O:S:", ["host=", "port=", "from=", "until=", "nulls", "verbose", "user=", "password=", "org=", "space=", "format="])
except Exception as e:
  sys.stderr.write("Caught: %s\n" % repr(e))
  syntax()

for (opt,arg) in opts:
  if opt in ["-h", "--host"]:
    host = arg
  elif opt in ["-p", "--port"]:
    port = int(arg)
  elif opt in ["-f", "--from"]:
    frm = timestampParse(arg)
  elif opt in ["-u", "--until"]:
    until = timestampParse(arg)
  elif opt in ["-n", "--nulls"]:
    nulls = not nulls
  elif opt in ["-v", "--verbose"]:
    verbose = not verbose
  elif opt in ["-U", "--user"]:
    bluemix["BLUEMIX_USERNAME"] = arg
  elif opt in ["-P", "--password"]:
    bluemix["BLUEMIX_PASSWORD"] = arg
  elif opt in ["-O", "--org"]:
    bluemix["BLUEMIX_ORG"] = arg
  elif opt in ["-S", "--space"]:
    bluemix["BLUEMIX_SPACE"] = arg
  elif opt in ["--format"]:
    format = arg
    assert format in ["json", "raw"], "Unknown format type %s" % repr(format)
  else:
    sys.stderr.write("Don't know how to handle %s\n" % repr(opt))
    syntax()

if sum([0 if bluemix[key] == None else 1 for key in bluemix]) not in [0,4]:
  sys.stderr.write("Either specify user, password, org, and space options for Bluemix or none of them\n")
  syntax()

if len(args) != 1:
  sys.stderr.write("Please provide %s metric to query\n" % ("a" if len(args) == 0 else "exactly one"))
  syntax()

metric = args[0]

"""
dateFormatter = "%H:%M%Y%m%d"

# email timestamp: 2017/05/21 12:37AM
start = datetime.datetime(2017, 05, 20, 12, 00, 00)
stop = start + datetime.timedelta(days=1)

d1 = datetime.datetime.strftime(start, dateFormatter)
d2 = datetime.datetime.strftime(stop, dateFormatter)
cmd = ["curl", "-X" ,"POST" ,"http://localhost:8000/render?target=hyperledger.rtp.9_42_83_35.pfuntner1.cpu*.percent-user&from=%s&until=%s&format=json" % (d1, d2)]
"""

"""
cmd = ["curl", "-X" ,"POST" ,"http://localhost:80/render?target=local.random.value&format=json"]
cmd = ["curl", "-X" ,"POST" ,"http://localhost:80/render?target=hyperledger.rtp.*.*.*&format=json"]
# cmd = ["curl", "-X" ,"POST" ,"http://localhost:80/render?target=hyperledger.rtp.*.*.*&format=json&from=%s" % datetime.datetime.strftime(datetime.datetime(2017, 5, 2, 8, 14), dateFormatter)]
"""

login = {}
"""
  After successfully logging into Bluemix, these keys will be in the `login` dictionary:
    access_token
    logging_token
    organization_id
    space_id

  The login can return a proper JSON object but the login might have failed.
  The above keys will not be in the dictionary but another key called `errors` 
  will be there.
"""

if bluemix["BLUEMIX_USERNAME"]:
  protocol = "https"
  port = 443

  cmd = ["curl", "-k", "-q", "-XPOST", "-d", "user=%(BLUEMIX_USERNAME)s&passwd=%(BLUEMIX_PASSWORD)s&organization=%(BLUEMIX_ORG)s&space=%(BLUEMIX_SPACE)s" % bluemix, "https://%s/login" % host]

  if verbose:
    sys.stderr.write("%s\n" % cmd)

  attempts = 0
  while not login:
    assert attempts < 10, "Giving up after %d attempts" % attempts
    attempts += 1
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (stdout, stderr) = p.communicate()
    rc = p.wait()
    try:
      login = json.loads(stdout)
    except Exception as e:
      sys.stderr.write("Login #%d: Caught %s, rc: %d, stdout: %s, stderr: %s\n" % (attempts, repr(e), rc, repr(stdout), repr(stderr)))
      time.sleep(1)

  assert "errors" not in login, "Bluemix login error: %s" % login["errors"]
    
  if verbose:
    sys.stderr.write("Logged into Bluemix\n%s\n" % json.dumps(login, indent=2, sort_keys=True))

cmd = ["curl", "-X", "POST", "%s://%s:%d%s/render?target=%s&format=json" % (protocol, host, port, "/graphite" if login else "", metric)]

if login:
  cmd.insert(1, "--header")
  cmd.insert(2, "X-Auth-Token:" + login["access_token"])
  cmd.insert(3, "--header")
  cmd.insert(4, "X-Auth-Project-Id:" + login["space_id"])
  cmd.insert(5, "--header")
  cmd.insert(6, "X-Forwarded-Proto:https")

if frm:
  cmd[-1] += "&from=%s" % datetime.datetime.strftime(frm, dateFormatter)

if until:
  cmd[-1] += "&until=%s" % datetime.datetime.strftime(until, dateFormatter)

metrics = {}

if verbose:
  sys.stderr.write("%s\n" % cmd)

p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
(stdout, stderr) = p.communicate()
rc = p.wait()
try:
  if format == "json":
    metrics = json.loads(stdout)
except Exception as e:
  sys.stderr.write("Caught %s, rc: %d, stdout: %s, stderr: %s\n" % (repr(e), rc, repr(stdout), repr(stderr)))
  exit(1)

if format == "json":
  if not nulls:
    """
      Remove null metric values.  An example of the path to a metric value is: "/0/datapoints/0/0"
    """
    total = 0
    removed = 0
  
    for actual in metrics:
      curr = 0
      while curr < len(actual["datapoints"]):
        datum = actual["datapoints"][curr]
        total += 1
        if datum[0] == None:
          removed += 1
          del actual["datapoints"][curr]
        else:
          curr += 1
  
    if verbose:
      sys.stderr.write("Null removal has disposed of %d out of %d total data points\n" % (removed, total))
     
  print json.dumps(metrics, indent=2)
elif format == "raw":
  sys.stdout.write(json.dumps(json.loads(stdout), indent=2))
