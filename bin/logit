#! /usr/bin/env python3

import os
import sys
import logging
import argparse
import datetime
import subprocess

THRESHOLD = 2**30

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  if stdin:
    p.stdin.write(stdin.encode())
    p.stdin.close()
  if capture:
    (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  else:
    (stdout, stderr) = ('', '')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Write to a log, keeping archives when it gets too big')
parser.add_argument('-r', '--raw', action='store_true', help=f'Transfer stdin to output file as-is, no timestamp or repr()')
parser.add_argument('-s', '--size', type=int, default=THRESHOLD, help=f'Maximum size of log before archiving (default: {THRESHOLD})')
parser.add_argument('logfile', help=f'Path to log file')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

if sys.stdin.isatty():
  parser.error('stdin is not redirected')

if os.path.isfile(args.logfile) and os.path.getsize(args.logfile) > args.size:
  now = datetime.datetime.now().strftime('%Y%m%d%H%M%S%f')
  newname = f'{args.logfile}.{now}'
  run(['cp', '-pv', args.logfile, newname]) # use permissions of main file
  run(['gzip', '-v', newname])
  open(args.logfile, 'w').close()           # wipe out main file, retaining permissions

with open(args.logfile, 'a') as stream:
  while True:
    line = sys.stdin.readline()
    now = datetime.datetime.now().isoformat()
    if line:
      line = line.rstrip()
      print(line if args.raw else f'{now} {line!r}', file=stream)
    else:
      break
