#! /usr/bin/env python3

import re
import sys
import json
import signal
import logging
import argparse
import subprocess

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))

  p = None
  try:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  except Exception as e:
    (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

  if p:
    if stdin:
      p.stdin.write(stdin.encode())
    if capture:
      (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    else:
      (stdout, stderr) = ('', '')
    rc = p.wait()

  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Detect platform and distro of remote host')
parser.add_argument('hosts', nargs='+', help='Hosts to query')
parser.add_argument('-d', '--docker', action='store_true', help='Remote hosts are docker containers')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

"""
  # Determine the cloud service provider
  - name: Determine if running in AWS platform
    uri:
      url: http://169.254.169.254/latest/dynamic/instance-identity/document
      timeout: 5
    register: aws_uri_check
    failed_when: False

  - name: Determine if running in Google Cloud Platform
    uri:
      url: http://metadata.google.internal/computeMetadata/v1/instance/
      timeout: 5
      headers:
        Metadata-Flavor: "Google"
    register: gcp_uri_check
    failed_when: False

NAME="Ubuntu"
VERSION="20.04.1 LTS (Focal Fossa)"
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME="Ubuntu 20.04.1 LTS"
VERSION_ID="20.04"
HOME_URL="https://www.ubuntu.com/"
SUPPORT_URL="https://help.ubuntu.com/"
BUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"
PRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"
VERSION_CODENAME=focal
UBUNTU_CODENAME=focal
"""

result = dict()

release_info_regexp = re.compile(r'^([A-Z_]+)="(.*)"$', flags=re.MULTILINE)
major_release_regexp = re.compile(f'^(\d+)')

for host in args.hosts:
  result[host] = {
    'platform': None,
    'distro': None,
    'major_release': None,
    'arch': None,
  }

  distro = None
  release_info = dict()

  if args.docker:
    result[host]['platform'] = 'docker'
    (rc, stdout, stderr) = run(['docker', 'exec', host, 'bash', '-c', 'cat /etc/os-release'])
  else:
    (rc, stdout, stderr) = run(f'ssh -q {host} curl --connect-timeout 5 http://169.254.169.254/latest/dynamic/instance-identity/document')
    if rc == 0:
      result[host]['platform'] = 'aws'
    else:
      (rc, stdout, stderr) = run(f'ssh -q {host} curl --connect-timeout 5 http://metadata.google.internal/computeMetadata/v1/instance/')
      if rc == 0:
        result[host]['platform'] = 'gcp'

    (rc, stdout, stderr) = run(f'ssh -q {host} cat /etc/os-release')

  release_info = dict(release_info_regexp.findall(stdout))

  log.info(f'release_info: {release_info}')

  if release_info.get('NAME'):
    tokens = (release_info.get('NAME') or '').lower().split()
    result[host]['distro'] = ' '.join(tokens[0:1 if tokens[0] in ['centos', 'debian', 'ubuntu'] else 2])

  match = major_release_regexp.search(release_info.get('VERSION_ID') or '')
  if match:
    result[host]['major_release'] = int(match.group(1))

  if args.docker:
    (rc, stdout, stderr) = run(['docker', 'exec', host, 'bash', '-c', 'arch'])
  else:
    (rc, stdout, stderr) = run(f'ssh -q {host} arch')
  if stdout:
    result[host]['arch'] = stdout.strip()

json.dump(result, sys.stdout, indent=2, sort_keys=True)
print('')
