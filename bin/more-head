#! /usr/bin/env python3

import sys
import signal
import logging
import argparse
import subprocess

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))

  p = None
  try:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  except Exception as e:
    (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

  if p:
    if stdin:
      p.stdin.write(stdin.encode())
    if capture:
      (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    else:
      (stdout, stderr) = ('', '')
    rc = p.wait()

  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

def process(source):
  stream = None
  if isinstance(source, str):
    try:
      stream = open(source)
    except Exception as e:
      log.warning(f'Could not open {source!r}: {e!s}')
  else:
    stream = source

  if stream:
    print('\n'.join(stream.read().splitlines()[:lines-2]))
    if isinstance(source, str):
      stream.close()

parser = argparse.ArgumentParser(description='Display the top of stdin, filling the screen')
parser.add_argument('files', metavar='file', nargs='*', help='Zero or more files')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if not args.files and sys.stdin.isatty():
  parser.error('stdin must be redirected if no files are specified')

lines = 0
(rc, stdout, stderr) = run('tput lines')
if rc == 0:
  try:
    lines = int(stdout.strip())
  except:
    pass

if lines <= 1:
  log.error('Cannot determine screen size')
  exit(1)

if args.files:
  for (pos, filename) in enumerate(args.files):
    if len(args.files) > 1:
      if pos > 0:
        print()
      print(f'##### {filename} #####')
    process(filename)
else:
  process(sys.stdin)
