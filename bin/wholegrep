#! /usr/bin/env python

import re
import os
import logging
import argparse

def see(expr):
  value = eval(expr)
  log.debug('{expr}: {value!r}'.format(**locals()))

def process(filename):
  if os.path.isfile(filename):
    data = ''
    try:
      with open(filename, 'r') as stream:
        data = stream.read()
    except Exception as e:
      log.warning('Could not read {filename!r}: {e!s}'.format(**locals()))
    else:
      chosen = all([bool(regexp.search(data)) for regexp in includes]) and not any([bool(regexp.search(data)) for regexp in excludes])
      if args.all:
        print '{status} {filename}'.format(status='+' if chosen else '-', **locals())
      elif chosen:
        print filename
  else:
    log.warning('Not a file: {filename!r}'.format(**locals()))

parser = argparse.ArgumentParser(description='Scan files that include all required regexps, omit all undesirable regexps')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('-a', '--all', dest='all', action='store_true', help='Report on all files')
parser.add_argument('-i', '--include', dest='include', action='append', help='Specify a required regular expression')
parser.add_argument('-x', '--exclude', dest='exclude', action='append', help='Specify an undesireable regular expression')
parser.add_argument('--ignorecase', dest='ignorecase', action='store_true', help='Treat all regular expressions as case insensitive')
parser.add_argument('files', metavar='file', nargs='+', help='One or more files to scan')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

see('args.include')
see('args.exclude')
see('args.files')

if not (args.include or args.exclude):
  parser.error('Specify at least one regular expression')

includes = [re.compile(pat, flags=re.MULTILINE + (re.IGNORECASE if args.ignorecase else 0)) for pat in (args.include or [])]
excludes = [re.compile(pat, flags=re.MULTILINE + (re.IGNORECASE if args.ignorecase else 0)) for pat in (args.exclude or [])]
map(process, args.files)
