#! /usr/bin/env python3

import logging
import argparse
import subprocess

def run(cmd):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  # alternately, if trapping is conditional:
  # if trap:
  #   stdout = stdout.decode('utf-8')
  #   stderr = stderr.decode('utf-8')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

def banner(s):
  print('*' * (len(repr(s)) + 4))
  print(f'* {s!r} *')
  print('*' * (len(repr(s)) + 4))

formats = [
  ('%a', 'permission bits in octal (note \'#\' and \'0\' printf flags)'),
  ('%A', 'permission bits and file type in human readable form'),
  ('%b', 'number of blocks allocated (see %B)'),
  ('%B', 'the size in bytes of each block reported by %b'),
  ('%C', 'SELinux security context string'),
  ('%d', 'device number in decimal'),
  ('%D', 'device number in hex'),
  ('%f', 'raw mode in hex'),
  ('%F', 'file type'),
  ('%g', 'group ID of owner'),
  ('%G', 'group name of owner'),
  ('%h', 'number of hard links'),
  ('%i', 'inode number'),
  ('%m', 'mount point'),
  ('%n', 'file name'),
  ('%N', 'quoted file name with dereference if symbolic link'),
  ('%o', 'optimal I/O transfer size hint'),
  ('%s', 'total size, in bytes'),
  ('%t', 'major device type in hex, for character/block device special files'),
  ('%T', 'minor device type in hex, for character/block device special files'),
  ('%u', 'user ID of owner'),
  ('%U', 'user name of owner'),
  ('%w', 'time of file birth, human-readable; - if unknown'),
  ('%W', 'time of file birth, seconds since Epoch; 0 if unknown'),
  ('%x', 'time of last access, human-readable'),
  ('%X', 'time of last access, seconds since Epoch'),
  ('%y', 'time of last data modification, human-readable'),
  ('%Y', 'time of last data modification, seconds since Epoch'),
  ('%z', 'time of last status change, human-readable'),
  ('%Z', 'time of last status change, seconds since Epoch'),

  # Valid format sequences for file systems:
  ('%a', 'free blocks available to non-superuser (filesystem)'),
  ('%b', 'total data blocks in file system (filesystem)'),
  ('%c', 'total file nodes in file system (filesystem)'),
  ('%d', 'free file nodes in file system (filesystem)'),
  ('%f', 'free blocks in file system (filesystem)'),
  ('%i', 'file system ID in hex (filesystem)'),
  ('%l', 'maximum length of filenames (filesystem)'),
  ('%n', 'file name (filesystem)'),
  ('%s', 'block size (for faster transfers) (filesystem)'),
  ('%S', 'fundamental block size (for block counts) (filesystem)'),
  ('%t', 'file system type in hex (filesystem)'),
  ('%T', 'file system type in human readable form (filesystem)'),
]

parser = argparse.ArgumentParser(description='Test out unix stat command')
parser.add_argument('files', metavar='file', nargs='+', help='One or more files')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

for filename in args.files:
  banner(filename)
  for format, description in formats:
    (rc, stdout, stderr) = run(['stat', '--format', format, filename])
    stdout = stdout.rstrip()
    print(f'{format} {description:70} {stdout!r}')

  print('')
