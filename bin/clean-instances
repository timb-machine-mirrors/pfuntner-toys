#! /usr/bin/env python3

import re
import os
import sys
import signal
import logging
import argparse
import subprocess

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  if stdin:
    p.stdin.write(stdin.encode())
    p.stdin.close()
  if capture:
    (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  else:
    (stdout, stderr) = ('', '')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Clean all VM instances')
parser.add_argument('-f', '--force', action='count', help='Do not prompt for permission')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if not args.force:
  run(['banner', '--color', 'blue', 'Clean all instances?'], capture=False)
  resp = sys.stdin.readline().strip()
  log.info(f'resp: {resp!r}')

if args.force or re.search('^y(e(s?))?', resp, flags=re.IGNORECASE):
  run('sudo rm -fv /etc/ansible/hosts', capture=False)
  if os.path.exists('/etc/ansible/hosts.keep'):
    run(['sudo', 'cp', '-v', '/etc/ansible/hosts.keep', '/etc/ansible/hosts'], capture=False)
  if os.path.exists(os.path.expanduser('~/.ssh/config.keep')):
    run(['cp', '-v', os.path.expanduser('~/.ssh/config.keep'), os.path.expanduser('~/.ssh/config')], capture=False)
  else:
    run(['rm', '-fv', os.path.expanduser('~/.ssh/config')], capture=False)
  run('clean-known-hosts', capture=False)
else:
  print('Confirmation failed, no instances removed')
