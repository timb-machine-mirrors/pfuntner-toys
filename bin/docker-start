#! /usr/bin/env python3

import time
import logging
import argparse
import datetime
import subprocess

SLEEP_INTERVAL = 60*60*24*365 # 1 year in seconds

class Image(object):
  def __init__(self, line):
    """
      REPOSITORY  TAG  IMAGE ID            CREATED             SIZE
      foo         bar  e6e5c9479d74        40 hours ago        334MB
    """
    self.line = line
    tokens = line.split()
    self.repo = tokens[0]
    self.tag = tokens[1]
    self.image_id = tokens[2]

  def __str__(self):
    elements = [
      'image_id: {self.image_id}'.format(**locals()),
      'repo: {self.repo}'.format(**locals()),
      'tag: {self.tag}'.format(**locals()),
    ]
    return ', '.join(elements)
    
  def equal(self, s):
    log.debug('Checking {s!r} against `{self!s}`'.format(**locals()))
    return (s == self.image_id) or (s == '{self.repo}:{self.tag}'.format(**locals()))

def run(cmd, shell=False):
  if (not shell) and isinstance(cmd, str):
    cmd = cmd.split()
  elif shell and not isinstance(cmd, str):
    cmd = ' '.join(cmd)

  log.info('Running {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=shell)
  (stdout, stderr) = p.communicate()
  stdout = stdout.decode('utf-8')
  stderr = stderr.decode('utf-8')
  rc = p.wait()
  log.debug('Ran {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

def get_containers():
  (rc, stdout, stderr) = run('docker ps')
  return set([line.split()[0] for line in stdout.splitlines()[1:]])

parser = argparse.ArgumentParser(description='Start long running Docker container')
parser.add_argument('images', metavar='image', nargs='+', help='One or more Docker images')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

images = []
(rc, stdout, stderr) = run('docker images')
for line in stdout.splitlines()[1:]:
  images.append(Image(line))

log.debug('images: {}'.format([str(image) for image in images]))

for desired_image in args.images:
  for image in images:
    if image.equal(desired_image):
      break
  else:
    log.warning('No image: {desired_image!r}'.format(**locals()))
    break
  log.info('Creating container with image: {image!s}'.format(**locals()))

  old_containers = get_containers()
  log.debug('old containers: {}'.format(old_containers))
  now = datetime.datetime.now().strftime('%Y%m%d%H%M%S%f')
  run('nohup docker run --name "{image.repo}-{image.tag}-{now}" {image.image_id} bash -c "sleep {SLEEP_INTERVAL}" > /dev/null 2>&1 &'.format(**locals()), shell=True)
  time.sleep(1)
  new_containers = get_containers()
  log.debug('new containers: {}'.format(new_containers))

  brand_new_containers = new_containers-old_containers
  if len(brand_new_containers) == 1:
    container_id = list(brand_new_containers)[0]
    (rc, stdout, stderr) = run('docker ps --filter id={container_id}'.format(**locals()))
    if stdout:
      print(stdout)
    else:
      log.warning('Could not find container {container_id}'.format(**locals()))
  else:
    log.warning('Could not find new container')
