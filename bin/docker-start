#! /usr/bin/env python3

import sys
import time
import logging
import argparse
import subprocess

def run(cmd, shell=False, capture=True):
  if (not shell) and isinstance(cmd, str):
    cmd = cmd.split()
  elif shell and not isinstance(cmd, str):
    cmd = ' '.join(cmd)

  log.info('Running {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  if capture:
    (stdout, stderr) = p.communicate()
    stdout = stdout.decode('utf-8')
    stderr = stderr.decode('utf-8')
  else:
    stdout = ''
    stderr = ''
  rc = p.wait()
  log.debug('Ran {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)


parser = argparse.ArgumentParser(description='Start Docker container')
parser.add_argument('image', metavar='image', help='Docker image')
parser.add_argument('-n', '--name', help='Name to use for container')
parser.add_argument('--networking', action='store_true', help='Use host networking')
parser.add_argument('-p', '--privileged', action='store_true', help='Run container in privileged mode')
parser.add_argument('-d', '--dry-run', action='count', help='Do not execute Docker command')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

"""
[centos@pfuntner-everyday ~]$ docker images ubuntu:latest
[centos@pfuntner-everyday ~]$ docker run -it -d --name bruno ubuntu:latest
24b06bf7279a10c6acf05d6d55f1a95bf24a8b3bdc5f0b462e2061dd12aad8c1
[centos@pfuntner-everyday ~]$ docker ps -f id=24b06bf7279a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
24b06bf7279a        ubuntu:latest       "/bin/bash"         37 seconds ago      Up 35 seconds                           bruno
"""

(rc, stdout, stderr) = run(['docker', 'images', args.image])
if len(stdout.splitlines()) == 1:
  (rc, stdout, stderr) = run(['docker', 'pull', args.image], capture=False)
  if rc == 0:
    print('')
  else:
    parser.error(f'Could not pull {args.image!r}')

run(['docker', 'images', args.image], capture=False)

network_option = ' --network host' if args.networking else ''
privileged_option = ' --privileged' if args.privileged else ''
name_option = f' --name {args.name}' if args.name else ''

cmd = f'docker run -it -d{network_option}{privileged_option}{name_option} {args.image}'
if args.dry_run:
  print(cmd)
else:
  (rc, stdout, stderr) = run(cmd)
  if rc == 0:
    if stdout:
      container_id = stdout.strip()
      print('')
      (rc, stdout, stderr) = run(['docker', 'ps', '-f', 'id=' + container_id], capture=False)
      print('\nUse `docker attach {}` to attach to detached container\nUse CTRL-p CTRL-q to detach'.format(args.name if args.name else container_id))
      exit(rc)
    else:
      log.error('`docker run` didn\'t return container id')
      exit(1)
  else:
    log.error('Could not start container')
    print(stdout, end='')
    print(stderr, file=sys.stdout, end='')
