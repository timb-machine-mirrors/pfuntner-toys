#! /usr/bin/env python3

import re
import sys
import signal
import logging
import argparse

parser = argparse.ArgumentParser(description='Grep out a range of lines')
parser.add_argument('starting_regexp', metavar='starting-regexp', help='The starting regular expression')
parser.add_argument('ending_regexp', metavar='ending-regexp', help='The ending regular expression')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if sys.stdin.isatty():
  parser.error('stdin must be redirected')

lines = sys.stdin.read().splitlines()
starting_hits = [pos for (pos, line) in enumerate(lines) if re.search(args.starting_regexp, line)]
ending_hits = [pos for (pos, line) in enumerate(lines) if re.search(args.ending_regexp, line)]

if not starting_hits:
  log.warning(f'Could not find any lines for {args.starting_regexp!r}')

if not ending_hits:
  log.warning(f'Could not find any lines for {args.ending_regexp!r}')

if starting_hits and ending_hits:
  
  if starting_hits[0] > ending_hits[-1]:
    parser.error(f'The first occurrence of {args.starting_regexp!r} appears after the last occurrence of {args.ending_regexp!r}')
  
  print('\n'.join(lines[starting_hits[0]:ending_hits[-1]+1]))

else:
  exit(1)
