#! /usr/bin/env python3

import re
import sys
import signal
import logging
import argparse

def process(source):
  if isinstance(source, str):
    stream = open(source)
  else:
    stream = source

  data = ''
  try:
    data = stream.read()
  except Exception as e:
    log.warning(f'Cannot read {source!r}: {e!s}')

  for exclusion in args.exclude:
    data = data.replace(exclusion, args.replacement_char * len(exclusion))
  for line in data.splitlines():
    if regexp.search(line):
      print('{filename}{line}'.format(filename=f'{source}: ' if isinstance(source, str) else '', line=repr(line)[1:-1]))

  if isinstance(source, str):
    stream.close()

parser = argparse.ArgumentParser(description='grep after replacing strings with placeholders')
parser.add_argument('regexp', help='Regular expression for which to search')
parser.add_argument('files', metavar='file', nargs='*', help='Zero or more files to search')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
parser.add_argument('-x', '--exclude', action='append', help='One or more strings to exclude')
parser.add_argument('-r', '--replacement-char', default='*', help='Replacement character - default: \'*\'')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if len(args.exclude or []) == 0:
  parser.error('Specify at least one string to exclude')

regexp = re.compile(args.regexp)

if args.files:
  for filename in args.files:
    process(filename)
else:
  if sys.stdin.isatty():
    parser.error('stdin must be redirected if no filenames are specified on the command line')
  process(sys.stdin)
