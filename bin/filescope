#! /usr/bin/env python3

import os
import re
import sys
import logging
import platform
import argparse
import subprocess

def run(cmd, trap=False):
  if args.become:
    cmd = ['sudo'] + cmd

  if username:
    cmd = ['{username}@{hostname}'.format(**globals())] + cmd
    if key:
      cmd = ['-i', key] + cmd
    cmd = ['ssh', '-q'] + cmd

  log.info('cmd: {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE if trap else None, stderr=subprocess.PIPE if trap else None)
  (stdout, stderr) = p.communicate()
  stdout = stdout.decode('utf-8')
  stderr = stderr.decode('utf-8')
  rc = p.wait()
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Scope out a file')
parser.add_argument('-s', '--system', help='Remote system (user@ip, name)')
parser.add_argument('-k', '--key', help='ssh key')
parser.add_argument('-b', '--sudo', '--become', dest='become', action='store_true', help='Become root')
parser.add_argument('-v', '--verbose', action='count', help='Expose more debugging messages')
parser.add_argument('files', metavar='file', nargs='+', help='One or more files to scope out')
(args, unknown) = parser.parse_known_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - 10*(args.verbose or 0))

username = None
hostname = None
key = None

if args.system:
  tokens = args.system.split('@')
  if len(tokens) == 1:
    from virtual_hosts import VirtualHosts
    virtual_args = args.__dict__
    virtual_hosts = VirtualHosts(**virtual_args)
    hosts = virtual_hosts.get_hosts(args.system)
    log.info('hosts: {hosts}'.format(**locals()))
    if len(hosts) == 1:
      username = hosts[0].user
      hostname = hosts[0].ip
      key = args.key or (hosts[0].key if hasattr(hosts[0], 'key') else None)
    else:
      parser.error('{host!r} resolved to {hosts}'.format(host=args.system, hosts=[str(host) for host in hosts]))
  elif len(tokens) == 2:
    username = tokens[0]
    hostname = tokens[1]
    key = args.key
  else:
    parser.error('Unexpected system: {args.system!r}'.format(**locals()))

for (pos, filename) in enumerate(args.files):
  (rc, stdout, stderr) = run(['ls', '-ld', filename])
  if rc == 0:
    run(['wc', filename])
    (rc, stdout, stderr) = run(['cat', filename], trap=True)
    lines = stdout.splitlines()
    for (pos, line) in enumerate(lines[:5]):
      print('{pos:>6} {line!r}'.format(pos=pos+1, line=line))

    if len(lines) > 10:
      print('\n'.join(['       .']*3))

    start = max(5, len(lines)-5)
    for (pos, line) in enumerate(lines[start:]):
      print('{pos:>6} {line!r}'.format(pos=start+pos+1, line=line))

  if pos+1 < len(args.files):
    print('')
