#! /usr/bin/env python3

import re
import os
import sys
import logging
import argparse
import datetime
import subprocess

from table import Table

def run(cmd):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Running {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = p.communicate()
  stdout = stdout.decode('utf-8')
  stderr = stderr.decode('utf-8')
  rc = p.wait()

  bad = (rc != 0) or stderr
  log.log(logging.ERROR if bad else logging.DEBUG, 'Running {cmd}'.format(**locals()))
  if bad:
    exit(rc or 1)
  return (rc, stdout, stderr)

def banner(msg):
  border = '*' * (len(msg) + 4)
  print(border)
  print('* {msg} *'.format(**locals()))
  print(border)

def isotime(s):
  """
  Thu Nov 7 07:53:13 2019
  """
  try:
    t = datetime.datetime.strptime(s, '%a %b %d %H:%M:%S %Y')
  except Exception as e:
    log.info('Caught: {e!s}'.format(**locals()))
  else:
    s = t.isoformat().replace('T', ' ')
  return s

def process(root):
  if os.path.exists(root):
    if os.path.isdir(os.path.join(root, '.git')):
      log.debug('root: {root!r}'.format(**locals()))
      prev = os.getcwd()
      os.chdir(root)

      if args.diffs:
        banner(root)
        (rc, stdout, stderr) = run('git diff')
        sys.stdout.write(stdout)
        print('')
      else:
        curr_branch = None
        branches = []
        (rc, stdout, stderr) = run('git branch')
        for line in stdout.splitlines():
          match = re.search(r'^(.)\s+(.*)$', line)
          if match:
            if match.group(1) == '*':
              curr_branch = match.group(2)
            else:
              branches.append(match.group(2))
  
        (rc, stdout, stderr) = run('git log -1')
        match = re.search(r'^commit\s+(\S+).*^Date:\s+(\S{3}\s\S{3}\s\d{1,2}\s\d{2}:\d{2}:\d{2}\s\d{4})\s', stdout,
                          re.MULTILINE + re.DOTALL)
        if match:
          commit = match.group(1)
          timestamp = match.group(2)
        else:
          commit = '?'
          timestamp = '?'

        comment = repr('\n'.join([line.strip() for line in stdout.splitlines()][4:]))[:-1][1:45]
  
        (rc, stdout, stderr) = run('git remote -v')
        match = re.search('^origin\s+(\S+)\s+\(fetch\)$', stdout, flags=re.MULTILINE)
        if match:
          url = match.group(1)
        else:
          url = None
  
        (rc, stdout, stderr) = run('git status')
        clean = 'Clean' if 'nothing to commit, working directory clean' in stdout or 'nothing to commit, working tree clean' in stdout else 'Dirty'
  
        table.add(root, url, curr_branch, clean, commit[:7], isotime(timestamp), comment)
      os.chdir(prev)
    if os.path.isdir(root):
      for filename in os.listdir(root):
        process(os.path.join(root, filename))
  else:
    log.warn('Not found: {root!r}'.format(**locals()))

parser = argparse.ArgumentParser(description='Display git repos')
parser.add_argument('-d', '--diffs', action='store_true', help='Show `git diff` for each repo')
parser.add_argument('roots', metavar='root', nargs='*', help='Zero or more roots in which to look for repos')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

if not args.roots:
  args.roots = [os.path.join(os.environ['HOME'], 'repos')]

if not args.diffs:
  table = Table('Path', 'URL', 'Branch', 'Clean', 'Commit', 'Time', 'Comment')

list(map(process, args.roots))

if not args.diffs:
  print(str(table))
