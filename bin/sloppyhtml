#! /usr/bin/env python3

import sys
import re
import string
import logging
import argparse
import traceback

class Text(object):
  def __init__(self):
    self.text = ''

  def append(self, c):
    self.text += c

  def __str__(self):
    return '{self.text!r}'.format(**locals())

class Node(object):
  def __init__(self, tag):
    global stack

    log.info('Creating {tag} node'.format(**locals()))
    stack.append(tag)

    self.tag = tag
    self.attrs = {}
    self.children = []
    self.self_end = False

  def attr(self, name, value):
    log.debug('Adding {name}={value!r} to {self.tag}'.format(**locals()))
    self.attrs[name] = value

  def append(self, child):
    log.debug('Adding {child!s} to {self!s}'.format(**locals()))
    self.children.append(child)

  def __str__(self):
    return '{self.tag} {self.attrs} {count} children'.format(count=len(self.children) if self.children else None, **locals())

def where(depth):
  tb = traceback.extract_stack()
  return '{file}:{line}'.format(file=tb[depth][0], line=tb[depth][1])

def read(skip=False):
  global stream, buf, cursor

  if skip:
    skip_white_space()
  if buf:
    ret = buf.pop(0)
  else:
    ret = stream.read(1)
  if ret:
    cursor += 1
  log.debug('read() ({where}) returning: {ret!r}, cursor={cursor}'.format(where=where(2), ret=ret, cursor=cursor))
  return ret

def push(s):
  global buf, cursor
  cursor -= len(s)
  for c in s[::-1]:
    buf.insert(0, c)
  log.debug('after push() ({where}): {buf!r}, cursor={cursor}'.format(where=where(2), buf=buf, cursor=cursor))

def visit(root, depth=0):
  if root:
    print('{indent}{root!s}'.format(indent=' '*(depth*2), **locals()))
    for child in root.children if isinstance(root, Node) else []:
      visit(child, depth+1)
  else:
    log.warning('Empty document')

def skip_white_space():
  while True:
    c = read()
    if (not c) or (c not in string.whitespace):
      break
  push(c)

def skip_nonsense():
  chars = ''
  skip_white_space()
  while True:
    match = False
    ignorable = False
    c = read()
    if not c:
      break
    chars += c
    for (start, end) in IGNORE_TUPLES:
      if chars.lower().startswith(start) and chars.lower().endswith(end):
        match = True
        break
      if chars.lower()[:min(len(chars),len(start))] == start[:min(len(chars),len(start))]:
        ignorable = True
    if match:
      log.warning('Ignoring: {chars!r}'.format(**locals()))
      chars = ''
    elif not ignorable:
      break
  push(chars)

def parse():
  global stack

  root = None
  skip_nonsense()
  c = read(skip=True)
  if c:
    if c == '<':
      tag = ''
      while True:
        c = read()
        if (not c) or (c in '/>' + string.whitespace):
          break
        tag += c
      if (not tag) and (c == '/'):
        push('</')
        return None
      if tag:
        push(c)
        root = Node(tag)
        # parse tag attributes
        while True:
          c = read(skip=True)
          if (not c) or (c in '/>'):
            break
          push(c)
          name = ''
          while True:
            c = read()
            if (not c) or (c in string.whitespace + '>='):
              break
            name += c
          if name:
            if c == '=':
              c = read()
              if c in '\'"':
                quote = c
              else:
                quote = None
                push(c)
              value = ''
              while True:
                c = read()
                if not c:
                  break
                elif c == quote:
                  break
                elif (quote is None) and (c in '/>' + string.whitespace):
                  push(c)
                  break
                value += c
            else:
              push(c)
              value = '1'
            root.attr(name, value)
        log.info('After tags: {root!s}'.format(**locals()))
        if c:
          if c == '/':
            root.self_end = True
            c = read()
          if c == '>':
            if root.self_end:
              if stack and (stack[-1] == root.tag):
                stack.pop()
              else:
                log.warning('Self-ending <{root.tag}> but stack is {stack}'.format(stack=stack, **locals()))
            else:
              while True:
                child = parse()
                if child:
                  root.append(child)
                else:
                  break
              log.info('After children: {root!s} c@{cursor}={c!r}'.format(cursor=cursor, **locals()))
              c = read(skip=True)
              if c:
                if c == '<':
                  c = read(skip=True)
                  if c == '/':
                    tag = ''
                    skip_white_space()
                    while True:
                      c = read()
                      if (not c) or (c in '>' + string.whitespace):
                        break
                      tag += c
                    log.info('</{tag}'.format(**locals()))
                    if tag == root.tag:
                      if tag == stack[-1]:
                        stack.pop()
                      else:
                        log.warning('</{root.tag}> but stack is {stack}'.format(stack=stack, **locals()))
                        push('</{tag}>'.format(**locals()))
                    else:
                      log.warning('</{tag}> found when processing end of <{root.tag}>'.format(**locals()))
                      stack.pop()
                      push('</{tag}>'.format(**locals()))
                  else:
                    push('<' + c)
                else:
                  push(c)
              else:
                log.warning('EOF with stack: {stack}'.format(stack=stack))
          else:
            log.warning('Expected end of tag at {}'.format(cursor))
      else:
        log.warning('No tag at {}'.format(cursor))
    else:
      root = Text()
      push(c)
      while True:
        c = read()
        if (not c) or (c == '<'):
          break
        root.append(c)
      if c:
        push(c)

  return root

def render(root, depth=0):
  indent = '  '*depth if args.indent else ''
  if isinstance(root, Node):
    sys.stdout.write('{indent}<{root.tag}'.format(**locals()))
    for (name, value) in root.attrs.items():
      sys.stdout.write(' {name}={value!r}'.format(**locals()))
    sys.stdout.write('>\n')
    for child in root.children:
      render(child, depth+1)
    sys.stdout.write('{indent}</{root.tag}>\n'.format(**locals()))
  else:
    for line in root.text.splitlines():
      print('{indent}{line}'.format(**locals()))

parser = argparse.ArgumentParser(description=sys.argv[0])
parser.add_argument('filename', nargs='?', help='Name of file to parse')
parser.add_argument('--visit', action='store_true', help='Render with visit() method for debugging')
parser.add_argument('--indent', action='store_true', help='Render with indentation')
parser.add_argument('-v', dest='verbose', action='count', help='Enable more debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - 10*(args.verbose or 0))
log.info('args: {args}'.format(**locals()))

if args.filename:
  stream = open(args.filename)
elif sys.stdin.isatty():
  parser.error('stdin must be redirected if filename isn\'t specified')
else:
  stream = sys.stdin

IGNORE_TUPLES = (
  ('<meta ', '\n'), # ignore meta tags
  ('<!--', '-->'),  # ignore comments
)

buf = []
stack = []
cursor = 0
root = parse()
if stack:
  log.warning('Stack remains: {stack}'.format(**locals()))
c = read(skip=True)
if c:
  log.warning('Cursor@{cursor} remains: {c!r}'.format(**locals()))

if args.visit:
  visit(root)
else:
  render(root)
