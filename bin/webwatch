#! /usr/bin/env python3

import os
import sys
import pwd
import json
import getopt
import hashlib
import datetime
import requests
import subprocess

def syntax(msg):
  if msg:
    sys.stderr.write(msg + "\n")
  sys.stderr.write("Syntax: {base} [-f|--force] [-n|--notify]\n".format(**globals()))
  exit(1)

def getNotificationDestination():
  name = "notificationDestination"
  assert name in data, "{name} not configured".format(**locals())
  return data[name].format(user=pwd.getpwuid(os.getuid()).pw_name)

base = os.path.basename(sys.argv[0])
jsonFilename = "{HOME}/data/{base}.json".format(HOME=os.environ["HOME"], **locals())

(opts,args) = ([], [])
try:
  (opts,args) = getopt.getopt(sys.argv[1:], "fn", ["force", "notify"])
except Exception as e:
  syntax(str(e))

force = False
notify = False

for (opt,arg) in opts:
  if opt in ["-f", "--force"]:
    force = not force
  elif opt in ["-n", "--notify"]:
    notify = not notify
  else:
    syntax("Don't know what to do with {opt}".format(opt=repr(opt)))

watches = []

try:
  with open(jsonFilename, "r") as stream:
    data = json.load(stream)
except Exception as e:
  sys.stderr.write("Error loading {jsonFilename}: {e}\n".format(**locals()))
  exit(1)

watches = data["watches"]

changes = False
notifications = []

for watch in watches:
  resp = requests.get(watch["url"])
  if (resp.status_code == 200):
    md5 = hashlib.md5()
    md5.update(resp.text.encode('utf-8'))
    digest = md5.hexdigest()
    if digest != watch["md5"]:
      changes = True
      notifications.append("{name}: changed".format(name=watch["name"]))
      watch["md5"] = digest
      watch["lastUpdate"] = str(datetime.datetime.now())
    else:
      notifications.append("{name}: not changed".format(name=watch["name"]))
  else:
    print("{name}: ERROR".format(name=watch["name"]))
    sys.stderr.write(resp.text + "\n")

print("\n".join(notifications))

if changes or ("--force" in sys.argv[1:]):
  if changes and notify:
    try:
      p = subprocess.Popen(["mail", "-s", "{base} notifications".format(**locals()), getNotificationDestination()], stdin=subprocess.PIPE)
    except Exception as e:
      sys.stderr.write("Error during notification: {e}\n".format(**locals()))
    else:
      p.communicate("\n".join(notifications))
      p.wait()

  assert subprocess.Popen("mv -fv {jsonFilename} {jsonFilename}.old".format(**locals()).split()).wait() == 0, "Error renaming JSON"
  with open(jsonFilename, "w") as stream:
    json.dump(data, stream, indent=2, sort_keys=True)
