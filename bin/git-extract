#! /usr/bin/env python

"""
   Extract all git commits of a file
"""

import re
import os
import sys
import pdb
import math
import getopt
import datetime
import subprocess

def debug(msg):
  if verbose:
    sys.stderr.write('{msg}\n'.format(**locals()))

def run(cmd, checkRc=True, checkStderr=True):
  if isinstance(cmd, basestring):
    cmd = cmd.split()
  debug('cmd: {cmd!r}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = p.communicate()
  rc = p.wait()
  if (checkRc and (rc != 0)) or (checkStderr and stderr):
    sys.stderr.write('{cmd!r} failed: {rc}, {stdout!r}, {stderr!r}\n'.format(**locals()))
    exit(1)
  return stdout

def syntax(msg=None):
  if msg:
    sys.stderr.write('{msg}\n'.format(**locals()))
  sys.stderr.write('Syntax: {pgm} path\n'.format(pgm=sys.argv[0]))
  exit(1)

def secs(ts):
  """
     Parameters:
       ts: a datetime.datetime object, timezone-insensitive, but presumably in the local timezone
     Returns:
       seconds since the epoch
  """
  return (ts-epoch).total_seconds()

def parseTimestamp(s):
  """
     Parameters:
       s: a timestamp string with a timezone such as: 'Wed Nov 1 16:07:15 2017 -0400'
     Returns:
       seconds since the epoch (1970/01/01 00:00:00 UTC)
  """
  tokens = s.split()
  timezone = tokens.pop()
  offset = datetime.timedelta(hours=(int(timezone[1:3]) + int(timezone[3:])/60.0))
  direction = timezone[0]
  debug('offset: {direction}{offset}'.format(**locals()))

  # parse remaining tokens
  timestamp = datetime.datetime.strptime(' '.join(tokens), '%a %b %d %H:%M:%S %Y')
  debug('Initially, timestamp is {timestamp}'.format(**locals()))

  # adjust to UTC
  if local_direction == '+':
    timestamp -= local_offset
  else:
    timestamp += local_offset
  debug('After adjusting for local timezone, timestamp is {timestamp}'.format(**locals()))

  # adjust by indicated offset
  if direction == '+':
    timestamp += offset
  else:
    timestamp -= offset
  debug('After adjusting for desired timezone, timestamp is {timestamp}'.format(**locals()))

  return secs(timestamp)

def diff(num1, num2):
  return math.fabs(num1 - num2)

verbose = False

(opts,args) = ([], [])
try:
  (opts,args) = getopt.getopt(sys.argv[1:], 'v', ['verbose'])
except Exception as e:
  syntax(str(e))

for (opt,arg) in opts:
  if opt in ['-v', '--verbose']:
    verbose = not verbose
  else:
    syntax('Unexpected option: {opt!r}'.format(**locals()))

epoch = datetime.datetime.utcfromtimestamp(0)
# pdb.set_trace()
now = datetime.datetime.now()
utcnow = datetime.datetime.utcnow()
local_offset = datetime.timedelta(hours=int(diff(secs(now), secs(utcnow)) / 60.0 / 60.0))
local_direction = '+' if now > utcnow else '-'
debug('local_offset: {local_direction}{local_offset}'.format(**locals()))

debug('args: {args!r}'.format(**locals()))
if len(args) != 1:
  syntax('Specify a single path')

path = args[0]
if not os.path.isfile(path):
  syntax('{path!r} must be a regular file'.format(**locals()))

stdout = run('git log {path}'.format(**locals()))

matches = list(re.finditer('commit ([0-9a-f]{40})\nAuthor:[^\n]+\nDate:\s+([^\n-]+ [-+]\d{4})\n', stdout))
if not matches:
  sys.stderr.write('Could not determine commits and timestamps from:\n{stdout}'.format(**locals()))
  exit(1)

basename = os.path.basename(path)

baseExtractDir = '{HOME}/git-extracts'.format(**os.environ)
if not os.path.isdir(baseExtractDir):
  os.mkdir(baseExtractDir)

baseExtractDir += '/{base}'.format(base=basename)
run(['rm', '-rf', '{baseExtractDir}/*'.format(**locals())])
if not os.path.isdir(baseExtractDir):
  os.mkdir(baseExtractDir)

print 'Extracting to: {baseExtractDir}'.format(**locals())

for match in matches:
  (commit, timestamp) = (match.group(1), parseTimestamp(match.group(2))) # ex: 'Wed Nov 1 16:07:15 2017 -0400'
  print '{commit} {timestamp}'.format(commit=commit, timestamp=datetime.datetime.utcfromtimestamp(timestamp))
  run('git checkout {commit} {path}'.format(**locals()), checkStderr=False)
  dest = '{baseExtractDir}/{commit}'.format(**locals())
  run('cp {path} {dest}'.format(**locals()))
  if local_direction == '-':
    timestamp += local_offset.seconds
  else:
    timestamp -= local_offset.seconds
  os.utime(dest, (timestamp, timestamp))

# check out most recent version
(commit, timestamp) = (matches[0].group(1), parseTimestamp(matches[0].group(2))) # ex: 'Wed Nov 1 16:07:15 2017 -0400'
run('git checkout {commit} {path}'.format(**locals()), checkStderr=False)
