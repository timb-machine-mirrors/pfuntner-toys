#! /usr/bin/env python3

import re
import signal
import logging
import argparse
import subprocess

from gityup import Git
from BrunoUtils import BrunoUtils

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))

  p = None
  try:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  except Exception as e:
    (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

  if p:
    if stdin:
      p.stdin.write(stdin.encode())
    if capture:
      (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    else:
      (stdout, stderr) = ('', '')
    rc = p.wait()

  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Grep files through git commits')
parser.add_argument('regexp', help='Regular expression which which to search')
parser.add_argument('files', metavar='file', nargs='+', help='Paths to one or more files to search')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
parser.add_argument('-a', '--all', action='store_true', help='Display all information about the commit')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

regexp = re.compile(args.regexp)

"""
  {
    "author": "jpfuntne@cisco.com",
    "commit": "e8e19bd33b783070b14f83630957f6de90999539",
    "files": [
      {
        "name": "Dockerfile",
        "operation": "modify"
      }
    ],
    "messages": [
      "Removing reference to obsolete package that's longer installed"
    ],
    "utc_date": "2021-07-19 14:21:24"
  },
"""

width = BrunoUtils.cols()
printed_hit = False
git = Git(log=log)
commits = git.parse_log(args.files)
log.info(f'{len(commits)} commits')
for commit in commits:
  log.debug(f'{commit}')
  printed_commit = False
  for curr in commit.get('files', []):
    if curr['operation'] in ['add', 'modify']:
      (rc, stdout, stderr) = run(['git-cat', commit['commit'], curr['name']])
      for line in stdout.splitlines():
        if regexp.search(line):
          if args.all and not printed_commit:
            if printed_hit:
              print('\n{banner}'.format(banner='=' * width))
            printed_hit = True
            print(f'{commit["commit"]} {commit["utc_date"]} {commit["author"]}')
            print('\n'.join(commit["messages"]))
            printed_commit = True
          if args.all:
            print(f'{curr["name"]}: {repr(line)[1:-1]}')
          else:
            print(f'{commit["commit"]}:{curr["name"]}: {repr(line)[1:-1]}')
