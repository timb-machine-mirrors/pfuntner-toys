#! /usr/bin/env python3

import os
import sys
import pdb
import logging
import platform
import argparse
import subprocess

def see(name):
  assert isinstance(name, str)
  try:
    value = repr(eval(name))
  except Exception as e:
    value = 'evaluation error: ' + str(e)

  log.info('{name}: {value}'.format(**locals()))

def set_title(title):
  """
    Techniques from:
      Windoze: https://superuser.com/questions/362227/how-to-change-the-title-of-the-mintty-window
      Linux: https://askubuntu.com/questions/22413/how-to-change-gnome-terminal-title
  """

  """
    The following is code I was using for Windows but I'm not sure it's still necessary.  The techniques
    are identical across Windoze and Linux.
    
      global is_mintty, lines, headings, tokens, pid, processes, process
    
      if 'win' in sys.platform.lower():
        is_mintty = False
      try:
        p = subprocess.Popen(['ps'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
      except Exception as e:
        parser.error('Error executing `ps`: {e!s}'.format(**locals()))
      (stdout, stderr) = p.communicate()
      stdout = stdout.decode('utf-8')
      stderr = stderr.decode('utf-8')
      rc = p.wait()
      log.info('ps: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
      lines = stdout.splitlines()
      see('lines')
      if lines:
        headings = lines[0].split()
        see('headings')
        processes = {}
        for line in lines[1:]:
          tokens = line.split()
          see('tokens')
          pid = tokens[0]
          if len(tokens) <= len(headings):
            see('pid')
            processes[pid] = {}
            for (pos, heading) in enumerate(headings):
              processes[pid][heading] = tokens[pos]
        see('processes')
        process = processes.get(str(os.getpid()))
        while True:
          see('process')
          if process:
            if process['COMMAND'] == '/usr/bin/mintty':
              is_mintty = True
              break
            else:
              process = processes.get(process['PPID'])
          else:
            break
      see('is_mintty')
    
      if is_mintty:
  """

  msg = f'\x1b]0;{title}\x07'
  log.info(f'Writing: {msg!r}')
  sys.stdout.write(msg)

def simplify(s):
  log.info(f'simplify({s!r}')
  tokens = s.split('+')
  log.info(f'simplify(): tokens: {tokens}')
  if len(tokens) == 2 and tokens[1]:
    s = tokens[1]
  log.info(f'simplify() returning {s!r}')
  return s

parser = argparse.ArgumentParser(description='Set window title')
parser.add_argument('title', nargs='*', help='Title to use (default: assumes --self)')
parser.add_argument('-s', '--self', dest='_self', action='store_true', help='Use `user@node` as title')
parser.add_argument('-d', '--debug', action='store_true', help='Enable interactive debugging')
parser.add_argument('-v', '--verbose', action='store_true', help='Enable debugging messages')
parser.add_argument('--who-am-i', action='store_true', help='Print out the title line')
args = parser.parse_args()

if args.debug:
  pdb.set_trace()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - 10*(args.verbose or 0))

if args._self and args.title:
  parser.error('Specify either --self or a title string but not both')

title = (simplify(os.environ.get('USER', '?')) + '@' + platform.node()) if args._self or not args.title else ' '.join(args.title)

if args.who_am_i:
  print(title)
else:
  set_title(title)
