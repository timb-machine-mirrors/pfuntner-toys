#! /usr/bin/env python2

import os
import sys
import logging
import platform
import argparse
import subprocess
from virtual_hosts import VirtualHosts

def see(name):
  assert isinstance(name, basestring)
  try:
    value = repr(eval(name))
  except Exception as e:
    value = 'evaluation error: ' + str(e)

  log.info('{name}: {value}'.format(**locals()))

def set_mintty_title(title):
  """
    Set Cygwin mintty title.  This is a "no-op" if you're on Linux, not using Cygwin, etc.

    I got the technique for actually changing the title from https://superuser.com/questions/362227/how-to-change-the-title-of-the-mintty-window but I did the logic that leads up to that from scratch.
  """

  is_mintty = False
  see('sys.platform')
  if 'win' in sys.platform.lower():
    try:
      p = subprocess.Popen(['ps'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except Exception as e:
      parser.error('Error executing `ps`: {e!s}'.format(**locals()))
    (stdout, stderr) = p.communicate()
    rc = p.wait()
    log.info('ps: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
    lines = stdout.splitlines()
    see('lines')
    if lines:
      headings = lines[0].split()
      see('headings')
      processes = {}
      for line in lines[1:]:
        tokens = line.split()
        see('tokens')
        pid = tokens[0]
        if len(tokens) <= len(headings):
          see('pid')
          processes[pid] = {}
          for (pos, heading) in enumerate(headings):
            processes[pid][heading] = tokens[pos]
      see('processes')
      process = processes.get(str(os.getpid()))
      while True:
        see('process')
        if process:
          if process['COMMAND'] == '/usr/bin/mintty':
            is_mintty = True
            break
          else:
            process = processes.get(process['PPID'])
        else:
          break
  see('is_mintty')

  if is_mintty:
    log.info('changing mintty title to: {title!r}'.format(**locals()))
    sys.stdout.write('\x1b]0;{title}\x07'.format(**locals()))

parser = argparse.ArgumentParser(description='Virtual machine ssh')
parser.add_argument('-p', '--profile', help='AWS profile')
parser.add_argument('--ansible-only', action='store_true', help='Use Ansible hosts file only and avoid AWS CLI')
parser.add_argument('--aws-only', action='store_true', help='Use AWS CLI only and avoid Ansible hosts file (slow)')
parser.add_argument('--dry-run', action='store_true', help='Do not perform ssh, only show command')
parser.add_argument('-v', '--verbose', dest='verbose', action='count', help='Enable debugging')
parser.add_argument('hostname', help='Name of host')
parser.add_argument('cmd', nargs='*', help='Remote command and arguments')
(args, unknown) = parser.parse_known_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - 10*(args.verbose or 0))

log.info('args: {args}, unknown: {unknown}'.format(**locals()))

virtual_args = args.__dict__
virtual_hosts = VirtualHosts(**virtual_args)
hosts = virtual_hosts.get_hosts(args.hostname)

if hosts:
  if len(hosts) == 1:
    host = hosts[0]
    log.info(host)
    if hasattr(host, 'state') and (host.state != 'running'):
      parser.error('{host.name} is not running'.format(**locals()))
    if not host.user:
      parser.error('No user for {host.name}'.format(**locals()))
    if not host.ip:
      parser.error('No IP for {host.name}'.format(**locals()))

    cmd = ['ssh']
    if hasattr(host, 'key') and host.key:
      cmd += ['-i', host.key]
    else:
      log.info('no key for {host.name}'.format(**locals()))
    cmd += unknown
    cmd.append('{host.user}@{host.ip}'.format(**locals()))
    cmd += args.cmd
    if args.dry_run:
      log.setLevel(logging.WARNING - 10 * ((args.verbose or 0)+1))

    log.info(cmd)
    if not args.dry_run:
      set_mintty_title('{host.user}@{host.ip}'.format(**locals()))
      rc = subprocess.Popen(cmd).wait()
      set_mintty_title(platform.node())
      exit(rc)
  else:
    parser.error('Multiple hosts found: {}'.format(', '.join(sorted([str(host.name) for host in hosts]))))
