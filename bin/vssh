#! /usr/bin/env python

import logging
import argparse
import subprocess
from virtual_hosts import VirtualHosts

parser = argparse.ArgumentParser(description='Virtual machine ssh')
parser.add_argument('-p', '--profile', help='AWS profile')
parser.add_argument('--aws-only', action='store_true', help='Use AWS CLI only and avoid Ansible hosts file (slow)')
parser.add_argument('-v', '--verbose', dest='verbose', action='count', help='Enable debugging')
parser.add_argument('hostname', help='Name of host')
parser.add_argument('cmd', nargs='*', help='Remtoe command and arguments')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - 10*(args.verbose or 0))

virtual_args = args.__dict__
virtual_hosts = VirtualHosts(**virtual_args)
hosts = virtual_hosts.get_hosts(args.hostname)

if hosts:
  if len(hosts) == 1:
    host = hosts[0]
    log.info(host)
    if hasattr(host, 'state') and (host.state != 'running'):
      parser.error('{host.name} is not running'.format(**locals()))
    if not host.user:
      parser.error('No user for {host.name}'.format(**locals()))
    if not host.ip:
      parser.error('No IP for {host.name}'.format(**locals()))

    cmd = ['ssh']
    if host.key:
      cmd += ['-i', host.key]
    cmd.append('{host.user}@{host.ip}'.format(**locals()))
    cmd += args.cmd
    log.info(cmd)
    exit(subprocess.Popen(cmd).wait())
  else:
    parser.error('Multiple hosts found: {}'.format(', '.join(sorted([str(host.name) for host in hosts]))))
