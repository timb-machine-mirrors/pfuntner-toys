#! /usr/bin/env python2

import os
import re
import sys
import logging
import argparse
import subprocess

from table import Table

def say(name, value=None):
  if value == None:
    value = eval(name)
  log.info('{name}: {value!r}'.format(**locals()))

def run(cmd):
  if isinstance(cmd, basestring):
    cmd = cmd.split()
  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = p.communicate()
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return rc, stdout, stderr

def children(dir):
  try:
    ret = os.listdir(dir)
  except Exception as e:
    log.debug('os.listdir({dir!r}) threw {e!s}'.format(**locals()))
    ret = []
  return ret

def hunt(dir):
  if (dir != original_real_dir) and (os.path.basename(dir) == repo_name):
    log.info('Examining {dir}'.format(**locals()))
    os.chdir(dir)
    (rc, stdout, stderr) = run('git log')
    commits = regexp.findall(stdout)
    table.add(dir, required_commit in commits)
  for child in children(dir):
    path = os.path.join(dir, child)
    if os.path.isdir(path) and not os.path.islink(path):
      hunt(path)

parser = argparse.ArgumentParser(description='Check for latest commit in other copies of the repo')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

"""
       1234567890123456789012345678901234567890
commit 18303fd11df924badf79be16aa144aeb72c87c92
Author: John Pfuntner <jpfuntne@cisco.com>
Date:   Mon Nov 25 07:18:16 2019 -0500

    Fixing a typo
"""

regexp = re.compile('^commit\s+([0-9a-f]{40})', flags=re.MULTILINE)

table = Table('Path', 'Commit present?')

original_dir = os.getcwd()
repo_name = os.path.basename(original_dir)
say('repo_name')
original_real_dir = os.path.realpath(original_dir)
(rc, stdout, stderr) = run('git log -1')
if (rc == 0) and stdout:
  print 'Last commit for {original_dir} ({original_real_dir}):'.format(**locals())
  print stdout
  match = regexp.search(stdout)
  if match:
    required_commit = match.group(1)
    say('required_commit')
    hunt(os.environ['HOME'])
  else:
    parser.error('Could not determine last commit SHA1') 
else:
  parser.error('Could not determine last commit for {original_dir}'.format(**locals()))

sys.stdout.write(str(table))
