#! /usr/bin/env python3

import re
import sys
import copy
import signal
import logging
import argparse

def len_of_group1(match):
  if match:
    return len(match.group(1))
  else:
    return None

def all_commented_out(lengths):
  lengths = set(lengths)
  return (len(lengths) == 1) and (lengths != set([None]))

parser = argparse.ArgumentParser(description='vi filter to comment out code (Python, etc)')
parser.add_argument('-t', '--token', default='#', help='Token to comment out a line.  Default: `#`')
parser.add_argument('-a', '--all', action='store_true', help='Comment all lines, even blank lines')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

assert not sys.stdin.isatty(), 'stdin must be redirected'

errors = 0
lines = sys.stdin.read().splitlines()
newlines = copy.deepcopy(lines)

# is the block completely commented out at the same column?
regexp = re.compile('^(\s*)' + args.token + '( |$)')
if all_commented_out([len_of_group1(regexp.search(line)) for line in lines]):
  regexp = re.compile('^\s*(' + args.token + '( |$))')
  for (pos, newline) in enumerate(newlines):
    match = regexp.search(newline)
    newlines[pos] = newline[:match.start(1)] + newline[match.end(1):]
else:
  # find least indented line
  regexp = re.compile('(^\s*)\S')
  indents = []
  for newline in newlines:
    match = regexp.search(newline)
    if match:
      indents.append(len(match.group(1)))
  if indents:
    least_indent = min(indents)
    regexp = re.compile('(^\s{{{least_indent}}})'.format(**locals()))
    for (pos, newline) in enumerate(newlines):
      if regexp.search(newline):
        newlines[pos] = regexp.sub(r'\1' + args.token + ' ', newline)
      elif args.all:
        newlines[pos] = f'{" "*least_indent}# {newline}'

if errors:
  print('\n'.join(lines))
else:
  print('\n'.join(newlines))
