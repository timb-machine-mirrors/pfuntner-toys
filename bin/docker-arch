#! /usr/bin/env python3

import sys
import json
import signal
import logging
import argparse
import subprocess

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))

  p = None
  try:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  except Exception as e:
    (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

  if p:
    if stdin:
      p.stdin.write(stdin.encode())
    if capture:
      (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    else:
      (stdout, stderr) = ('', '')
    rc = p.wait()

  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)


class Table(object):
  def __init__(self, *args):
    if len(args) == 1 and type(args[0]) in (list, tuple):
      self.headings = args[0]
    else:
      self.headings = args

    try:
      self.p = subprocess.Popen(['column', '-t', '-s\t'], stdin=subprocess.PIPE, text=True)
    except Exception as e:
      log.error(f'Error opening `column`: {e!s}. On Ubuntu, try installing the bsdmainutils package')
      exit(1)

    self.p.stdin.write('\t'.join([str(heading) for heading in self.headings]) + '\n')

  def add(self, *args):
    self.p.stdin.write('\t'.join([str(arg) for arg in args]) + '\n')

  def close(self):
    self.p.stdin.close()
    self.p.wait()

parser = argparse.ArgumentParser(description='Get architecture of a Docker image')
parser.add_argument('images', metavar='image', nargs='+', help='One or more Docker images')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

table = Table('Image', 'Arch')
for image in args.images:
  (rc, stdout, stderr) = run(['docker', 'inspect', image])
  if rc == 0:
    try:
      details = json.loads(stdout)
    except Exception as e:
      log.warning(f'Could not parse {stdout!r} from {image!r}: {e!s}')
      details = None

    if details:
      if 'Architecture' in details[0]:
        table.add(image, details[0]['Architecture'])
      else:
        log.warning(f'{image!r} does not appear to be a Docker image')
  else:
    log.warning(f'Could not get details for {image!r}: {rc}, {stdout!r}, {stderr!r}')
table.close()
