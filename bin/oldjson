#! /usr/bin/env python3

import re
import sys
import json
import getopt
import os.path

import pdb

natives = [str, unicode, int, float, bool]

def debug(msg, lvl=1):
  if debugLevel > lvl:
    sys.stderr.write("%s\n" % msg)

def safeStr(obj):
  if type(obj) not in [str, unicode]:
    return str(obj)
  else:
    return obj

def regularWriter(root):
  print(json.dumps(root, indent=None if noIndent else 2, sort_keys=True))

def treeWriter(root, depth=0):
  if type(root) == dict:
    for key in sorted(root.keys()):
      value = root[key]
      if type(value) in [dict, list]:
        print("%s%s:" % ('  '*depth, key))
        treeWriter(value, depth+1)
      else:
        print("%s%s: %s" % ('  '*depth, key, value))
  elif type(root) == list:
    for key in range(len(root)):
      value = root[key]
      if type(value) in [dict, list]:
        print("%s%s:" % ('  '*depth, key))
        treeWriter(value, depth+1)
      else:
        print("%s%s: %s" % ('  '*depth, key, value))
  else:
    print("%s%s" % ('  '*depth, root))

def flatWriter(root, path=""):
  if type(root) == dict:
    for key in sorted(root.keys()):
      flatWriter(root[key], os.path.join(path, str(key)))
  elif type(root) == list:
    for key in range(len(root)):
      flatWriter(root[key], os.path.join(path, str(key)))
  else:
    print("%s: %s" % (path, root))

class KeyValue:
  def __init__(self, s):
    self.notKey = None
    self.key = None
    self.notValue = None
    self.value = None

    match = kvRe.search(s)
    assert match and (len(match.groups()) == 5), "%s didn't match %s somehow!!" % (repr(s), repr(kvRe.pattern))
    self.groups = match.groups()

    self.key = re.compile('^' + match.group(2) + '$')
    self.notKey = match.group(1) != None

    if match.group(4):
      assert not self.notKey, "value & `not key` not supported: %s" % repr(s)
      self.value = re.compile('^' + match.group(5) + '$')
      self.notValue = match.group(3) == "!="

    assert self.key, "Don't know what to do with %s" % repr(obj)

  def has(self, node):
    ret = False
    if type(node) == dict:
      if self.value:
        ret = self.notValue
      else:
        ret = self.notKey

      keyMatches = 0
      for nodeKey in node.keys():
        match = self.key.search(nodeKey)
        debug("KeyValue.hash() key match: %s" % match)
        if self.notKey:
          """
            Key must not exist and value cannot be specified
          """
          if match:
            ret = False
            break
        else:
          if match:
            keyMatches += 1
            if self.value:
              if type(node[nodeKey]) in natives:
                if self.value.search(safeStr(node[nodeKey])):
                  if self.notValue:
                    ret = False
                    break
                  else:
                    ret = True
                    break
            else:
              """
                The key exists, no value specified
              """
              ret = True
              break

      if self.notValue and (keyMatches == 0) and ret:
        ret = False
    return ret

def trimNode(root):
  if type(root) == dict:
    for node in root.keys():
      if type(root[node]) not in natives:
        root[node] = "...%s..." % type(root[node])
  elif type(root) == list:
    for pos in range(len(root)):
      if type(root[pos]) not in natives:
        root[pos] = "...%s..." % type(root[pos])
  return root

def include(root, mustHave, keyValues, path="", ret={}):
  debug("include(%s, %s, %s, %s, %s)" % (root, mustHave, [kv.groups for kv in keyValues], repr(path), ret), 2)
  if type(root) == dict:
    match = False
    for keyValue in keyValues:
      match = keyValue.has(root)
      debug("include() test for %s: %s" % (keyValue.groups, match))
      if match:
        break
    if match == mustHave:
      ret[path] = trimNode(root)

    for node in root.keys():
      include(root[node], mustHave, keyValues, os.path.join(path, node), ret)

  elif type(root) == list:
    for pos in range(len(root)):
      include(root[pos], mustHave, keyValues, os.path.join(path, str(pos)), ret)

  return ret

def lopOff(root):
  indices = []
  if type(root) == dict:
    indices = root.keys()
  elif type(root) == list:
    indices = [ind for ind in range(len(root)) if root[ind] != None]

  if len(indices) == 1:
    root = lopOff(root[indices[0]])
  return root

describe = False
writer = regularWriter
selects = []
excludes = []
filename = None
shallow = False
lop = False
debugLevel = 0
noIndent = False

"""
> !abc
('!', 'abc', None, None, None)
> abc=x
(None, 'abc', '=x', '=', 'x')
>
"""
kvRe = re.compile("^(!)?([^!=]+)((==|!=|=)(.*))?$")

(opts,args) = getopt.getopt(sys.argv[1:], "vtfds:x:i", ["lop", "shallow", "verbose", "file=", "tree", "flatten", "describe", "select=", "exclude=", "noindent"])
for (opt,arg) in opts:
  if opt in ["-t", "--tree"]:
    writer = treeWriter
    describe = False
  elif opt in ["-f", "--flatten"]:
    writer = flatWriter
    describe = False
  elif opt in ["-s", "--select"]:
    selects.append(KeyValue(arg))
  elif opt in ["-x", "--exclude"]:
    excludes.append(KeyValue(arg))
  elif opt in ["-d", "--describe"]:
    describe = not describe
  elif opt == "--file":
    filename = arg
  elif opt in ["-v", "--verbose"]:
    debugLevel += 1
  elif opt == "--shallow":
    shallow += not shallow
  elif opt == "--lop":
    lop += not lop
  elif opt in ["-i", "--noindent"]:
    noIndent += not noIndent
  else:
    assert False, "Don't know how to handle %s" % repr(opt)

assert not (selects and excludes), "--select and --exclude are mutually exclusive"

if filename:
  with open(filename, 'r') as f:
    root = json.load(f)
else:
  assert not sys.stdin.isatty(), "stdin must be directed if --file is not specified"
  root = json.load(sys.stdin)

if len(args) == 1:
  args = args[0].split('/')

"""
  Select the structure based on the specified path
"""
curr = [root]
path = []
for arg in args:
  assert curr, "Out of elements at %s" % os.path.join(path)

  if arg == '*':
    regexp = re.compile(".*")
  else:
    regexp = re.compile('^' + arg + '$')

  newcurr = []

  for node in curr:
    if type(node) == list:
      for pos in range(len(node)):
        if regexp.search(str(pos)):
          newcurr.append(node[pos])
        else:
          node[pos] = None
    elif type(node) == dict:
      keys = node.keys()
      for key in keys:
        if regexp.search(key):
          newcurr.append(node[key])
        else:
          node.pop(key)
    else:
      sys.stderr.write("Cannot select %s from %s\n" % (os.path.join('/'.join(path), arg), type(root)))
      exit(1)

  path.append(arg)
  curr = newcurr

if shallow:
  for node in curr:
    node = trimNode(node)

if lop:
  root = lopOff(root)

debug("root: %s" % root, 2)
if selects:
  root = include(root, True, selects)
elif excludes:
  root = include(root, False, excludes)

if describe:
  if type(root) == dict:
    print("root is a dictionary with %d keys: %s" % (len(root.keys()), ", ".join(sorted(root.keys()))))
  elif type(root) == list:
    print("root is a list with %d elements: %s" % (len(root), root))
  else:
    print("root is a %s" % str(type(root)))
else:
  writer(root)
