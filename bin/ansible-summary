#! /usr/bin/env python3

import re
import sys
import signal
import logging
import argparse

from table import Table

parser = argparse.ArgumentParser(description='Parse Ansible playbook summary information')

group = parser.add_mutually_exclusive_group()
group.add_argument('-s', '--successes', '--passes', action='store_true', help='Show only successes')
group.add_argument('-f', '--failures', action='store_true', help='Show only failures')

parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if sys.stdin.isatty():
  parser.error('stdin must be redirected')

line_regexp = re.compile('^(\S+)\s+:\s*(ok=.*)$')
stats_regexp = re.compile('(\S+)=(\d+)')

summary = dict()
stats = set()

for line in sys.stdin.read().splitlines():
  match = line_regexp.search(line)
  if match:
    host = match.group(1)
    log.info(f'host: {host!r}')
    remain = match.group(2)
    summary[host] = dict()
    for (key, value) in stats_regexp.findall(remain):
      log.info(f'kv: {key!r}={value!r}')
      stats.add(key)
      summary[host][key] = value

if args.failures:
  print('\n'.join([host for (host, host_stats) in summary.items() if host_stats.get('failed', '1') != '0']))
elif args.successes:
  print('\n'.join([host for (host, host_stats) in summary.items() if host_stats.get('failed', '1') == '0']))
else:
  # sort the statistics, placing 'ok' first, followed by 'failed'
  stats.discard('ok')
  stats.discard('failed')
  stats = sorted(list(stats))
  stats = ['ok', 'failed'] + stats

  table = Table(['Host'] + stats)
  for host in sorted(list(summary.keys())):
    row = [host]
    for stat in stats:
      row.append(summary[host].get(stat, '?'))
    log.debug(f'Row: {row}')
    table.add(row)
  print(str(table), end='')
