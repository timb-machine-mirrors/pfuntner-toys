#! /usr/bin/env python3

import os
import json
import signal
import logging
import argparse
import subprocess

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))

  p = None
  try:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  except Exception as e:
    (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

  if p:
    if stdin:
      p.stdin.write(stdin.encode())
    if capture:
      (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    else:
      (stdout, stderr) = ('', '')
    rc = p.wait()

  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

AWS_KEY_NAME = 'AWS_KEY_NAME' # name of environment variable to stash AWS key name

parser = argparse.ArgumentParser(description='Create an AWS EC2 instance')
parser.add_argument('-k', '--key-name', help=f'Name of AWS key (can be defined through {AWS_KEY_NAME} environment variable')
parser.add_argument('ami', help='AWS image ID')
parser.add_argument('name', help='Name of instance')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

"""
aws ec2 run-instances \
    --image-id ami-0abcdef1234567890 \
    --instance-type t2.micro \
    --key-name MyKeyPair
    --tag-specifications 'ResourceType=instance,Tags=[{Key=webserver,Value=production}]' 'ResourceType=volume,Tags=[{Key=cost-center,Value=cc123}]'
"""

key_name = args.key_name or os.environ.get(AWS_KEY_NAME)
if not key_name:
  parser.error(f'Define AWS key name through --key-name or {AWS_KEY_NAME} environment variable')

cmd = [
  'aws', 'ec2', 'run-instances',
  '--image-id', args.ami,
  '--instance-type', 't2.micro',
  '--key-name', key_name,
  '--tag-specifications', 'ResourceType=instance,Tags=[{Key=Name,Value=' + args.name + '}]',
]

(rc, stdout, stderr) = run(cmd)
if rc == 0:
  try:
    resp = json.loads(stdout).get('Instances', [{}])[0]
    """
       {
           "Instances": [
               {
                   "AmiLaunchIndex": 0,
                   "ImageId": "ami-0abcdef1234567890",
                   "InstanceId": "i-1231231230abcdef0",
                   "InstanceType": "t2.micro",
                   "KeyName": "MyKeyPair",
                   "LaunchTime": "2018-05-10T08:05:20.000Z",
                   "Monitoring": {
                       "State": "disabled"
                   },
        .
        .
        .
    """
    print(f'Created {resp.get("InstanceId", "?")}')
  except Exception as e:
    log.error(f'''{cmd} rc=0 but couldn't parse stdout: {stdout!r}, {stderr!r}''')
    exit(1)
else:
  log.error(f'{cmd} failed: {rc}, {stdout!r}, {stderr!r}')
  exit(1)
