#! /usr/bin/env python

import os
import re
import logging
import argparse

def ignore(filename):
  return any([bool(ignore_regexp.search(filename)) for ignore_regexp in ignore_regexps])

def pathjoin(*path):
  return os.path.join(*path)

ignore_regexps = [
  re.compile(r'^\.'),
  re.compile(r'\.pyc$'),
  re.compile(r'^__init__\.py$'),
  re.compile(r'-sample$'),
]

def listfiles(*path):
  return [filename for filename in os.listdir(pathjoin(*path)) if not ignore(filename)]

parser = argparse.ArgumentParser(description='Show my tools that don\'t have a documentation page')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

repo_base = os.path.join(os.environ['HOME'], 'toys')
if not os.path.isdir(repo_base):
  parser.error('Could not find directory {repo_base!r}'.format(**locals()))

bins = listfiles(repo_base, 'bin')
log.debug('bins: {bins}'.format(**locals()))

docs = listfiles(repo_base, 'doc')
log.debug('docs: {docs}'.format(**locals()))

needs = [bin for bin in bins if (bin + '.md') not in docs]

print '\n'.join(
  sorted(needs, key=lambda filename: os.path.getmtime(pathjoin(repo_base, 'bin', filename)), reverse=True)
)
