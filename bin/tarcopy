#! /usr/bin/env python3

import re
import os
import sys
import time
import base64
import select
import logging
import argparse
import threading
import subprocess

class Echo(threading.Thread):
  def __init__(self, title, src, dst):
    super(Echo, self).__init__()
    self.title = title
    self.src = src
    self.dst = dst
    self.start()

  def run(self):
    log.debug('{self.title} echo thread starting'.format(**locals()))
    while True:
      (read_ready, write_ready, excp_ready) = select.select([self.src], [], [])
      line = self.src.readline()
      if line:
        self.dst.write('{self.title}: {line}'.format(**locals()))
      else:
        break
    log.debug('{self.title} echo thread ending'.format(**locals()))

def replace_all(s, replacements):
  for (key, value) in replacements.items():
    s = s.replace(key, repr(value))
  return s

def kill(p):
  """
  Kill a process created by subprocess.Popen()

  :param p: The process created by subprocess.Popen()
  :returns: None
  """

  if p.poll() is not None:
    log.debug('Process {pid} needs to be killed'.format(pid=p.pid))
    p.kill()
  else:
    log.debug('Process {pid} does not need to be killed'.format(pid=p.pid))

parser = argparse.ArgumentParser(description='Copy files using tar')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('-l', '--loud', dest='loud', action='store_true', help='Print the progress of files')
parser.add_argument('from_list', metavar='from', nargs='+', help='One or more local files to copy')
parser.add_argument('to', help='Destination directory (eg. `DIR`, `SYS:DIR`, `USER@SYS:DIR`)')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(process)d %(thread)d %(msg).{bytes}s'.format(bytes=2*1024**2))
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

log.debug('args: {args}'.format(**locals()))

match = re.search('^(?:([^:]+):)?(.+)$', args.to)
log.debug('match: {groups}'.format(groups=match.groups() if match else None))
if not match:
  parser.error('{args.to!r} is not a valid destination'.format(**locals()))

to_dest = match.group(1)
to_dir = match.group(2)

verbose = ['-v'] if args.loud else []

(from_tar, from_echo, from_rc, from_stdout, from_stderr) = (None, None, 0, '', '')
(to_tar, to_echo, to_rc, to_stdout, to_stderr) = (None, None, 0, '', '')

from_tar = subprocess.Popen(['tar'] + verbose + ['-czf-'] + args.from_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
log.debug('Started `from` tar in process {pid}'.format(pid=from_tar.pid))
if args.loud:
  from_echo = Echo('FROM', from_tar.stderr, sys.stdout)
if to_dest is None:
  # we're doing a local copy
  if not os.path.isdir(to_dir):
    kill(from_tar)
    parser.error('{to_dir!r} is not a valid local directory'.format(**locals()))
  to_tar = subprocess.Popen(['tar'] + verbose + ['-C', to_dir, '-xzpf-'], stdin=from_tar.stdout, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  log.debug('Started `to` tar in process {pid}'.format(pid=to_tar.pid))
  if args.loud:
    to_echo = Echo('TO', to_tar.stdout, sys.stdout)

  (to_stdout, to_stderr) = to_tar.communicate()
else:
  # we're doing a remote copy
  script = replace_all("""import os
import base64
import logging
import subprocess

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(process)d %(thread)d %(msg).{bytes}s'.format(bytes=2*1024**2))
log = logging.getLogger()
log.setLevel(%loglevel%)

rc = -1

dst = %dst%
if not os.path.isdir(dst):
  log.error('Not a directory: {dst!r}'.format(**locals()))
  exit(1)

encoded_tarball = %encoded_tarball%
p = subprocess.Popen(['tar'] + %verbose% + ['-C', dst, '-xzpf-'], stdin=subprocess.PIPE)
(stdout, stderr) = p.communicate(base64.b64decode(encoded_tarball))
rc = p.wait()

exit(rc)
""",
    {
      '%loglevel%': log.level,
      '%dst%': to_dir,
      '%encoded_tarball%': base64.b64encode(from_tar.stdout.read()),
      '%verbose%': verbose,
    }
  )
  to_tar = subprocess.Popen(['ssh', '-q', to_dest, 'python'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  log.debug('Started `to` tar via ssh in process {pid}'.format(pid=to_tar.pid))
  to_tar.stdin.write(script)
  to_tar.stdin.close()
  if args.loud:
    to_echo = Echo('TO', to_tar.stdout, sys.stdout)
  else:
    to_stdout = to_tar.stdout.read()
  to_stderr = to_tar.stderr.read()
  to_rc = to_tar.wait()
  
if from_tar and to_tar:
  while (from_tar.poll() is None) or (to_tar.poll() is None):
    log.debug('Copy status: {from_poll} {to_poll}'.format(from_poll=from_tar.poll(), to_poll=to_tar.poll()))
    time.sleep(0.1)

  (from_stdout, from_stderr) = from_tar.communicate()
  from_rc = from_tar.wait()
  
  to_rc = to_tar.wait()

  log.debug('From: {from_rc}, {from_stdout!r}, {from_stderr!r}'.format(**locals()))
  log.debug('To: {to_rc}, {to_stdout!r}, {to_stderr!r}'.format(**locals()))
  
  if (from_rc != 0) and (not args.loud):
    sys.stderr.write(from_stderr)
  
  if to_rc != 0:
    sys.stderr.write(to_stderr)
  exit(0 if (from_rc == 0) and (to_rc == 0) else 1)
else:
  exit(1)
