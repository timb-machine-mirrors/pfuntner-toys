#! /usr/bin/env python3

import os
import sys
import time
import signal
import logging
import datetime
import argparse

def handleCntlC(signum, stack):
  global done
  done = True

def banner(s):
  print('*' * (len(s) + 4))
  print("* %s *" % s)
  print('*' * (len(s) + 4))

bellChar = '\a'

signal.signal(signal.SIGINT, handleCntlC)

parser = argparse.ArgumentParser(description='Beep beep beep ...')
parser.add_argument('-b', '--background', action='store_true', help='Run in background, every 15 minutes')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

is_foreground = bool(os.tcgetpgrp(sys.stdout.fileno()) == os.getpid())

if args.background:
  if is_foreground:
    parser.error('--background is only allowed from background processes')
else:
  if not is_foreground:
    parser.error('use --background for background processes')

  start = datetime.datetime.now()
  banner("%s: Beeping started" % start)

done = False

while not done:
  sys.stdout.write(bellChar)
  # sys.stdout.flush()
  time.sleep((15*60) if args.background else 1)

if not args.background:
  print("")
  stop = datetime.datetime.now()
  banner("%s: Beeping ended, %s" % (stop, stop-start))
