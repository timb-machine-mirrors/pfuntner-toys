#! /usr/bin/env python3

import re
import signal
import logging
import argparse
import subprocess

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))

  p = None
  try:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  except Exception as e:
    (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

  if p:
    if stdin:
      p.stdin.write(stdin.encode())
    if capture:
      (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    else:
      (stdout, stderr) = ('', '')
    rc = p.wait()

  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Show the top commits of all branches')
parser.add_argument('branches', metavar='branch', nargs='*', help='Zero or more branches, default=all branches')
parser.add_argument('-d', '--depth', default=10, type=int, help='Depth of commits, default=10')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

"""
* CCC-2092
  CCC-2144
  CCC-2151
  master
"""
branch_regexp = re.compile(r'([* ])\s+(\S+)$', flags=re.MULTILINE)
(rc, stdout, stderr) = run('git branch')
if rc == 0:
  branches = list(branch_regexp.findall(stdout))
  log.info(f'branches: {branches}')

  branch_names = [branch[1] for branch in branches]
  for branch in (args.branches or []):
    if branch not in branch_names:
      log.warning(f'{branch!r} is not a branch to this repo')

  for (current, branch) in branches:
    if (not args.branches) or branch in args.branches:
      run(['banner', '{prefix}{branch}{suffix}'.format(prefix='* ' if current == '*' else '', branch=branch, suffix=' *' if current == '*' else '')], capture=False)
      run('git-log -b {branch} | head -{depth}'.format(branch=branch, depth=args.depth+1), shell=True, capture=False)
      print()
else:
  parser.error('Could not determine branches')
