#! /usr/bin/env python3

"""
  Compare file trees and report just the names of files that are different
"""

import sys
import os
import getopt
import hashlib

def syntax(msg=None):
  if msg:
    sys.stderr.write(msg + "\n")
  sys.stderr.write("Syntax: {pgm} [--all|-a] PATH1 PATH2\n".format(pgm=sys.argv[0]))
  exit(1)

def filetype(path):
  if os.path.isdir(path):
    return "directory"
  elif os.path.isfile(path):
    return "regular file"
  else:
    return "unknown type"

def md5sum(path):
  sum = hashlib.md5()
  with open(path) as stream:
    sum.update(stream.read().encode('utf-8'))
  return sum.digest()

def process(path1, path2):
  if not os.path.exists(path1):
    print("Does_not_exist: {path1!r}".format(**locals()))
  elif not os.path.exists(path2):
    print("Does_not_exist: {path2!r}".format(**locals()))
  else:
    if os.path.samefile(path1, path2):
      print("Same_files: {path1!r} and {path2!r}".format(**locals()))
      return
    elif os.path.isdir(path1) and os.path.isdir(path2):
      for file in sorted(list(set(os.listdir(path1)) | set(os.listdir(path2)))):
        process(os.path.join(path1, file), os.path.join(path2, file))
    elif os.path.isfile(path1) and os.path.isfile(path2):
      if md5sum(path1) != md5sum(path2):
        print("Difference: {path1!r} and {path2!r}".format(**locals()))
      elif allFiles:
        print("Equal: {path1!r} and {path2!r}".format(**locals()))
    else:
      print("Type_mismatch: {path1!r} is a {type1!r} and {path2} is a {type2}".format(type1=filetype(path1), type2=filetype(path2), **locals()))

(opts,args) = ([], [])
try:
  (opts,args) = getopt.getopt(sys.argv[1:], "a", ["all"])
except Exception as e:
  syntax("Caught {e!s}".format(**locals()))

allFiles = False
for (opt,arg) in opts:
  if opt in ["-a", "--all"]:
    allFiles = not allFiles
  else:
    syntax("Don't know how to handle {opt}".format(**locals()))

if len(args) != 2:
  syntax("Exactly two paths are expected")

process(args[0], args[1])
