#! /usr/bin/env python3

import re
import sys
import signal
import logging
import argparse
import subprocess

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  if stdin:
    p.stdin.write(stdin.encode())
    p.stdin.close()
  if capture:
    (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  else:
    (stdout, stderr) = ('', '')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Clean Docker images and containers')
parser.add_argument('-f', '--force', action='store_true', help='Do not prompt for permission')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

(rc, stdout, stderr) = run('docker ps -qa')
containers = stdout.splitlines()
print(f'Containers: {containers}')
(rc, stdout, stderr) = run('docker images -q')
images = stdout.splitlines()
print(f'Images: {images}')

if containers or images:
  if args.force:
    ans = None
  else:
    print('\nDelete container and images? ', end='')
    ans = sys.stdin.readline()
  if args.force or re.match(r'y(e(s?))?', ans, flags=re.IGNORECASE):
    if containers:
      run('docker rm -f {}'.format(' '.join(containers)), capture=False)
      print()
    if images:
      run('docker rmi -f {}'.format(' '.join(images)), capture=False)
  else:
    print('Images/containers not cleaned')
else:
  print('No container or images to clean')
