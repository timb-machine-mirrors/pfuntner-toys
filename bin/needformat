#! /usr/bin/env python3

import re
import os
import sys
import logging
import argparse

class Reader(object):
  def __init__(self, stream):
    self.data = stream.read()
    self.pos = 0

  def read(self, bytes=1):
    ret = ''
    for iteration in range(bytes):
      if self.pos >= len(self.data):
        break
      ret += self.data[self.pos]
      self.pos += 1
    return ret

  def push(self, s):
    self.pos -= len(s)

  def currline(self):
    start = self.pos
    if (self.pos >= len(self.data)) or (self.data[self.pos] == '\n'):
      start -= 1
    while (start > 0) and (self.data[start] != '\n'):
      start -= 1
    stop = self.pos
    while (stop < len(self.data)) and (self.data[stop] != '\n'):
      stop += 1

    return self.data[start:stop]

def process(filename):
  if os.path.isfile(filename):
    log.info('Processing {filename}'.format(**locals()))
    with open(filename) as stream:
      in_string = False
      in_comment = False
      delim = None
      tripled = False
      has_brace = False
      need_format = False
      reader = Reader(stream)
      while True:
        c = reader.read()
        log.info('{c!r} pos:{reader.pos} in_string:{in_string} in_comment:{in_comment} delim:{delim} tripled:{tripled} has_brace:{has_brace} need_format:{need_format}'.format(**locals()))

        if not c:
          log.debug('eof')
          break

        if (not in_string) and (c == '#'):
          in_comment = True

        if not in_comment:
          if in_string:
            if c == '\\':
              c = reader.read()
            elif c == delim:
              if tripled:
                follow = reader.read(2)
                if follow == delim*2:
                  in_string = False
                  delim = None
                  tripled = False
                  if has_brace:
                    need_format = True
                    has_brace = False
                else:
                  reader.push(follow)
              else:
                in_string = False
                delim = None
                if has_brace:
                  need_format = True
                  has_brace = False
            elif c in '{}':
              has_brace = True
          else: # not in_string
            if need_format:
              follow = reader.read(6)
              if (c+follow) == '.format':
                log.info('Found `.format()` after a string at position {pos}'.format(pos=reader.pos-6))
              else:
                log.warning('Did not find `.format()` after a string at {filename}:{pos}: {line!r}'.format(pos=reader.pos-6, line=reader.currline(), **locals()))
                reader.push(follow)
              need_format = False
            elif c in '\'"':
              delim = c
              in_string = True
              follow = reader.read(2)
              if follow == c*2:
                tripled = True
              else:
                reader.push(follow)
        
        if in_comment and (c == '\n'):
          in_comment = False
      
  else:
    log.warning('{filename!r} is not a file'.format(**locals()))

parser = argparse.ArgumentParser(description='Find strings in Python code where .format() is missing')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('files', metavar='file', nargs='+', help='One or more files to scan')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

list(map(process, args.files))
