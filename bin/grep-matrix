#! /usr/bin/env python3

import re
import os
import signal
import logging
import argparse

from table import Table

parser = argparse.ArgumentParser(description='Search for multiple regular expressions across multiple files and display in a matrix')
parser.add_argument('files', metavar='file', nargs='+', help='One or more paths to files')
parser.add_argument('-e', '--expression', action='append', help='One or more regular expression patterns')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if not args.expression:
  parser.error('At least one regular expression pattern is required')
regexps = [re.compile(pattern) for pattern in args.expression]

missing_files = []
for filename in args.files:
  if not os.path.exists(filename) or os.path.isdir(filename):
    missing_files.append(filename)

if missing_files:
  parser.error('Could not find: {}'.format(', '.join([repr(filename) for filename in missing_files])))

table = Table(['file'] + [regexp.pattern for regexp in regexps])

for filename in args.files:
  row = [filename]
  lines = []
  with open(filename) as stream:
    lines = stream.read().splitlines()
  for regexp in regexps:
    row.append(len([True for line in lines if regexp.search(line)]))
  table.add(row)

print(str(table), end='')
