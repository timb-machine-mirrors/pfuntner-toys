#! /usr/bin/env python3

import re
import sys
import logging
import argparse
import subprocess
  
parser = argparse.ArgumentParser(description='Search bash aliases, printing the definition(s)')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('-a', '--all', dest='all', action='store_true', help='Show entire alias definition')
parser.add_argument('regexp', nargs='?', help='Regexp to match the alias name')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

data = ''

if sys.stdin.isatty():
  cmd = ['bash', '-ic', 'alias']
  log.debug('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (data, stderr) = p.communicate()
  data = data.decode('utf-8')
  stderr = stderr.decode('utf-8')
  rc = p.wait()
  log.debug('{cmd}: {rc}, {data!r}, {stderr!r}'.format(**locals()))
else:
  data = sys.stdin.read()

main_regexp = re.compile('^alias ([^=]+)=\'?([^\']+)')
alias_regexp = re.compile(args.regexp) if args.regexp else None

for line in data.splitlines():
  match = main_regexp.search(line)
  log.debug('{line!r}: {groups!r}'.format(
    groups=match.groups() if match else None,
    **locals()
  ))
  if match:
    if (not alias_regexp) or alias_regexp.search(match.group(1)):
      if args.all:
        print(line)
      else:
        print(match.group(2))
