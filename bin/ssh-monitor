#! /usr/bin/env python3

import sys
import json
import time
import logging
import argparse
import datetime
import subprocess

def run(cmd):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  # alternately, if trapping is conditional:
  # if trap:
  #   stdout = stdout.decode('utf-8')
  #   stderr = stderr.decode('utf-8')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Monitor a system via ssh over a period')
parser.add_argument('-i', '--interval', type=float, default=5, help='Specify internal between ssh commands')
parser.add_argument('-t', '--timeout', type=int, default=1, help='Specify ssh connect timeout')
parser.add_argument('-q', '--quiet', action='store_true', help='Use ssh --quiet option')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
parser.add_argument('host', help='Remote host name')
parser.add_argument('cmd', nargs='+', help='Command to run on remote host')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

cmd = ['ssh', '-o', f'ConnectTimeout={args.timeout}', args.host] + (['-q'] if args.quiet else []) + args.cmd
log.info(f'cmd: {cmd}')

while True:
  (rc, stdout, stderr) = run(cmd)
  print(json.dumps({
    'time': datetime.datetime.now().isoformat(),
    'stdout': stdout,
    'stderr': stderr,
    'rc': rc,
  }, sort_keys=True))
  time.sleep(args.interval)
