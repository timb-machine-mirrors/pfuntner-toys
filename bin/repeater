#! /usr/bin/env python3

import json
import time
import signal
import logging
import argparse
import datetime
import subprocess

def interrupt_handler(signum, stack_frame):
  global quit
  log.warning('Shutting down')
  quit = True

def write_results(results):
  with open('repeater.json.work', 'w') as stream:
    json.dump(results, stream)
  run('rm -f repeater.json; mv -f repeater.json.work repeater.json', shell=True)

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))

  p = None
  try:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  except Exception as e:
    (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

  if p:
    if stdin:
      p.stdin.write(stdin.encode())
    if capture:
      (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    else:
      (stdout, stderr) = ('', '')
    rc = p.wait()

  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Repeat a command over and over')
parser.add_argument('command', nargs='+', help='Command and arguments to execute')
parser.add_argument('-i', '--iterations', type=int, help='Stop after a certain number of iterations')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))
signal.signal(signal.SIGINT, interrupt_handler)

results = {
  'command': args.command,
  'results': list(),
}

quit = False

write_results(results)
iteration = 1
while (not quit) and ((not args.iterations) or iteration <= args.iterations):
  p = subprocess.Popen(args.command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
  start = datetime.datetime.now()
  if iteration == 1 or (iteration % 25) == 0:
    print(f'{start!s}: Iteration {iteration}')
  results['results'].append({
    'start': start.isoformat(),
  })

  while not quit:
    time.sleep(0.0005)
    log.debug('polling')
    if p.poll() is None:
      results['results'][-1]['duration'] = str(datetime.datetime.now() - start)
      write_results(results)
    else:
      break

  if p.poll() is None:
    results['results'][-1]['killed'] = True
    log.warning('Shutting down command')
    p.kill()

  (stdout, stderr) = p.communicate()
  rc = p.wait()
  results['results'][-1]['rc'] = rc
  results['results'][-1]['stdout'] = stdout.decode()
  results['results'][-1]['stderr'] = stderr.decode()
  results['results'][-1]['duration'] = str(datetime.datetime.now() - start)
    
  write_results(results)

  iteration += 1
