#! /usr/bin/env python3

import os
import sys
import logging
import argparse
import subprocess

def run(cmd):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  # alternately, if trapping is conditional:
  # if trap:
  #   stdout = stdout.decode('utf-8')
  #   stderr = stderr.decode('utf-8')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Run a local script on a remote machine')
parser.add_argument('host', help='Name of remote host')
parser.add_argument('script', help='Path to script')
parser.add_argument('args', metavar='arg', nargs='*', help='Arguments to script')
parser.add_argument('-i', '--interpreter', help='Optional interpreter')
parser.add_argument('-q', '--quiet', action='store_true', help='Use ssh -q option')
parser.add_argument('-b', '--become', action='store_true', help='Become superuser')
parser.add_argument('-c', '--no-clean', action='store_true', help='Do not remove remote script')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

if os.path.isfile(args.script):
  basename = os.path.basename(args.script)
  dest = os.path.join('/tmp', basename)
  (rc, stdout, stderr) = run(['scp', args.script, f'{args.host}:{dest}'])
  if rc == 0:
    run(['ssh', args.host, 'chmod', 'a+x', dest])
    (rc, stdout, stderr) = run(['ssh'] + (['-q'] if args.quiet else []) + [args.host] + ([args.interpreter] if args.interpreter else []) + [dest] + args.args)
    sys.stdout.write(stdout)
    sys.stderr.write(stderr)
    run(['ssh', args.host, 'rm', dest])
  else:
    parser.error(f'Could not copy to {dest} @ {args.host}')
else:
  parser.error(f'Could not find {args.script!r}')
