#! /usr/bin/env python3

import os
import re
import sys
import shlex
import logging
import argparse
import tempfile
import subprocess

def run(cmd, trap=True):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE if trap else None, stderr=subprocess.PIPE if trap else None)
  if trap:
    (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  else:
    (stdout, stderr) = ('', '')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

def replace_imports(path):
  tmp = tempfile.NamedTemporaryFile(mode='w')
  with open(path) as stream:
    imported = False
    for line in stream.read().splitlines():
      match = import_regexp.search(line)
      if match:
        script = os.path.join(os.path.dirname(path), match.group(1) + '.py')
        cls = match.group(2)
        log.info(f'importing {cls} from {script}')
        with open(script) as script_stream:
          copy = False
          for script_line in script_stream.read().splitlines():
            if copy and copy_end_regexp.search(script_line):
              log.info(f'Stopping copying at: {script_line!r}')
              copy = False
              break
            elif not copy and re.search(f'^class\s+{cls}\(', script_line):
              copy = True
              imported = True
            if copy:
              log.info(f'Copying: {script_line!r}')
              tmp.write(script_line + '\n')
      else:
        tmp.write(line + '\n')
  tmp.flush()
  return tmp

def command(cmd, trap=True, apply_interp_and_env=False):
  if isinstance(cmd, str):
    cmd = cmd.split()

  if apply_interp_and_env:
    if args.interpreter:
      cmd = args.interpreter.split() + cmd

    if args.env:
      cmd = args.env + cmd

  if args.docker:
    (rc, stdout, stderr) = run(['docker', 'exec', args.host, 'sh', '-c', shlex.join(cmd)], trap=trap)
  else:
    (rc, stdout, stderr) = run(['ssh'] + (['-q'] if args.quiet else []) + [args.host] + (['sudo'] if args.become else []) + cmd, trap=trap)

  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Run a local script on a remote machine')
parser.add_argument('host', help='Name of remote host')
parser.add_argument('script', help='Path to script')
parser.add_argument('args', metavar='arg', nargs='*', help='Arguments to script')
parser.add_argument('-i', '--interpreter', help='Optional interpreter, arguments')
parser.add_argument('-d', '--docker', action='store_true', help='Treat target as Docker container')
parser.add_argument('-q', '--quiet', action='store_true', help='Use ssh -q option')
parser.add_argument('-b', '--become', action='store_true', help='Become superuser')
parser.add_argument('-e', '--env', action='append', help='Set environment variable: NAME=VALUE')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

import_regexp = re.compile(r'^from\s+(\S+)\s+import\s+(\S+)$')
copy_end_regexp = re.compile(r'^\S')

rc = 0

if os.path.isfile(args.script):
  basename = os.path.basename(args.script)
  src = replace_imports(args.script)

  dest = os.path.join('/tmp', basename)
  if args.docker:
    (rc, stdout, stderr) = run(['docker', 'cp', src.name, f'{args.host}:{dest}'])
  else:
    (rc, stdout, stderr) = run(['scp', src.name, f'{args.host}:{dest}'])
  if rc == 0:
    command(['chmod', 'a+rx', dest])
    (rc, foo, foo) = command([dest] + args.args, trap=False, apply_interp_and_env=True)
    command(['rm', dest])
  else:
    parser.error(f'Could not copy to {dest} @ {args.host}')
else:
  parser.error(f'Could not find {args.script!r}')

exit(rc)
