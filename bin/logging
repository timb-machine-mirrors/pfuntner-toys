#! /usr/bin/env python3

import re
import sys
import json
import base64
import logging
import argparse

def dump(obj):
  print(base64.b64encode(json.dumps(obj).encode()).decode())

def interpret_int(s):
  if s in [None, 'None']:
    ret = 0
  else:
    ret = int(s)
  return ret

parser = argparse.ArgumentParser(description='Bash implementation of Python logging')

group1 = parser.add_mutually_exclusive_group(required=True)
group1.add_argument('--level', help='Logging level: info, ERROR-1, DEBUG+2')
group1.add_argument('--log', help='The payload created by `logging --level`')

group2 = parser.add_mutually_exclusive_group()
group2.add_argument('--fatal', '--critical', action='store_true', help='Fatal message')
group2.add_argument('--error', action='store_true', help='Error message')
group2.add_argument('--warning', action='store_true', help='Warning message')
group2.add_argument('--info', action='store_true', help='Informational message')
group2.add_argument('--debug', action='store_true', help='Debugging message')

parser.add_argument('message', nargs='*', help='The message')

parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

log.info(f'{args=}')

levels = {level: getattr(logging, level.upper()) for level in ['critical', 'fatal', 'error', 'warning', 'info', 'debug']}
log.info(f'{levels=}')

if args.level is not None:
  if any([getattr(args, level, False) for level in levels.keys()]) or getattr(args, 'message'):
    parser.error('--level requires no other option')

  match = re.search(r'^\d+$', args.level)
  if match:
    level = int(args.level)
  else:
    match = re.search('^(' + ('|'.join(list(levels.keys()))) + r')(?:([+-])(\d+))?$', args.level, flags=re.IGNORECASE)
    if match:
      base_level = levels[match.group(1).lower()]
      offset = interpret_int(match.group(3)) * 10
      level = base_level + (offset * (1 if match.group(2) == '+' else -1))
    else:
      parser.error(f'Invalid level: {args.level!r}')

  dump({'level': level})
else:
  level = [value for (key, value) in levels.items() if getattr(args, key, False)][0]

  message = ' '.join(args.message)
  if not message:
    parser.error('No message')

  logger = logging.getLogger()
  logger.setLevel(json.loads(base64.b64decode(args.log.encode()).decode())['level'])
  logger.log(level, message)
