#! /usr/bin/env python3

import re
import os
import sys
import json
import yaml
import logging
import argparse

def parse_json(file_name, s):
  ret = None
  try:
    ret = json.loads(s)
  except Exception as e:
    log.info('Could not parse {file_name} as JSON: {e!s}'.format(file_name=file_name or 'stdin', e=e))
  return ret

def parse_yaml(file_name, s):
  ret = None
  try:
    ret = yaml.load(s)
    if ret is None:
      raise Exception('yaml.load() returned None')
  except Exception as e:
    log.info('Could not parse {file_name} as YAML: {e!s}'.format(file_name=file_name or 'stdin', e=e))
  return ret

def visit(file_name, mode, root, parent=None):
  if isinstance(root, list):
    for child in root:
      visit(file_name, mode, child, root)
  elif isinstance(root, dict):
    for child in root.values():
      visit(file_name, mode, child, root)
  elif isinstance(root, str):
    if regexp.search(root):
      if mode == 'json':
        lines = json.dumps(parent).splitlines()
      elif mode == 'yaml':
        lines = yaml.dump(parent).splitlines()
      else:
        log.fatal(f'Unexpected mode: {mode!r}')
      prefix = f'{file_name}: ' or ''
      print('\n'.join([f'{prefix}{line}' for line in lines]) + '\n')
    
def process(file_name=None):
  data = None
  mode = None
  root = None
  if file_name:
    if os.path.exists(file_name):
      if not os.path.isdir(file_name):
        with open(file_name) as stream:
          data = stream.read()
        if re.search('.json$', file_name, flags=re.IGNORECASE):
          root = parse_json(file_name, data)
          if not root:
            log.warning(f'Could not parse as JSON: {file_name!r}')
            return
          mode = 'json'
        elif re.search('.y(?:a?)ml$', file_name, flags=re.IGNORECASE):
          root = parse_yaml(file_name, data)
          if not root:
            log.warning(f'Could not parse as YAML: {file_name!r}')
            return
          mode = 'yaml'
      else:
        log.warning(f'Not found: {file_name!r}')
    else:
      log.warning(f'Not a file: {file_name!r}')
  else:
    if sys.stdin.isatty():
      parser.error('stdin must be redirected if no file names are specified on command line')
    data = sys.stdin.read()

  if not root:
    root = parse_json(file_name, data)
    if root:
      mode = 'json'

  if not root:
    root = parse_yaml(file_name, data)
    if root:
      mode = 'yaml'

  if not root:
    log.warning('Could not parse {} as JSON or YAML'.format(file_name or 'stdin'))
    return

  visit(file_name, mode, root)

parser = argparse.ArgumentParser(description='Grep meta files (JSON, YAML, etc.)')
parser.add_argument('pattern', help='Regular expression with which to do searches')
parser.add_argument('files', metavar='file', nargs='*', help='Zero or more files')
parser.add_argument('-i', '--ignore-case', action='store_true', help='Search in a case-insensitive way')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

regexp = re.compile(args.pattern, flags=re.IGNORECASE if args.ignore_case else 0)

if args.files:
  for file_name in args.files:
    process(file_name)
else:
  process()
