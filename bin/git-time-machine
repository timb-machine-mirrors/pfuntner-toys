#! /usr/bin/env python3

import re
import signal
import logging
import argparse
import subprocess

from gityup import Git


def buffer(*lines):
  global buffering
  if args.find_first:
    buffering[-1] += lines
  else:
    print('\n'.join(lines))


def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))

  p = None
  try:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  except Exception as e:
    (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

  if p:
    if stdin:
      p.stdin.write(stdin.encode())
    if capture:
      (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    else:
      (stdout, stderr) = ('', '')
    rc = p.wait()

  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)


def abort(signum, stack_frame):
  cleanup(1)


def cleanup(rc):
  run(f'git checkout {current_branch}', capture=False)
  exit(rc)


parser = argparse.ArgumentParser(description='Grep git branches over time')
parser.add_argument('regexp', help='Regular expression with which to search')
parser.add_argument('-f', '--find-first', action='store_true', help='Find first occurrence of a regular expression')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, abort)
signal.signal(signal.SIGINT, abort)

buffering = list()

current_branch = None
(rc, stdout, stderr) = run('git branch')
if rc == 0:
  match = re.search('^\*\s+(\S+)', stdout, flags=re.MULTILINE)
  if match:
    current_branch = match.group(1)

if not current_branch:
  parser.error('Can\'t figure out current branch')

git = Git(log=log)
commits = git.parse_log()
for commit in commits:
  """
  {
    "author": "dbilling@cisco.com",
    "commit": "4e09a23bdd5819c1060e091eeffbc19319b113fa",
    "files": [
      {
        "name": "README.md",
        "operation": "modify"
      },
      ...
      {
        "name": "tasks/5-access.yml",
        "operation": "modify"
      }
    ],
    "messages": [
      "CCC-2197 Set pass_max_days to 365 updated to current benchmarks (#258)",
      ...
    ],
    "utc_date": "2021-07-15 03:04:52"
  }

  """
  if args.find_first:
    buffering.append([])
  buffer(f'''{commit['commit']} {commit['utc_date']} {commit['author']} {commit['messages'][0]}''')
  run(f'''git checkout {commit['commit']}''')
  (rc, stdout, stderr) = run(['grep', '-r', repr(args.regexp), '*'], shell=True)
  buffer(*stdout.splitlines())

  if args.find_first:
    if len(buffering[-1]) == 1:
      if len(buffering) == 1:
        print(f'{args.regexp!r} not found in {buffering[-1][0]}')
        cleanup(1)
      else:
        print('\n'.join(buffering[-2]))
        cleanup(0)
    else:
      print(f'{args.regexp!r} is in {buffering[-1][0]}')

if args.find_first:
  print(f'{args.regexp!r} is in every commit')

cleanup(0)
