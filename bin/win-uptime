#! /usr/bin/env python3

import re
import sys
import logging
import argparse
import datetime
import subprocess

def see(title):
  value = eval(title)
  log.info('{title}: {value!r}'.format(**locals()))

def mod(dividend, divisor):
  quotient = int(dividend / divisor)
  remainder = dividend % divisor
  return (quotient, remainder)

parser = argparse.ArgumentParser(description='Report uptime for Windoze')
parser.add_argument('-p', '--pretty', action='store_true', help='Print in pretty form')
parser.add_argument('-s', '--since', action='store_true', help='Print time up in ISO format')
parser.add_argument('-v', '--verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

"""
[jpfuntne@JPFUNTNE-GCEYJ ~]$ systeminfo | grep "System Boot Time"
System Boot Time:          2019-10-22, 2:48:35 PM
[jpfuntne@JPFUNTNE-GCEYJ ~]$ ^Csteminfo | grep "System Boot Time"
e[jpfuntne@JPFUNTNE-GCEYJ ~]$ echo ['uptime']: '06:54:05 up 13 days, 18:45,  2 users,  load average: 0.25, 0.97, 0.96'
[uptime]: 06:54:05 up 13 days, 18:45,  2 users,  load average: 0.25, 0.97, 0.96
[jpfuntne@JPFUNTNE-GCEYJ ~]$
"""

if 'win' in sys.platform.lower():
  cmd = ['systeminfo']
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = p.communicate()
  stdout = stdout.decode('utf-8')
  stderr = stderr.decode('utf-8')
  rc = p.wait()
  log.debug('{cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  match = re.search('System Boot Time:\s+(\d{4}-\d{2}-\d{2}, \d{1,2}:\d{2}:\d{2} [AP]M)', stdout, flags=re.MULTILINE)
  if match:
    timestamp_string = match.group(1)
    see('timestamp_string')
    timestamp = datetime.datetime.strptime(timestamp_string, '%Y-%m-%d, %H:%M:%S %p')
    see('timestamp')
    if args.since:
      print(timestamp.isoformat().replace('T', ' '))
    else:
      now = datetime.datetime.now()
      now_hms = now.strftime('%H:%M:%S')

      seconds = (now - timestamp).total_seconds()
      see('seconds')
      (days, seconds) = mod(seconds, 24*60*60)
      see('(days, seconds)')
      (hours, seconds) = mod(seconds, 60*60)
      see('(hours, seconds)')
      (minutes, seconds) = mod(seconds, 60)
      see('(minutes, seconds)')

      if args.pretty:
        (weeks, days) = mod(days, 7)
        if weeks > 0:
          print('up {weeks} weeks, {days} days, {hours} hours, {minutes} minutes'.format(**locals()))
        elif days > 0:
          print('up {days} days, {hours} hours, {minutes} minutes'.format(**locals()))
        elif hours > 0:
          print('up {hours} hours, {minutes} minutes'.format(**locals()))
        elif minutes > 0:
          print('up {minutes} minutes'.format(**locals()))
        else:
          print('up {seconds} seconds'.format(**locals()))
      else:
        if days > 1:
          elapsed = '{days} days, {hours:02}:{minutes:02}'.format(**locals())
        elif days == 1:
          elapsed = '{days} day, {hours:02}:{minutes:02}'.format(**locals())
        elif hours > 0:
          elapsed = '{hours:02}:{minutes:02}'.format(**locals())
        elif minutes > 0:
          elapsed = '{minutes} min'.format(**locals())
        elif minutes > 0:
          elapsed = '{seconds} sec'.format(**locals())

        print(' {now_hms} {elapsed}'.format(**locals()))
  else:
    log.error('Could not extract system boot time from `systeminfo`')
else:
  log.fatal('You\'re not on Windoze, you lucky lucky dog!')
