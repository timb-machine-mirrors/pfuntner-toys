#! /usr/bin/env python3

import re
import os
import sys
import json
import signal
import logging
import argparse

# def new_dest(o):
#   return list() if isinstance(o, int) else dict()
# 
# def report(path):
#   if path:
#     src = root
#     ret = new_dest(path[0])
#     dest = ret
#     while path:
#       log.debug(f'path: {path}, src: {src}, ret: {ret}')
#       key = path.pop(0)
#       if path:
#         if isinstance(key, str):
#           dest[key] = new_dest(src[key])
#         else:
#           dest.append(new_dest(src[key]))
#       else:
#         if isinstance(key, str):
#           dest[key] = src[key]
#         else:
#           dest.append(src[key])
#       src = src[key]
#     
#     print(f'{filename!r}')
#     json.dump(ret, sys.stdout, indent=2, sort_keys=True)
#     print('\n')

def report(path):
  global paths

  if path and path[0] not in paths:
    log.debug(f'path: {path}, paths: {paths}')
    print(f'{filename!r}')
    json.dump(root[path[0]] if isinstance(root, list) else {path[0]: root[path[0]]}, sys.stdout, indent=2, sort_keys=True)
    print('\n')
    paths.append(path[0])

def hunt(path, tree):
  if tree:
    if isinstance(tree, list):
      for pos in range(len(tree)):
        hunt(path + [pos], tree[pos])
    elif isinstance(tree, dict):
      for (key, value) in tree.items():
        if regexp.search(key):
          report(path + [key])
        else:
          hunt(path + [key], value)
    elif isinstance(tree, str):
      if regexp.search(tree):
        report(path)

parser = argparse.ArgumentParser(description='Hunt for regular expression in json/yaml keys/values')
parser.add_argument('regexp', help='Regular expression with which to search')
parser.add_argument('files', metavar='file', nargs='+', help='One or more files to search')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

yaml = None
regexp = re.compile(args.regexp)
empty_line = re.compile(r'^\s*(#.*)?$') # this regular expression will match any line that is blank - only whitespace or comments

for filename in args.files:
  log.info(f'Processing {filename!r}')
  if os.path.exists(filename):
    if not os.path.isdir(filename):
      with open(filename) as stream:
        file_contents = stream.read()
      if [line for line in file_contents.splitlines() if not empty_line.search(line)]:
        # process a non-empty file
        root = None
  
        try:
          root = json.loads(file_contents)
        except Exception as e:
          log.info(f'Could not process {filename!r} as json: {e!s}')
  
        if root is None:
          if yaml is None:
            yaml = __import__('yaml')
          try:
            root = yaml.load(file_contents, Loader=yaml.BaseLoader)
          except Exception as e:
            log.info(f'Could not process {filename!r} as yaml: {e!s}')
  
        if root is None:
          log.warn(f'Could not process {filename!r} as either json or yaml')
        else:
          if isinstance(root, list) or isinstance(root, dict):
            paths = []
            hunt([], root)
          else:
            log.warn('{filename!r} is of unsupported type {type}'.format(filename=filename, type=root.__class__.__name__))
    else:
      log.warn(f'Could not process directory {filename!r}')
  else:
    log.warn(f'Could not find {filename!r}')
