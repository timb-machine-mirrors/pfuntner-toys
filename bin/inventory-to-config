#! /usr/bin/env python3

import os
import re
import signal
import logging
import argparse

def emit(stream, parms, inventory_name, ssh_config_name):
  value = parms.get(inventory_name)
  if value:
    stream.write(f'\t{ssh_config_name} {value}\n')

default_config_filename = os.path.expanduser('~/.ssh/config')

parser = argparse.ArgumentParser(description='Convert an Ansible inventory ini file to ~/.ssh/config')
parser.add_argument('inventory_file',  metavar='inventory-file', help='Path to Ansible inventory file')
parser.add_argument('-s', '--ssh-config-file', default=default_config_filename, help=f'Path to ssh config file: default: {default_config_filename}')
parser.add_argument('-f', '--force', action='count', help='Replace ssh config file if it exists')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

log.debug(f'args: {args}')

# worker0 ansible_host=3.94.90.33 ansible_user=ubuntu ansible_port=22 ansible_ssh_private_key_file=/home/ubuntu/.ssh/pfuntner-aws.pem kubernetes_role="node"
extract_hostname = re.compile(r'^(\S+)\s+(.*)$')
extract_parameters = re.compile(r'(\S+)="?([^ \t"]+)"?')

inventory = {}
if not os.path.exists(args.inventory_file):
  parser.error(f'Could not find {args.inventory_file!r}')
with open(args.inventory_file) as stream:
  for line in stream.read().splitlines():
    hostname_match = extract_hostname.search(line)
    if hostname_match:
      inventory[hostname_match.group(1)] = {} 
      for parm in extract_parameters.findall(hostname_match.group(2)):
        inventory[hostname_match.group(1)][parm[0]] = parm[1]
log.info(f'inventory: {inventory}')

if inventory:
  if os.path.exists(args.ssh_config_file) and not args.force:
    parser.error(f'{args.ssh_config_file!r} exists - remove it first or use --force to replace it')

  with open(args.ssh_config_file, 'w') as stream:
    for (hostname, parms) in inventory.items():
      print(f'{hostname}: {parms}')
      stream.write(f'Host {hostname}\n')
      emit(stream, parms, 'ansible_host', 'Hostname')
      emit(stream, parms, 'ansible_user', 'User')
      emit(stream, parms, 'ansible_ssh_private_key_file', 'IdentityFile')
else:
  log.error(f'No inventory found in {args.inventory_file!r}')
