#! /usr/bin/env python3

import re
import sys
import signal
import logging
import argparse

parser = argparse.ArgumentParser(description='Pattern anonymizer')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

patterns = [
  # patterns with microseconds should come first so they take precedence over patterns that don't have the microseconds
  { 'regexp': re.compile(r'\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}\.\d{6}'), 'replacement': 'YYYY/MM/DD HH:MM:SS.mmmmmm' },
  { 'regexp': re.compile(r'\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{6}'), 'replacement': 'YYYY-MM-DD HH:MM:SS.mmmmmm' },

  { 'regexp': re.compile(r'\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}'),        'replacement': 'YYYY/MM/DD HH:MM:SS' },
  { 'regexp': re.compile(r'\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}'),        'replacement': 'YYYY-MM-DD HH:MM:SS' },
]

data = sys.stdin.read()
for pattern in patterns:
  data = pattern['regexp'].sub(pattern['replacement'], data)

print(data, end='')
