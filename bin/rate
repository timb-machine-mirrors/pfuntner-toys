#! /usr/bin/env python

import os
import re
import pdb
import time
import logging
import argparse
import datetime

def get_timestamp(s):
  for regexp in regexps:
    match = regexp[0].search(s)
    if match:
      return datetime.datetime.strptime(match.group(1), regexp[1])
  return None

def process(filename):
  with open(filename) as stream:
    timestamps = []
    bytes = 0
    lines = 0
    with_timestamps = 0
    while True:
      line = stream.readline()
      if line:
        bytes += len(line)
        lines += 1
        timestamp = get_timestamp(line)
        if timestamp:
          with_timestamps += 1
          timestamps.append(timestamp)
      else:
        break

    # pdb.set_trace()
    log.debug('read {bytes:,} bytes with {count:,} timestamps, {ratio:.2f}% had comments'.format(count=len(timestamps), ratio=(with_timestamps*100.0)/lines if lines else 0, **locals()))
    if len(timestamps) > 2:
      log.debug('Bytes written over {duration}'.format(duration=timestamps[-1]-timestamps[0]))
    total_rate = '{:.2f}b/sec'.format(bytes / (timestamps[-1]-timestamps[0]).total_seconds()) if len(timestamps) > 1 else 'n/a'

    if os.path.isfile(filename):
      t1 = datetime.datetime.now()
      bytes1 = os.path.getsize(filename)
      time.sleep(60)
      t2 = datetime.datetime.now()
      bytes2 = os.path.getsize(filename)
      measured_rate = '{:.2f}b/sec'.format((bytes2-bytes1) / (t2-t1).total_seconds())
      log.debug('Measured {count:,} bytes over {duration} seconds'.format(count=bytes2-bytes1, duration=(t2-t1).total(seconds)))
    else:
      measured_rate = 'n/a'

    print '{filename} {total_rate} {measured_rate}'.format(**locals())

regexps = [
  (re.compile('(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\,\d{3})'), '%Y-%m-%d %H:%M:%S,%f'),
]

parser = argparse.ArgumentParser()
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('files', metavar='file', nargs='+', help='One or more files')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

map(process, args.files)
