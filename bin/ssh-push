#! /usr/bin/env python3

import os
import re
import sys
import json
import logging
import argparse
import subprocess

def run(cmd):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.debug('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  if (not args.force) and (rc != 0):
    print(f'{cmd} failed - Continue? ', end='', flush=True)
    if not continue_regexp.search(sys.stdin.readline()):
      exit(rc)
  return (rc, stdout, stderr)

def dump(host, cmd, rc, stdout, stderr):
  global output

  stdout = stdout.splitlines()
  stderr = stderr.splitlines()

  if args.json:
    if host not in output:
      output[host] = {}
    if cmd == 'scp':
      output[host]['scp'] = {
        'stdout' : stdout,
        'stderr' : stderr,
      }
    else:
      output[host]['stdout'] = stdout
      output[host]['stderr'] = stderr
  else:
    sys.stdout.write('\n'.join([f'{host}: {line}' for line in stdout]))
    if stdout:
      sys.stdout.write('\n')
    sys.stderr.write('\n'.join([f'{host}: {line}' for line in stderr]))
    if stderr:
      sys.stderr.write('\n')
  
parser = argparse.ArgumentParser(description='Push script to remote one or more remote hosts and run it')
parser.add_argument('hosts', help='One or more comma-delimited hosts')
parser.add_argument('cmd', nargs='+', help='Command and arguments')
parser.add_argument('-f', '--force', action='store_true', help='Ignore errors')
parser.add_argument('-j', '--json', action='store_true', help='Print output in JSON form')
parser.add_argument('-q', '--quiet', action='store_true', help='Use --quiet for ssh/scp')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.INFO - (args.verbose or 0)*10)

log.debug(f'args: {args}')

continue_regexp = re.compile('^y(es?)?', flags=re.IGNORECASE)

script = args.cmd[0]
if not os.path.isfile(script):
  parser.error(f'Not a file: {script!r}')
base = os.path.basename(script)

output = {}
for host in args.hosts.split(','):
  log.info(f'host: {host}')
  dump(host, 'scp', *run(['scp'] + (['-q'] if args.quiet else []) + [script, f'{host}:/tmp/{base}']))
  dump(host, 'scp', *run(['ssh'] + (['-q'] if args.quiet else []) + [host, f'/tmp/{base}'] + args.cmd[1:]))

if args.json:
  json.dump(output, sys.stdout)
  print('')
