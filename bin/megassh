#! /usr/bin/env python3

import time
import json
import base64
import logging
import argparse
import datetime
import subprocess

def echo(host, data):
  if args.raw:
    if data:
      print((f'{host}: ' if len(hosts) > 1 else '') + f'{data!r}')
  else:
    for line in data.splitlines():
      print((f'{host}: ' if len(hosts) > 1 else '') + f'{line}')
  
parser = argparse.ArgumentParser(description='ssh to multiple machines')
parser.add_argument('hosts', help='One or more comma-separated hosts')
parser.add_argument('cmd', help='Command')
parser.add_argument('args', metavar='arg', nargs='*', help='Command arguments')
parser.add_argument('-t', '--tty', action='count', help='Force pseudo-terminal allocation')
parser.add_argument('-e', '--encode', action='store_true', help='Use base64 encoding to protect command')
parser.add_argument('-b', '--become', action='store_true', help='Use sudo on remote system')
parser.add_argument('-q', '--quiet', action='store_true', help='Use ssh -q')

group = parser.add_mutually_exclusive_group()
group.add_argument('-j', '--json', action='store_true', help='Produce JSON output')
group.add_argument('-r', '--raw', action='store_true', help='Produce raw output')

parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - 10*(args.verbose or 0))

log.info(f'args: {args}')

p = subprocess.Popen(['docker', 'ps'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
(stdout, stderr) = p.communicate()
stdout = stdout.decode('utf-8')
stderr = stderr.decode('utf-8')
rc = p.wait()
docker_instances = [line.split()[-1] for line in stdout.splitlines()[1:]]
log.info(f'docker_instances: {docker_instances}')

if args.hosts == 'all':
  try:
    p = subprocess.Popen(['ansible-inventory', '--list'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (stdout, stderr) = p.communicate()
    stdout = stdout.decode('utf-8')
    stderr = stderr.decode('utf-8')
    rc = p.wait()
    args.hosts = ','.join(json.loads(stdout)['targets']['hosts'] + docker_instances) 
  except Exception as e:
    log.debug(f'Ignoring {e!s} from ansible-inventory')

remote_cmd = [args.cmd] + (args.args if args.args else [])
processes = {}
output = {}

hosts = args.hosts.split(',')
for host in hosts:
  log.info(f'Creating {remote_cmd} for {host}')
  if host in docker_instances:
    cmd = ['docker', 'exec', host, '/bin/sh', '-c', ' '.join(remote_cmd)]
  else:
    # use ssh
    cmd = ['ssh'] + (['-q'] if args.quiet else []) + (['-t'] * (args.tty or 0)) + [host]
    if args.encode:
      cmd += ['bash -c "base64 -d | {sudo} bash"'.format(sudo='sudo' if args.become else '')]
    else:
      cmd += (['sudo'] if args.become else []) + remote_cmd

  if args.json:
    output[host] = {
      'start': datetime.datetime.now()
    }

  log.debug(cmd)
  processes[host] = subprocess.Popen(cmd, stdin=subprocess.PIPE if args.encode or args.tty else None, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  if args.encode:
    processes[host].stdin.write(base64.b64encode(' '.join(remote_cmd).encode('utf-8')))
    processes[host].stdin.close()
  elif args.tty:
    processes[host].stdin.close()

secs = .1
while processes:
  time.sleep(secs)
  secs = .25

  hosts = list(processes.keys())
  log.info(f'hosts: {hosts}')
  for host in hosts:
    log.info(f'host: {host}')
    p = processes[host]
    if p.poll() is not None:
      if args.tty:
        """
          I'm not sure why this has to be done this but it isn't, output is screwed up (new lines seem advance the row but don't reset to column 1)
          and I have to run the command myself to restore my login shell - command input is not echoed otherwise.
        """
        subprocess.Popen(['stty', 'sane']).wait()

      if args.encode:
        stdout = p.stdout.read().decode('utf-8')
        stderr = p.stderr.read().decode('utf-8')
      else:
        (stdout, stderr) = p.communicate()
        stdout = stdout.decode('utf-8')
        stderr = stderr.decode('utf-8')
      rc = p.wait()
      if args.json:
        output[host]['rc'] = rc
        output[host]['stdout'] = stdout.splitlines()
        output[host]['stderr'] = stderr.splitlines()
        output[host]['stop'] = datetime.datetime.now()
        output[host]['elapsed'] = str(output[host]['stop'] - output[host]['start'])
        output[host]['stop'] = output[host]['stop'].isoformat()
        output[host]['start'] = output[host]['start'].isoformat()

      else:
        echo(host, stdout)  
        echo(host, stderr)  
      del processes[host]
      if not args.json:
        print('')
    else:
      log.debug(f'{host} still running')

if args.json:
  print(json.dumps(output, indent=2, sort_keys=True))
