#! /usr/bin/env python3

import re
import os
import sys
import time
import json
import fcntl
import base64
import signal
import logging
import datetime
import argparse
import threading
import subprocess


class Reader(threading.Thread):
    def __init__(self, host, stream_type, stream):
        super().__init__()
        self.host = host
        self.stream_type = stream_type
        self.stream = stream
        # set the pipe to non-blocking mode
        fcntl.fcntl(
            self.stream.fileno(),
            fcntl.F_SETFL,
            fcntl.fcntl(self.stream.fileno(), fcntl.F_GETFL) | os.O_NONBLOCK
        )
        self.buffer = ''
        self.start()

    def run(self):
        log.debug(f'{self.host} {self.stream_type} reading')
        while True:
            buffer = self.stream.read()
            if not buffer:
                log.debug(f'{self.host} {self.stream_type} read(): {buffer=}')
            if buffer is not None:
                if not buffer:
                    break
                log.info(f'{self.host} {self.stream_type} read(): {buffer=}')
                self.buffer += buffer.decode('utf-8')
            time.sleep(.1)
        log.debug(f'{self.host} {self.stream_type} read(): EOF')


class Process(threading.Thread):
    def __init__(self, host):
        super().__init__()
        self.host = host
        if args.become:
            command = [
                'echo',
                base64.b64encode(' '.join(args.command).encode()).decode(),
                '| base64 -d | sudo -i',
            ]
        else:
            command = [' '.join(args.command)]
        self.process = subprocess.Popen(
            [
                'ssh',
                '-oBatchMode=yes',
                host,
                '--',
            ] + command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
        log.info(f'{self.host}: process {self.process.pid}')
        self.stdout = Reader(host, 'stdout', self.process.stdout)
        self.stderr = Reader(host, 'stderr', self.process.stderr)
        self.start_time = datetime.datetime.now()
        self.stop_time = None
        self.done = False
        self.start()

    def run(self):
        while self.process.poll() is None or self.stdout.is_alive() or self.stderr.is_alive():
            time.sleep(.1)
        self.stop_time = datetime.datetime.now()
        self.done = True


def read_ssh_config():
    host_regexp = re.compile(r'^Host\s+(\S+)\s*$')
    attr_regexp = re.compile(r'^\s+(\w+)\s+(\S+)\s*$')
    host = None
    ret = dict()
    with open(os.path.expanduser('~/.ssh/config')) as stream:
        for line in stream.read().splitlines():
            match = host_regexp.search(line)
            log.debug(f'{match.groups() if match else None} {line!r}')
            if match:
                host = match.group(1)
                ret[host] = dict()
            elif host:
                match = attr_regexp.search(line)
                log.debug(f'{match.groups() if match else None} {line!r}')
                if match:
                    ret[host][match.group(1).lower()] = match.group(2)

    log.info(f'ssh_config: {ret=}')
    return ret


parser = argparse.ArgumentParser(description='Execute command on multiple systems via ssh')
parser.add_argument('hosts', help='Comma-separated list of remote hosts')
parser.add_argument('command', nargs='+', help='Command and arguments')
parser.add_argument('-j', '--json', action='store_true', help='Produce JSON output')
parser.add_argument('-b', '--become', action='store_true', help='Become superuser')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

ssh_config = read_ssh_config()
hosts = ssh_config.keys() if args.hosts == 'all' else args.hosts.split(',')
log.info(f'{hosts=}')

if not hosts:
    log.warning('No hosts')
    exit(1)

processes = list()
for host in hosts:
    processes.append(Process(host))

while True:
    if all([process.done for process in processes]):
        break
    for process in processes:
        if not process.done:
            log.info(f'{process.host}: Still running after {datetime.datetime.now() - process.start_time!s}')
    time.sleep(.1)

result = list()

for pos, process in enumerate(processes):
    if args.json:
        result.append({
            'host': process.host,
            'stdout': process.stdout.buffer.splitlines(),
            'stderr': process.stderr.buffer.splitlines(),
            'rc': process.process.returncode,
            'elapsed': str(process.stop_time - process.start_time),
        })
        if process.host in ssh_config:
            result[-1].update(ssh_config[process.host])
    else:
        if pos > 0:
            print()
        print(f'Host: {process.host}')
        print(process.stdout.buffer, end='')
        print(process.stderr.buffer, file=sys.stderr, end='')

if args.json:
    json.dump(result, sys.stdout, indent=2)
    print()
