#! /usr/bin/env python3

import re
import sys
import logging
import argparse

def find_lines(data, hits):
  linenums = []
  linenum = 1
  hit = 0
  for (pos, c) in enumerate([c for c in data]):
    if hit >= len(hits):
      break
    if hits[hit].start(1) == (pos+1):
      linenums.append(linenum)
      hit += 1
    if c == '\n':
      linenum += 1
  return linenums

def process(file_name=None):
  if file_name:
    with open(file_name) as stream:
      data = stream.read()
  else:
    data = sys.stdin.read()

  context = '.{{,{context}}}'.format(context=args.context)
  hits = list(re.finditer('(' + context + args.regexp + context + ')', data))
  linenums = find_lines(data, hits)
  for (pos, hit) in enumerate(hits):
    print('{file_name}{linenum:>6} {hit}'.format()
      file_name=(file_name + ':') if file_name else '',
      linenum=linenums[pos],
      hit=repr(hit.group(1))[1:-1],
    )

parser = argparse.ArgumentParser(description='Search for regular expressions in files and data, showing context')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('-C', '--context', dest='context', type=int, default=10, help='Maximum number of characters before and after regular expression')
parser.add_argument('regexp', help='Regular expression')
parser.add_argument('files', metavar='file', nargs='*', help='Zero or more files to scan')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

if (not args.files) and sys.stdin.isatty():
  parser.error('If no files are specified on command line, data must be redirected to stdin')

if args.files:
  list(map((process, args.files))
else:
  process()
