#! /usr/bin/env python3

import os
import sys
import uuid
import shlex
import signal
import atexit
import logging
import argparse
import subprocess

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = shlex.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))

  p = None
  try:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  except Exception as e:
    (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

  if p:
    if stdin:
      p.stdin.write(stdin.encode())
      p.stdin.close()
    if capture:
      (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    else:
      (stdout, stderr) = ('', '')
    rc = p.wait()

  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

def cleanup(filename):
  log.info(f'Removing {filename!r}')
  try:
    os.remove(filename)
  except Exception as e:
    log.info(str(e))

parser = argparse.ArgumentParser(description='Create a file tree from files in a container')
parser.add_argument('container', help='Container name/id')
parser.add_argument('dir', help='Path to new output directory')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

container_ids = list()
container_names = list()
(rc, stdout, stderr) = run('docker ps -a')
for line in stdout.splitlines()[1:]:
  tokens = line.split()
  container_ids.append(tokens[0])
  container_names.append(tokens[-1])

log.info(f'{container_ids=} {container_names=}')
if args.container not in container_ids and args.container not in container_names:
  parser.error(f'{args.container!r} is not a container')

if os.path.exists(args.dir):
  parser.error(f'{args.dir!r} already exists')

tar_filename = f'{os.environ.get("TMPDIR", "/tmp")}/{uuid.uuid1()}'
atexit.register(cleanup, tar_filename)
log.info(f'{tar_filename=}')

print(f'Exporting {args.container} to {tar_filename}')
(rc, stdout, stderr) = run(f'docker export -o {tar_filename} {args.container}')
if rc == 0:
  log.info(f'Creating {args.dir!r}')
  try:
    os.mkdir(args.dir)
  except Exception as e:
    perror(f'Cannot create {args.dir!r}: {e!s}')

  print(f'Untarring {tar_filename} to {args.dir!r}')
  (rc, stdout, stderr) = run(['tar', '-xf', tar_filename, '-C', args.dir])
  if rc != 0:
    log.warning(f'Problem untarring {tar_filename}: {stderr.strip()!r}')
else:
  log.warning(f'Problem exporting {args.container}: {stderr.strip()!r}')
