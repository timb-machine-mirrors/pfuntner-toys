#! /usr/bin/env python

import os
import logging
import datetime
import argparse
import subprocess

def read(filename):
  ret = None
  log.debug('Reading {filename}'.format(**locals()))
  if os.path.isfile(filename):
    try:
      with open(filename) as stream:
        ret = stream.read()
    except Exception as e:
      log.warning('Could not read {filename!r}: {e!s}'.format(**locals()))
  else:
    log.warning('Not a file: {filename!r}'.format(**locals()))

  return ret

def backup(filename):
  backup_filename = filename + '-' + datetime.datetime.now().strftime('%Y%m%d%H%M%S')
  log.info('Backing up {filename!r} to {backup_filename!r}'.format(**locals()))
  cmd = ['cp', '-pv', filename, backup_filename]
  log.debug('Executing: {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = p.communicate()
  rc = p.wait()
  log.debug('{cmd} exited with {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  if (rc != 0) or stderr:
    if stderr:
      for line in stderr.splitlines():
        log.error('Could not backup {filename!r}: {line}'.format(**locals()))
    else:
      log.error('Could not backup {filename!r}: cp status: {rc}'.format(**locals()))
    backup_filename = None
  
  return backup_filename

def process(filename):
  global errors

  log.info('processing {filename}'.format(**locals()))
  data = read(filename)
  if data != None:
    newdata = data.replace('\r', '')
    log.debug('data: {data!r}, newdata: {newdata!r}'.format(**locals()))
    if newdata != data:
      backup_name = backup(filename)
      if backup_name:
        try:
          with open(filename, 'w') as stream:
            stream.write(newdata)
        except Exception as e:
          log.error('Could not write to {filename!r}: {e!s} - Original file was backed up as {backup_name!r}'.format(**locals()))
          errors += 1
        else:
          print filename
      else:
        errors += 1
    else:
      log.info('No carriage returns in {filename}'.format(**locals()))
  else:
    errors += 1

parser = argparse.ArgumentParser(description='Remove carriage returns from files')
parser.add_argument('-v', '--verbose', dest='verbose', action='count', help='Print more debugging, multiple uses print even more')
parser.add_argument('files', metavar='file', nargs='+', help='One or more files')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - 10*(args.verbose or 0))

errors = 0
map(process, args.files)
