#! /usr/bin/env python2

import re
import sys
import datetime
import getopt
import math

assert not sys.stdin.isatty(), "stdin is not redirected"

class Pattern:
  def __init__(self, regexp, pat):
    self.regexp = re.compile(regexp)
    self.pat = pat

  def parse(self, line):   
    ret = None
    match = self.regexp.search(line)
    if match:
      try:
        ret = datetime.datetime.strptime(match.group(1), self.pat)
      except Exception as e:
        print "Caught %s parsing %s with %s" % (repr(e), repr(match.group(1)), repr(self.pat))

    return ret

def mean(lst):
  """
    returns the mean (average) of the list
  """
  return float(sum(lst)) / max(len(lst), 1)

def stddev(lst):
  """
    returns the standard deviation of the list
  """
  mn = mean(lst)
  variance = sum([(e-mn)**2 for e in lst]) / len(lst)
  return math.sqrt(variance)

def div(a, b):
  x = int(a/b)
  return (x, a-(x*b))

def human(diff):
  ret = ""

  if type(diff) == type(0.1):
    secs = diff
  else:
    secs = diff.total_seconds()

  (days, secs) = div(secs, 24*60*60)
  (hours, secs) = div(secs, 60*60)
  (mins, secs) = div(secs, 60)

  if days > 0:
    ret += "%dd" % days
  if ret or (hours > 0):
    ret += "%02dh" % hours
  if ret or (mins > 0):
    ret += "%02dm" % mins
  ret += "%05.2fs" % secs

  return ret

def timestampParse(arg):
  for pat in pats:
    t = pat.parse(arg)
    if t:
      break
  if not t:
    sys.stderr.write("`%s` did not match %s\n" % (arg, " or ".join([repr(pat.regexp.pattern) for pat in pats])))
    exit(1)

  return t

pats = [
         Pattern("([A-Z][a-z]{2} [A-Z][a-z]{2} [ 0-9]\d \d{2}:\d{2}:\d{2} \S+ \d{4})", "%a %b %d %H:%M:%S %Z %Y"), # Unix `date` style: "Thu Mar  2 07:45:42 EST 2017",
         Pattern("(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{6})", "%Y-%m-%d %H:%M:%S.%f"), # Python datetime.datetime default format: "2017-03-06 16:04:42.318470",
#                                                                  000000000111111111
#                                                                  123456789012345678
#                                                               mmmddyyyyhhmmssmmmmmm
         Pattern("([A-Z][a-z]{2}\d{17})", "%b%d%Y%H%M%S%f"), # `Aug112017150247961262` - note one digit is dropped
       ]

before = None
after = None
verbose = False

(opts, args) = getopt.getopt(sys.argv[1:], "va:b:", ["verbose", "after=", "before="])
for (opt, arg) in opts:
  if opt in ["-a", "--after"]:
    after = timestampParse(arg)
  elif opt in ["-b", "--before"]:
    before = timestampParse(arg)
  elif opt in ["-v", "--verbose"]:
    verbose = not verbose
  else:
    sys.stderr.write("Don't know how to handle %s\n" % repr(opt))
    exit(1)

assert (not after) or (not before) or (after <= before), "%s > %s" % (str(after), str(before))

if after and (not before):
  emit = False
elif (not after) and before:
  emit = True
else:
  emit = False

first = None
last = None
diffs = []

for line in sys.stdin:
  for pat in pats:
    timestamp = pat.parse(line)
    if timestamp:
      if after and (not before):
        if not emit:
          emit = timestamp >= after
      elif before and (not after):
        if emit:
          emit = timestamp <= before
      elif before and after:
        emit = (timestamp >= after) and (timestamp <= before)
      else:
        if not first:
          first = timestamp
  
        if last:
          diff = timestamp - last
          diffs.append(diff)
          if verbose:
            print "%s %s %s" % (last, timestamp, diff)
  
        last = timestamp

  if (after or before) and emit:
    sys.stdout.write(line)

if (not after) and (not before):
  if len(diffs) == 1:
    print "Two times, difference = %s" % human(diffs[0])
  elif len(diffs) > 1:
    print "Over a period of %s and %d samples, the average difference in times was %s" % (human(last-first), len(diffs), human(sum([diff.total_seconds() for diff in diffs])/len(diffs)))
    print "Max: %s, Min: %s, stddev: %s" % (human(max(diffs)), human(min(diffs)), human(stddev([diff.total_seconds() for diff in diffs])))
