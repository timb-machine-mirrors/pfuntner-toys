#! /usr/bin/env python3

"""
   Replace duplicate "non-essential" characters with a single
   occurrence.  For instance:

     "  \tbruno--123 ----- x" => "bruno-123 x"

   This can be useful to reduce a large table with blanks or other padding characters to align the columns.
"""

import re
import sys
import string
import signal
import logging
import argparse

import pdb

parser = argparse.ArgumentParser(description='Remove duplicate characters')
parser.add_argument('path', nargs='?', help='Path to file from which to remove characters')
parser.add_argument('-d', '--debug', action='store_true', help='Drop into Python debugger')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

re_metas = '.^$*+?{}[]\\|()'
replacements = [
  (re.compile(r'\s{2,}'), ' ')
]

def fix(s):
  for replacement in replacements:
    # print replacement
    s = re.sub(replacement[0], replacement[1], s)

  pos = 0
  while pos < len(s)-2:
    if s[pos+1] == '\x08' and s[pos] == s[pos+2]:
      s = s[:pos+1] + s[pos+3:]
    else:
      pos += 1

  return s # .strip()

if args.debug:
  pdb.set_trace()

if args.path:
  stream = open(args.path)
else:
  if sys.stdin.isatty():
    parser.error('stdin must be redirected if a pathname is not specified')
  stream = sys.stdin

for c in string.punctuation:
  pattern = '{escape}{c}{{2,}}'.format(
    escape='\\' if c in re_metas else '',
    c=c)
  # print pattern
  replacements.append((pattern, '{escape}{c}'.format(escape='\\' if c == '\\' else '', c=c)))

for line in stream.read().splitlines():
  print(fix(line))
