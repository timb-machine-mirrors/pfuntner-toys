#! /usr/bin/env python3

import re
import sys
import json
import base64
import logging
import argparse

def validate(required=[], optional=[]):
  valid = True
  options_present = {element for element in dir(args) if not element.startswith('_')} - {'verbose', 'action'}

  log.info(f'{options_present=}')
  for option in required:
    log.info(f'Ensuring that {option} is present')
    if option not in options_present or getattr(args, option) is None:
      log.error(f'{args.action} requires --{option}')
      valid = False

  for option in options_present:
    if option not in required + optional and getattr(args, option, None) is not None:
      log.error(f'{args.action} does not allow --{option}')
      valid = False
  
  if not valid:
    exit(1)

def dump(obj):
  print(base64.b64encode(json.dumps(obj).encode()).decode())

parser = argparse.ArgumentParser(description='Bash implementation of Python argparse')
parser.add_argument('action', choices=['argument-parser', 'add-argument', 'parse-args', 'get'], help='Action to perform')
parser.add_argument('-p', '--parser', help='parser payload created by argument-parser and add-argument')
parser.add_argument('--args', help='argparse payload created by parse-args')
parser.add_argument('--name', help='Name for caller')
parser.add_argument('-d', '--description', help='Description for argparser')
parser.add_argument('--arguments', metavar='argument', action='append', help='Argument (can be repeated)')
parser.add_argument('-m', '--metavar', help='metavar for argument')
parser.add_argument('-n', '--nargs', help='nargs for argument')
parser.add_argument('--arg-action', choices=['store_true', 'count'], help='action for argument')
parser.add_argument('--help-text', help='Help for argument')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
(args, extra_args) = parser.parse_known_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

log.info(f'{args=}')
log.info(f'{extra_args=}')
if args.action == 'argument-parser':
  payload = {'arguments': []}
  if args.parser:
    payload = json.loads(base64.b64decode(args.parser.encode()).decode())

  validate(required=['description'], optional=['name'])
  if payload.get('description') is not None:
    log.warning(f'argparser description was already set to {payload["description"]!r}')

  if extra_args:
    parser.error(f'Unexpected arguments: {extra_args}')

  payload['description'] = args.description
  if getattr(args, 'name') is not None:
    payload['name'] = args.name

  dump(payload)
elif args.action == 'add-argument':
  payload = {'arguments': []}
  if args.parser:
    payload = json.loads(base64.b64decode(args.parser.encode()).decode())

  if payload.get('description') is None:
    parser.error('argparser description not set')

  validate(required=['parser', 'arguments', 'help_text'], optional=['metavar', 'nargs', 'arg_action'])

  if len(args.arguments) > 1:
    if not all([argument.startswith('-') for argument in args.arguments]):
      parser.error(f'{argument} of {args.arguments} does not begin with a hyphen')

  if extra_args:
    parser.error(f'Unexpected arguments: {extra_args}')

  payload['arguments'].append({
    'arguments': args.arguments,
    'keywords': {
      'help': args.help_text,
    },
  })

  if getattr(args, 'metavar') is not None:
    payload['arguments'][-1]['keywords']['metavar'] = args.metavar

  if getattr(args, 'nargs') is not None:
    payload['arguments'][-1]['keywords']['nargs'] = args.nargs

  if getattr(args, 'arg_action') is not None:
    payload['arguments'][-1]['keywords']['action'] = args.arg_action

  dump(payload)
elif args.action == 'parse-args':
  payload = {'arguments': []}
  if args.parser:
    payload = json.loads(base64.b64decode(args.parser.encode()).decode())

  if payload.get('description') is None:
    parser.error('argparser description not set')

  validate(required=['parser'])

  if extra_args and extra_args[0] == '--':
    del extra_args[0]

  params = {'description': payload['description']}
  if payload.get('name') is not None:
    params['prog'] = payload['name']
  parser = argparse.ArgumentParser(**params)

  for argument in payload['arguments']:
    parser.add_argument(*argument['arguments'], **argument['keywords'])

  log.info('Before parsing')
  args = parser.parse_args(extra_args).__dict__

  # massage optional position arguments and boolean/integer options
  for (key, value) in args.items():
    if isinstance(value, bool):
      # Give the bash script something it can use for booleans instead of 'True' or 'False'.
      # 'true' and 'false' can be used in Bash conditions: `if $option; then ...`
      args[key] = 'true' if value else 'false'
    elif value is None:
      # A `None` value is pretty useless, especially since a Bash script would just see "None" as a string.
      for argument in payload['arguments']:
        if any([re.match(f'(--)?{key}$', name) for name in argument['arguments']]):
          if argument['keywords'].get('nargs') == '?':
            # An optional positional parameter that isn't expressed becomes the empty string ('')
            args[key] = ''
          elif argument['keywords'].get('action') == 'store_true':
            # A boolean-style option (action='store_true') that's not expressed becomes 'false'
            args[key] = 'false'
          elif argument['keywords'].get('action') == 'count':
            # An integer-style counting option (action='count') that's not expressed becomes '0'
            args[key] = 0

  log.info(f'{args=}')
  dump(args)
elif args.action == 'get':
  validate(required=['args'])

  if len(extra_args) == 0:
    log.error('No argument specified')
    exit(1)
  if len(extra_args) > 1:
    log.error('More than one argument specified')
    exit(1)

  payload = json.loads(base64.b64decode(args.args.encode()).decode())
  arg = extra_args[0]
  log.info(f'Seeking {arg!r} in {payload}')
  value = payload.get(arg)
  print(' '.join(value) if isinstance(value, list) else value)
