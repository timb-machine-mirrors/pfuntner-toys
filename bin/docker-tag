#! /usr/bin/env python3

import re
import sys
import json
import signal
import logging
import requests
import datetime
import argparse

def normalize_timestamp(timestamp_string):
  """
    Normalize the following types of timestamp strings:

      AWS: 2022-03-15T09:06:50.000Z
      GCP: 2022-03-15T00:23:24.629-07:00
      Docker: Fri, 01 Oct 2021 09:24:26 -0000

  """
  offset_minutes = None
  if timestamp_string.endswith('Z'):
    offset_minutes = 0
  else:
    match = time_delta_regexp.search(timestamp_string)
    if match:
      offset_minutes = int(match.group(1) + match.group(2)) * 60 + int(match.group(1) + match.group(3))
    else:
      raise Exception(f'No timezone found in {timestamp_string!r} after regexp search')

  if not offset_minutes is None:
    base_timestamp = None

    match = timestamp1_regexp.search(timestamp_string)
    if match:
      base_timestamp = datetime.datetime.strptime(match.group(1), '%Y-%m-%dT%H:%M:%S.%f') # '2022-03-15T09:06:50.000'
    else:
      match = timestamp2_regexp.search(timestamp_string)
      if match:
        base_timestamp = datetime.datetime.strptime(match.group(1), '%a, %d %b %Y %H:%M:%S') # 'Fri, 01 Oct 2021 09:24:26'

    if not base_timestamp is None:
      return datetime.datetime.strftime(base_timestamp - datetime.timedelta(minutes=offset_minutes), '%Y-%m-%d %H:%M:%SZ')
    else:
      raise Exception(f'Can\'t normalize {timestamp_string!r}')
      return timestamp_string

parser = argparse.ArgumentParser(description='Get information from remote Docker repo (such as Quay)')
parser.add_argument('-a', '--authorization', help='Remote Docker repository authorization (eg `user:token`)')
parser.add_argument('-s', '--server', required=True, help='Remote Docker repository server')
parser.add_argument('-o', '--organization', required=True, help='Remote Docker repository organization')
parser.add_argument('-r', '--repository', required=True, help='Remote Docker repository')
parser.add_argument('-t', '--tag', required=True, help='Remote Docker tag')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

time_delta_regexp = re.compile(r'(-?)(\d{2}):?(\d{2})$') # '-07:00' or '-0000'
timestamp1_regexp = re.compile(r'^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3})') # '2022-03-15T09:06:50.000'
timestamp2_regexp = re.compile(r'^(\S{3}, \d{2} \S{3} \d{4} \d{2}:\d{2}:\d{2})') # 'Fri, 01 Oct 2021 09:24:26'

if args.authorization:
  docker_auth = tuple(args.authorization.split(':'))
  log.debug(f'auth: {docker_auth}')
else:
  docker_auth = None

page = 1
done = False
while not done:
  docker_url = f'{args.server}/api/v1/repository/{args.organization}/{args.repository}?page={page}'
  log.info(f'url: {docker_url}')
  req = requests.get(docker_url, auth=docker_auth)
  if req.ok:
    log.debug(f'req.json: {req.json()}')
    tags = req.json().get('tags', {})
    """
    [
      {
        'latest': {
          'name': 'latest',
          'image_id': '2593795b6de3745b95abd2e426bd985774a9d3148a537e36947ad26e72a346db',
          'size': 124946677,
          'last_modified': 'Tue, 17 May 2022 10:17:48 -0000',
          'manifest_digest': 'sha256:f61e1e2af5b6a819254454ab6a0b6c1dc9139fe9e46f7ec351c5d66366fc5143',
        }
      },
      .
      .
      .
    ]
    """
    for (tag, image) in tags.items():
      if tag == args.tag:
        json.dump(image, sys.stdout, indent=2, sort_keys=True)
        print('')
        done = True
    if req.json().get('has_additional', False):
      page += 1
    else:
      break
  else:
    log.warning(f'{docker_url} failed: {req.text!r}')
    exit(1)

if not done:
  path = f'{args.server}/{args.organization}/{args.repository}:{args.tag}'
  log.warning(f'{path!r} not found')
  exit(1)
