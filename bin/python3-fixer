#! /usr/bin/env python3

import re
import os
import sys
import logging
import argparse

def process(filename):
  if os.path.isfile(filename):
    try:
      with open(filename) as stream:
        lines = stream.read().splitlines()
    except Exception as e:
      log.warning(f'Could not open {filename}: {e!s}')
      return
    sys.stdout.write(f'{filename}: ')

    done = False
    changed = False
    for (pos, line) in enumerate(lines):
      if pos == 0:
        if line == '#! /usr/bin/env python2':
          sys.stdout.write('#')
          changed = True
          lines[pos] = '#! /usr/bin/env python3'
        else:
          log.info('Did not find Python 2 hash-bang')
          done = True
      else:
        match = print_regexp.search(line)
        if match:
          sys.stdout.write('p')
          changed = True
          indent = match.group(1)
          remain = match.group(2)
          lines[pos] = f'{indent}print({remain})'
        else:
          match = map_regexp.search(line)
          if match:
            sys.stdout.write('m')
            changed = True
            indent = match.group(1)
            remain = match.group(2)
            lines[pos] = f'{indent}list(map({remain}))'
          else:
            match = communicate_regexp.search(line)
            if match:
              sys.stdout.write('c')
              changed = True
              indent = match.group(1)
              lines[pos] = f"{indent}(stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])"
            else:
              pass
      if done:
        break

    if changed and not done:
      if not args.dry_run:
        log.debug('Writing Python 3 script')
        with open(filename, 'w') as stream:
          sys.stdout.write('W')
          stream.write('\n'.join(lines) + '\n')
      else:
        sys.stdout.write('D')

    print('')

parser = argparse.ArgumentParser(description='Convert one or more Python 2 scripts into Python 3 scripts')
parser.add_argument('files', metavar='file', nargs='+', help='One or more files to convert')
parser.add_argument('-d', '--dry-run', action='store_true', help='Do not write new files')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

print_regexp = re.compile('^(\s*)print\s+([^(].*)$')
map_regexp = re.compile('^(\s*)map\(([^)]+)\)$')
communicate_regexp = re.compile('(\s*)\(stdout, stderr\) = p.communicate\(\)$')

list(map(process, args.files))
