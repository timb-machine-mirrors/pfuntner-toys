#! /usr/bin/env python3

import re
import sys
import signal
import logging
import argparse
import subprocess

from gityup import Git

def describe(commit):
  return '{commit} {author} {utc_date}'.format(**commit)

def checkout_original_branch():
  if branch:
    run(f'git checkout {branch}')

def interrupt_handler(signalnum, frame):
  log.info('Handling ctrl-C')
  checkout_original_branch()
  exit(0)

def banner(s):
  if not args.quiet:
    print('#' * (len(s) + 4))
    print(f'# {s} #')
    print('#' * (len(s) + 4))

def run(cmd, shell=False, capture=True):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  else:
    if isinstance(cmd, str):
      cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(
    cmd,
    stdout=subprocess.PIPE if capture else None,
    stderr=subprocess.PIPE if capture else None,
    shell=shell
  )
  if capture:
    (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  else:
    (stdout, stderr) = ('', '')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Search git commits')
parser.add_argument('pattern', help='Regular expression for which to search')
parser.add_argument('--start', help='Starting commit (SHA or `YYYY-mm-dd HH:MM:SS`')
parser.add_argument('--stop', help='Stopping commit (SHA or `YYYY-mm-dd HH:MM:SS`')
parser.add_argument('-q', '--quiet', action='store_true', help='Display commit IDs only')
parser.add_argument('-a', '--all', action='store_true', help='Announce all commits')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

log.info(f'args: {args}')

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))
signal.signal(signal.SIGINT, interrupt_handler)

(rc, stdout, stderr) = run('git branch')
match = re.search(r'^\*\s+(\S+)$', stdout, flags=re.MULTILINE)
if match:
  branch = match.group(1)
  log.info(f'Current branch: {branch!r}')
else:
  parser.error('Could not determine current branch')

sha_regexp = re.compile('^[0-9a-f]{40}$')
utc_date_regexp = re.compile('^\d{4}' + \
  '(-(' + '|'.join([str(num).rjust(2,'0') for num in range(1,13)]) + ')' \
  '(-(' + '|'.join([str(num).rjust(2,'0') for num in range(1,32)]) + ')' \
  '( (' + '|'.join([str(num).rjust(2,'0') for num in range(0,24)]) + ')' \
  '(:(' + '|'.join([str(num).rjust(2,'0') for num in range(0,60)]) + ')' \
  '(:(' + '|'.join([str(num).rjust(2,'0') for num in range(0,60)]) + ')' \
  ')?)?)?)?)?$'
)

if args.start:
  if not (sha_regexp.search(args.start) or utc_date_regexp.search(args.start)):
    parser.error(f'{args.start!r} is not a valid start sha or timestamp')
if args.stop:
  if not (sha_regexp.search(args.stop) or utc_date_regexp.search(args.stop)):
    parser.error(f'{args.stop!r} is not a valid stop sha or timestamp')

commits = Git(log).parse_log()
log.info('There are {} total commits'.format(len(commits)))

# trim the commits based on the start argument
if args.start:
  if sha_regexp.search(args.start):
    pos = len(commits)-1
    while pos > 0:
      commit = commits[pos]
      if commit['commit'] == args.start:
        log.info('Found starting commit at {pos} by SHA: {commit}'.format(pos=pos, commit=describe(commit)))
        commits = commits[:pos+1]
        break
  else:
    for (pos, commit) in enumerate(commits):
      if commit['utc_date'] < args.start:
        log.info('Eliminating commit {pos} {commit} and everything earlier'.format(pos=pos, commit=describe(commit)))
        commits = commits[:pos]
        break

  log.info('After trimming by starting commit, there are {} total commits'.format(len(commits)))

# trim the commits based on the stop argument
if args.stop:

  if len(args.stop) < 5:
    args.stop += '-12'
  if len(args.stop) < 8:
    args.stop += '-31'
  if len(args.stop) < 11:
    args.stop += ' 23'
  if len(args.stop) < 15:
    args.stop += ':59'
  if len(args.stop) < 18:
    args.stop += ':59'

  log.info(f'args.stop is now {args.stop}')

  if sha_regexp.search(args.stop):
    for (pos, commit) in enumerate(commits):
      if commit['commit'] == args.stop:
        log.info('Found stopping commit at {pos} by SHA: {commit}'.format(pos=pos, commit=describe(commit)))
        commits = commits[pos:]
        break
  else:
    for (pos, commit) in enumerate(commits):
      if commit['utc_date'] <= args.stop:
        log.info('Eliminating commits older than {pos} {commit}'.format(pos=pos, commit=describe(commit)))
        commits = commits[pos-1:]
        break

  log.info('After trimming by stopping commit, there are {} total commits'.format(len(commits)))

for commit in commits:
  log.info(f'Examining {commit}')

  if args.all:
    banner('{commit} {author} {utc_date}'.format(**commit))

  (rc, stdout, stderr) = run(['git', 'checkout', commit['commit']])
  if rc != 0:
    log.fatal('`git checkout` for {} failed: is your branch healthy?'.format(commit['commit']))
    sys.stderr.write(stderr)
    exit(1)

  (rc, stdout, stderr) = run(f'grep -r {args.pattern!r} *', shell=True)

  if args.quiet:
    if args.all:
      print(('+' if stdout else '-') + ' {commit} {author} {utc_date}'.format(**commit))
    else:
      if stdout:
        print('{commit} {author} {utc_date}'.format(**commit))
  elif stdout:
    if not args.all:
      banner('{commit} {author} {utc_date}'.format(**commit))
    print(stdout, end='')

  if (not args.quiet) and (stdout or args.all):
    print('')

checkout_original_branch()