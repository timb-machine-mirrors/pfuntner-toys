#! /usr/bin/env python3

import re
import logging
import argparse
import subprocess
from virtual_hosts import VirtualHosts

parser = argparse.ArgumentParser(description='Virtual machine scp')
parser.add_argument('-p', '--profile', help='AWS profile')
parser.add_argument('--ansible-only', action='store_true', help='Use Ansible hosts file only and avoid AWS CLI')
parser.add_argument('--aws-only', action='store_true', help='Use AWS CLI only and avoid Ansible hosts file (slow)')
parser.add_argument('-v', '--verbose', dest='verbose', action='count', help='Enable debugging')
parser.add_argument('-d', '--dry-run', dest='dry_run', action='store_true', help='Do not actually copy files')
parser.add_argument('hostname', help='Name of remote host')
parser.add_argument('filenames', metavar='file', nargs='*', help='Two or more files (local & remote)')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - 10*(args.verbose or 0))

filename_regexp = re.compile('^remote:')
file_pattern = ''
for filename in args.filenames:
  file_pattern += 'r' if filename_regexp.search(filename) else 'l'
log.info('Pattern for {args.filenames}: {file_pattern}'.format(**locals()))
if not re.search('^(r+l$)|(l+r)$', file_pattern):
  parser.error('Nonsensical operation.  Files must be `remote remote ... local` or `local local .. remote`')

virtual_args = args.__dict__
virtual_hosts = VirtualHosts(**virtual_args)
hosts = virtual_hosts.get_hosts(args.hostname)

if hosts:
  if len(hosts) == 1:
    host = hosts[0]
    log.info(host)
    if hasattr(host, 'state') and (host.state != 'running'):
      parser.error('{host.name} is not running'.format(**locals()))
    if not host.user:
      parser.error('No user for {host.name}'.format(**locals()))
    if not host.ip:
      parser.error('No IP for {host.name}'.format(**locals()))

    remote_prefix = '{host.user}@{host.ip}:'.format(**locals())

    cmd = ['scp']
    if host.key:
      cmd += ['-i', host.key]
    for filename in args.filenames:
      cmd.append(filename_regexp.sub(remote_prefix, filename))
    if not args.verbose:
      log.setLevel(logging.INFO)
    log.info(cmd)
    if not args.dry_run:
      exit(subprocess.Popen(cmd).wait())
  else:
    parser.error('Multiple hosts found: {}'.format(', '.join(sorted([str(host.name) for host in hosts]))))
