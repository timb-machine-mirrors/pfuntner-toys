#! /usr/bin/env python3

import re
import math
import logging
import argparse

parser = argparse.ArgumentParser(description='Breakdown a number as binary')
parser.add_argument('datum', help='Datum to parse')
parser.add_argument('-r', '--reverse', action='store_true', help='Reverse numbering of bits')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

def base8(*hits):
  assert len(hits) == 1
  return int(hits[0], 8)

def base10(*hits):
  assert len(hits) == 1
  return int(hits[0])

def base16(*hits):
  assert len(hits) == 1
  return int(hits[0], 16)

def tuples(*hits):
  assert len(hits) > 0
  ret = 0
  for hit in hits:
    tuple = int(hit)
    assert 0 <= tuple <= 255
    if ret:
      ret *= 256
    ret += tuple
  return ret

def process(num):
  bits = int((math.log(num, 2) if num > 0 else 0)+1)
  remain = bits%8
  log.info(f'num: {num}, raw bits: {bits} remain: {remain}')
  if remain:
    bits += 8-remain
  log.info(f'final bits: {bits}')

  width = int(math.log(bits, 10)) + 1
  log.info(f'width: {width}')

  display = [''] * (width+1)
  for exp in range(bits-1, -1, -1):
    mask = 2**exp
    log.info(f'exp: {exp}, mask: {mask}') 
    display[0] += '1' if num & mask else '0'
 
    for digit in range(width):
      log.info(f'digit: {digit}')
      display[digit+1] += str(int(((((bits-exp-1) if args.reverse else exp)+1) / (10**(width-digit-1))) % 10))

    log.info(f'display: {display}')
      
  print('\n'.join(display))

ctl = (
  ('^0([0-7]+)$', base8),
  ('^(\d+)$', base10),
  ('^0?[xX]([0-9a-f]+)$', base16),
  ('^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$', tuples),
)

for (pattern, reader) in ctl:
  match = re.search(pattern, args.datum)
  if match:
    process(reader(*match.groups()))
    break
else:
  parser.error('{datum!r} did not match {patterns}'.format(
    datum=args.datum,
    patterns=[pattern for (pattern, reader) in ctl]
  ))
