#! /usr/bin/env python3

import re
import sys
import getopt
import signal
import logging
import argparse

def escape(s):
  # replace escapes: '\\t' => '\t'
  # but not escaped escapes: '\\\\t' => '\\\\t'
  pos = 0
  while pos < len(s):
    if s[pos+1:pos+3] == '\\n' and s[pos:pos+3] != '\\\\n':
      s = s[:pos+1] + '\n' + s[pos+3:]
    elif s[pos+1:pos+3] == '\\t' and s[pos:pos+3] != '\\\\t':
      s = s[:pos+1] + '\t' + s[pos+3:]
    pos += 1
  return s

parser = argparse.ArgumentParser(description='Perform string substitution on stdin using Python re.sub()')
parser.add_argument('-c', '--count', type=int, default=0, help='Maximum number of pattern occurrences to be replaced (default: 0)')
parser.add_argument('pattern', help='Regular expression pattern (left-hand side)')
parser.add_argument('replacement', help='Replacement string (right-hand side)')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

if sys.stdin.isatty():
  perror("stdin must be redirected")

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

regexp = re.compile(escape(args.pattern))

lines = sys.stdin.read().splitlines()
for line in lines:
  print(regexp.sub(escape(args.replacement), line, count=args.count))
