#! /usr/bin/env python3

import os
import sys
import signal
import logging
import argparse

import bruno_tools

def try_path(path):
  return path if os.path.exists(path) else None

parser = argparse.ArgumentParser(description='Push public ssh key to remote authorized_keys')
parser.add_argument('remote', help='ssh target: hostname/ip, user@hostname/ip')
parser.add_argument('public_key_path', metavar='public-key-path', nargs='?', help='Path to public key to push')
parser.add_argument('--dry-run', action='store_true', help='Do not run command')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if args.public_key_path is None:
  args.public_key_path = try_path(os.path.expanduser('~/.ssh/id_rsa.pub'))
if args.public_key_path is None:
  args.public_key_path = try_path(os.path.expanduser('~/.ssh/id_dsa.pub'))
if args.public_key_path is None:
  parser.error('No public ssh key')

authorized_keys = '.ssh/authorized_keys'

if os.path.exists(args.public_key_path):
  if not os.path.isdir(args.public_key_path):
    with open(args.public_key_path) as stream:
      public_key = stream.read()
    cmd = ['ssh', args.remote, 'echo', repr(public_key), '>>', authorized_keys, ';', 'chmod', '600', authorized_keys]
    if args.dry_run:
      print(cmd)
    else:
      log.info(f'Pushing {args.public_key_path!r}: {public_key!r} to {args.remote}')
      log.debug(f'{cmd=}')
      (rc, stdout, stderr) = bruno_tools.run(cmd, capture=False)
      exit(rc)
  else:
    parser.error(f'{path!r} is a directory')
else:
  parser.error(f'{path!r} is not found')
