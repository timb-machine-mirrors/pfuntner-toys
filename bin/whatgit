#! /usr/bin/env python3

import os
import sys
import signal
import logging
import argparse

# import bruno_tools

def process(path):
  orig_path = path
  git_path = None

  # resolve any symlinks to true directories
  path = os.path.realpath(path)
  log.info(f'{orig_path=!r} {path=!r}')

  if path and (path[0] != '/'):
    path = os.path.join(os.getcwd(), path)

  if os.path.isfile(path):
    path = os.path.dirname(path)

  while True:
    if os.path.exists(os.path.join(path, '.git')):
      git_path = path
      break

    old_path = path
    path = os.path.dirname(path)
    if path == old_path:
      break

    log.info(f'Testing {path!r}')
    if not os.path.isdir(path):
      log.info(f'{path!r} is not a directory')
      break

  print(f'{orig_path}\t{git_path}')

parser = argparse.ArgumentParser(description='Find location of the nearest `.git` file in the file structure - this will tell us the root directory of this local git repository.  ')
parser.add_argument('paths', nargs='*', help='Zero or more paths')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

log.debug(f'{args.paths=!r}')
for path in (args.paths or ['.']):
  process(path)
