#! /usr/bin/env python

# date '+%Y-%m-%dT%H:%M:%S.%N'

import re
import datetime
import logging
import argparse
import subprocess

def get_offset():
  """
    Get time difference of current location from GMT in seconds.

    For example, when used in EST, the method returns -(5*60)
  """
  curr = datetime.datetime.now()
  utc = datetime.datetime.utcnow()

  diff = round((utc - curr if curr < utc else curr - utc).total_seconds())
  diff = (-1 if curr < utc else 1) * diff

  log.debug('diff: {diff}'.format(**locals()))

  return diff

def interpret(arg):
  global captured_zone

  for (name, style) in styles.items():
    try:
      if name == 'seconds':
        return float(arg)
      elif name == 'unix':
        arg_tokens = arg.split()
        style_tokens = style.split()
        log.debug('arg_tokens: {arg_tokens}, style_tokens: {style_tokens}'.format(**locals()))
        if len(arg_tokens) == len(style_tokens):
          ret = datetime.datetime.strptime(' '.join(arg_tokens[:-2]) + ' ' + arg_tokens[-1], ' '.join(style_tokens[:-2]) + ' ' + style_tokens[-1])
          captured_zone = arg_tokens[-2]
          return ret
      else:
        return datetime.datetime.strptime(arg, style)
    except Exception as e:
      log.debug('Cannot interpret {arg!r} as {name}: {e!s}'.format(**locals()))
  parser.error('Cannot interpret {arg!r}'.format(**locals()))
    
styles = {
  'standard': '%Y-%m-%d %H:%M:%S.%f',
  'seconds':  '{seconds}',
  'unix':     '%a %b %d %H:%M:%S {zone} %Y',
  'integer':  '%Y%m%d%H%M%S',
}

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()

parser = argparse.ArgumentParser(description='Display time in various styles')
parser.add_argument('-g', '-u', '--gmt', '--uct', '--utc', dest='gmt', action='store_true', help='Use Universal Coordinated Time/Greenwich Mean Time')
parser.add_argument('-t', '--time', help='Specify time on which to base output')

group = parser.add_mutually_exclusive_group()
group.add_argument('-a', '--all', action='store_true', help='Display all formats')
group.add_argument('-s', '--style', dest='styles', action='append', help='Specify style on which to render output: {styles}'.format(styles=styles.keys()))

parser.add_argument('-v', '--verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

log.debug(args)

if args.all:
  args.styles = styles.keys()

for (pos, style) in enumerate(args.styles or []):
  keys = []

  for key in styles.keys():
    log.debug('Testing {key!r} with {style!r}'.format(**locals()))
    if style == key[:len(style)]:
      keys.append(key)

  log.debug('{style!r} could be: {keys}'.format(**locals()))

  if not keys:
    parser.error('{style!r} must be one of: {styles}'.format(style=style, styles=styles.keys()))
  elif len(keys) > 1:
    parser.error('{style!r} is ambiguous: {keys}'.format(**locals()))

  args.styles[pos] = keys[0]

if not args.styles:
  args.styles = ['standard']

log.debug(args)

offset = get_offset()

captured_zone = None

if args.time:
  epoch = datetime.datetime.fromtimestamp(0)
  now = datetime.datetime.fromtimestamp(interpret(args.time))
elif args.gmt:
  epoch = datetime.datetime.utcfromtimestamp(0)
  now = datetime.datetime.utcnow() 
else:
  epoch = datetime.datetime.fromtimestamp(0)
  now = datetime.datetime.now()

secs = (now-epoch).total_seconds()
if captured_zone is None:
  # Python has poor timezone support - we'll ask the `date` utility for the timezone!
  cmd = ['date', '-d', '@' + str(secs), '+%Z']
  log.debug('cmd: {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = p.communicate()
  rc = p.wait()
  log.debug('rc: {rc}, stdout:{stdout!r}, stderr:{stderr!r}'.format(**locals()))
  captured_zone = stdout.split()[0] if stdout else '?'

log.debug('captured_zone: {captured_zone}'.format(**locals()))

if args.gmt:
  zone = 'GMT'
else:
  zone = captured_zone

for style in args.styles:
  curr = styles[style]
  log.debug(curr)
  curr = curr.format(
    seconds=str(secs),
    zone=zone,
  )
  log.debug(curr)

  if '%' in curr:
    curr = datetime.datetime.strftime(now, curr)

  print curr
