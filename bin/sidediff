#! /usr/bin/env python3

import re
import sys
import logging
import argparse
import subprocess

def extract(cmd, pattern, default_value):
  ret = default_value
  caster = type(ret)
  if isinstance(cmd, list):
    cmd = ' '.join(cmd)
  log.debug('Running {cmd!r}'.format(**locals()))
  try:
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    (stdout, stderr) = p.communicate()
    stdout = stdout.decode('utf-8')
    stderr = stderr.decode('utf-8')
    rc = p.wait()
    log.debug('{cmd!r}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
    match = re.search(pattern, stdout)
    if match:
      log.debug('extracted: {}'.format(match.group(1)))
      ret = caster(match.group(1))
    else:
      log.debug('{stdout!r} failed to match {pattern!r}'.format(**locals()))
  except Exception as e:
    log.debug('Caught `{e!s}`'.format(**locals()))

  return ret

parser = argparse.ArgumentParser(description='Do a side-by-side diff')

group = parser.add_mutually_exclusive_group()
group.add_argument('-w', '--width', type=int, help='Specify screen width')
group.add_argument('--wide', action='store_true', help='Use entire screen width')

parser.add_argument('-b', '--ignore-space-change', action='store_true', help='Ignore changes in white space')
parser.add_argument('file1', help='Path to lefthand file')
parser.add_argument('file2', help='Path to righthand file')

parser.add_argument('-v', '--verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

log.debug('args: {args}'.format(**locals()))

cmd = ['diff']
if args.width:
  cmd += ['--width', str(args.width)]
elif args.wide:
  cmd += ['--width', str(extract('stty size < /dev/tty', '\d+\s+(\d+)', 80))]

if args.ignore_space_change:
  cmd += ['-b']

cmd += ['--side-by-side', args.file1, args.file2]
log.debug('cmd: {cmd}'.format(**locals()))
exit(subprocess.Popen(cmd, close_fds=False).wait())
