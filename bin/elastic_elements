#! /usr/bin/env python3

import re
import sys
import json
import subprocess
import getopt
import datetime

def syntax():
  sys.stderr.write("Syntax: %s --logstash [var=value ...]\n" % sys.argv[0])
  sys.stderr.write("Syntax: %s index-name [var=value ...]\n" % sys.argv[0])
  exit(1)

"""
  This default query returns all elements
"""
query = {
          "from": 0,
          "size": 10000,

          "query": { 
            "match_all": {
            }
          }
        }

"""
{
  "query": { 
    "match": { 
      "account_number": 20 
    }
  }
}
"""

"""
elastic_elements logstash-2017.05.26
"""

index = None
(opts,args) = getopt.getopt(sys.argv[1:], "", ["logstash"])
for (opt,arg) in opts:
  if opt == "--logstash":
    index = datetime.datetime.strftime(datetime.datetime.now(), "logstash-%Y.%m.%d")
    sys.stderr.write("index: %s\n" % index)

if not index:
  if not args:
    syntax()
  index = args.pop(0)

if args:
  del query["query"]["match_all"]
  query["query"]["match"] = {}
  for curr in args:
    match = re.match("([^=]+)=(.*)$", str(curr))
    assert match, "Could not parse %s" % curr
    query["query"]["match"][match.group(1)] = match.group(2)

sys.stderr.write(json.dumps(query, indent=2) + '\n')

p = subprocess.Popen(["curl", "-d", json.dumps(query), "-X", "GET", "localhost:9200/%s/_search/?scroll=1m" % index], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
(stdout, stderr) = p.communicate()
stdout = stdout.decode('utf-8')
stderr = stderr.decode('utf-8')
rc = p.wait()
if rc != 0:
  sys.stderr.write("rc: %d, stdout: %s, stderr: %s\n" % (rc, repr(stdout), repr(stderr)))
  exit(1)

resp = json.loads(stdout)
assert "_scroll_id" in resp, "no `_scroll_id` in response:\n%s\n" % json.dumps(resp, indent=2)
scrollID = resp["_scroll_id"]

ret = None
iteration = 0
done = False
while not done:
  iteration += 1
  if not resp:
    p = subprocess.Popen(["curl", "-d", json.dumps({"scroll": "1m", "scroll_id": scrollID}), "-X", "GET", "localhost:9200/_search/scroll"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (stdout, stderr) = p.communicate()
    stdout = stdout.decode('utf-8')
    stderr = stderr.decode('utf-8')
    rc = p.wait()
    if rc == 0:
      resp = json.loads(stdout)
    else:
      sys.stderr.write("iteration %d: rc: %d, stdout: %s, stderr: %s\n" % (iteration, rc, repr(stdout), repr(stderr)))
      exit(1)

  sys.stderr.write("iteration %d has %d elements\n" % (iteration, len(resp["hits"]["hits"])))
  if not ret:
    ret = resp
    if len(resp["hits"]["hits"]) == 0:
      done = True
  else:
    if len(resp["hits"]["hits"]) == 0:
      done = True
    else:
      ret["hits"]["hits"] += resp["hits"]["hits"]

  resp = None

print(json.dumps(ret))
