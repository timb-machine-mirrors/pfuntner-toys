#! /usr/bin/env python3

"""
   Find and display git repos
"""

import os
import re
import logging
import argparse

from table import Table

parser = argparse.ArgumentParser(description='Find git repositories in your home directory')
parser.add_argument('-l', '--link', dest='link', action='store_true', help='Follow symlinks')
parser.add_argument('-v', '--verbose', dest='verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

def findfiles(root, name, isDir=False, isFile=True, assureNotLink=False):
  ret = []
  if (not assureNotLink) or (not os.path.islink(root)):
    base = os.path.basename(root)
    if os.path.isfile(root):
      if re.search(name, base) and isFile:
        ret.append(root)
    elif os.path.isdir(root):
      if re.search(name, base) and isDir:
        ret.append(root)
      children = []
      try:
        children = os.listdir(root)
      except Exception as e:
        log.error('Could not list directory {root!r}: {e!s}'.format(**locals()))
      for child in children:
        ret += findfiles(os.path.join(root, child), name, isDir=isDir, isFile=isFile, assureNotLink=assureNotLink)
  return ret

regexp = re.compile(r'^\s+url\s*=\s*(.*)$')

table = Table(('root', 'url'), desiredSep=' ')

home = os.environ.get('HOME')
if home:
  gits = findfiles(home, name=r'^\.git$', isDir=True, isFile=False, assureNotLink=not(args.link or False))
  log.debug('gits: {gits}'.format(**locals()))
  for git in gits:
    root = os.path.dirname(git)
    config = os.path.join(git, 'config')
    log.debug('config: {config}'.format(**locals()))
    if os.path.isfile(config):
      lines = []
      try:
        with open(config) as stream:
          lines = stream.read().splitlines()
      except Exception as e:
        log.error('Could not open {config!r}: {e!s}'.format(**locals()))
      for line in lines:
        match = regexp.search(line)
        log.debug('regexp for {line!r}: {groups}'.format(groups=match.groups() if match else None, **locals()))
        if match:
          url = match.group(1)
          table.add((root, url))
    else:
      log.error('Could not locate {config!r}'.format(**locals()))
else:
  log.critical('No $HOME defined!')

print(str(table))
