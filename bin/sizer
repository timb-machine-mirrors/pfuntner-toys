#! /usr/bin/env python3

"""
   Calculate the amount of disk space taken up by a file or directory tree, ignoring symlinks and only counting files once if it's hard-linked more than once in a tree

   Yes, this is similar to `du` but it just reports the top level path
"""

import os
import sys
import math
import getopt

def debug(msg):
  if verbose:
    sys.stderr.write('{msg}\n'.format(**locals()))

def syntax(msg):
  if msg:
    sys.stderr.write('{msg}\n'.format(**locals()))
  sys.stderr.write('Syntax: {pgm} [--verbose|-v] [--blocks|-b]\n'.format(pgm=sys.argv[0]))
  exit(1)

class Location:
  def __init__(self, stat):
    self.st_dev = stat.st_dev
    self.st_ino = stat.st_ino

  def __hash__(self):
    return (self.st_dev<<32) + self.st_ino

  def __eq__(self, other):
    return (self.st_dev == other.st_dev) and (self.st_ino == other.st_ino)

def bytes2human(bytes):
  amt = bytes
  units = 'b'

  if amt > 1000:
    amt /= 1024.0
    units = 'Kb'
    if amt > 1000:
      amt /= 1024.0
      units = 'MB'
      if amt > 1000:
        amt /= 1024.0
        units = 'GB'
        if amt > 1000:
          amt /= 1024.0
          units = 'TB'
  return '{amt:6.2f}{units}'.format(**locals())

def getsize(path, stat):
  global blocksizes, blocks
  bytes = stat.st_size
  if blocks:
    if stat.st_dev not in blocksizes:
      fs_stat = os.statvfs(path)
      debug('statvfs: {fs_stat}'.format(**locals()))
      blocksizes[stat.st_dev] = fs_stat.f_frsize
    num_blocks = (bytes * 1.0) / blocksizes[stat.st_dev]
    bytes = int(math.ceil(num_blocks) * blocksizes[stat.st_dev])
  return bytes

def dive(path, inodes=set()):
  bytes = 0
  if not os.path.islink(path):
    if os.path.isdir(path):
      for filename in os.listdir(path):
        (curr, inodes) = dive(os.path.join(path, filename), inodes)
        bytes += curr
    else:
      stat = os.stat(path)
      location = Location(stat)
      debug('{path}: {stat}'.format(**locals()))
      if location not in inodes:
        bytes += getsize(path, stat)
        inodes.add(location)
  return (bytes, inodes)

(opts, args) = ([], [])
try:
  (opts, args) = getopt.getopt(sys.argv[1:], 'bv', ['blocks', 'verbose'])
except Exception as e:
  syntax(str(e))

verbose = False
blocks = False

for (opt,arg) in opts:
  if opt in ['-v', '--verbose']:
    verbose = not verbose
  elif opt in ['-b', '--blocks']:
    blocks = not blocks
  else:
    syntax('Unexpected option {opt}'.format(**locals()))

blocksizes = {}

for path in args:
  print('{size} {path}'.format(size=bytes2human(dive(path)[0]), **locals()))
