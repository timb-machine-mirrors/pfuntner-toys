#! /usr/bin/env python3

"""
   Takes a table in text form and converts it to JSON.

   Sample text form:

    +---------+---------+---------+
    | header1 | header2 |   ...   |
    +---------+---------+---------+
    | data1-1 | data1-2 |   ...   |
    | data2-1 | data2-2 |   ...   |
    |    .    |    .    |    .    |
    |    .    |    .    |    .    |
    |    .    |    .    |    .    |
    +---------+---------+---------+

   The script would turn this into:

     [
       {
         "header1": "data1-1",
         "header2": "data1-2",
         .
         .
         .
       },
       {
         "header1": "data1-2",
         "header2": "data1-2",
         .
         .
         .
       },
       .
       .
       .
     ]

   Notes:
     - Regarding the table:
       - Headers are assumed
       - Each column (header or data) must be delimited with vertical bars
       - Vertical bars in data will likely cause the parsing errors
       - White space befor after after any cell (header or data) is stripped away
       - Headers are "normalized": converted to lowercase and non-alphanumerics become underscores
       - Exactly one table row must be on each line - there are no multi-line rows or multi-row lines
       - Lines that don't look like table rows are simply ignored
     - The script is designed to read the data from stdin
     - The --sample option can be used to parse a well-formed table text string rather than reading from stdin
"""

import re
import sys
import json
import getopt
import string
import io

def syntax(msg=None):
  if msg:
    sys.stderr.write('{msg}\n'.format(**locals()))
  sys.stderr.write('Syntax: {pgm} [-s|--sample]\n'.format(pgm=sys.argv[0]))
  exit(1)

def normalize(s):
  ret = ''
  for c in s.strip():
    ret += c.lower() if c in (string.letters + string.digits) else '_'
  return ret

sample_data = """+--------------------------------------+---------------------------------------+--------+------------+-------------+--------------------------------------------------------------------------------------------------------------------------------------+
| ID                                   | Name                                  | Status | Task State | Power State | Networks                                                                                                                             |
+--------------------------------------+---------------------------------------+--------+------------+-------------+--------------------------------------------------------------------------------------------------------------------------------------+
| 52f3e877-3c89-432e-bead-a67c6471bf81 | foo_foobarx-vPC-DI-PGW-foobarfo-cf1-0 | ACTIVE | -          | Running     | foobar-foo_orch=40.101.14.14; foobar-foo_mgmt=40.101.13.22; di-internal1=192.168.10.19; di-internal2=192.168.11.28                   |
| 116ffc34-96f0-4ddf-b018-4ac82d016395 | foo_foobarx-vPC-DI-PGW-foobarfo-cf1-1 | ACTIVE | -          | Running     | foobar-foo_orch=40.101.14.11; foobar-foo_mgmt=40.101.13.8; di-internal1=192.168.10.27; di-internal2=192.168.11.18                    |
+--------------------------------------+---------------------------------------+--------+------------+-------------+--------------------------------------------------------------------------------------------------------------------------------------+
ubuntu@tb2ano-rtp-staging-1:~/foobarfo$ """

(opts, args) = ([], [])
try:
  (opts, args) = getopt.getopt(sys.argv[1:], 's', ['sample'])
except Exception as e:
  syntax('Caught: {e!s}'.format(**locals()))

sample = False
for (opt, arg) in opts:
  if opt in ['-s', '--sample']:
    sample = not sample
  else:
    syntax('Unrecognized option: {opt!r}'.format(**locals())) 

if sample:
  stream = io.StringIO(sample_data)
else:
  assert not sys.stdin.isatty(), 'stdin must be redirected'
  stream = sys.stdin

headers = []
data = []

regexp = re.compile('\|([^|]*)(?=\|)')
# find heading row
while not headers:
  line = stream.readline()
  if line:
    hits = list(regexp.finditer(line))
    if hits:
      for hit in hits:
        header = normalize(hit.group(1))
        headers.append(header)
      break
  else:
    break

if headers:
  # hunt down data
  while True:
    line = stream.readline()
    if line:
      hits = list(regexp.finditer(line))
      if hits:
        assert len(hits) == len(headers), 'Expected columns {headers} but got {hit_list} instead'.format(hit_list=[hit.group(1) for hit in hits], **locals())
        data.append({})
        for (pos, hit) in enumerate(hits):
          data[-1][headers[pos]] = hit.group(1).strip()
    else:
      break

if data:
  print(json.dumps(data, indent=2, sort_keys=True))
elif headers:
  sys.stderr.write('Only headers found: {headers}\n'.format(**locals()))
else:
  sys.stderr.write('No headers found\n')
