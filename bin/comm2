#! /usr/bin/env python3

"""
  A better `comm` that doesn't expect the files to be sorted.
"""

import sys
import json
import getopt

COMMON = 0
UNIQUE_TO_1 = 1
UNIQUE_TO_2 = 2

def debug(msg):
  if verbose:
    sys.stderr.write("%s\n" % msg)

def status(msg=""):
  debug("(%d %s) (%d %s)%s" % (pos1, repr(file1[pos1]) if pos1 < len(file1) else None, pos2, repr(file2[pos2]) if pos2 < len(file2) else None, (' ' + msg) if msg else ""))

def readFile(filename):
  with open(filename, 'r') as f:
    data = f.read()
    if data and data[-1] == '\n':
      data = data[:-1]
    return data.split('\n')

def report(line, status):
  if (status == COMMON) and (not skipCommon):
    if jsonOutput:
      output.append({"line": line, "status": "common", "pos1": pos1+1, "pos2": pos2+1})
    else:
      print(line)
  elif (status == UNIQUE_TO_1) and (not skipUnique1):
    if jsonOutput:
      output.append({"line": line, "status": "unique to file 1", "pos1": pos1+1})
    else:
      print('\t' + line)
  elif (status == UNIQUE_TO_2) and (not skipUnique2):
    if jsonOutput:
      output.append({"line": line, "status": "unique to file 2", "pos2": pos2+1})
    else:
      print('\t\t' + line)

def strength(pos1, pos2):
  """
    Return the number of rows that match starting at the two positions, a sense of
    "strength" in matching up the file in those positions
  """
  ret = 0
  while (pos1 < len(file1)) and (pos2 < len(file2)) and (file1[pos1] == file2[pos2]):
    ret += 1
    pos1 += 1
    pos2 += 1
  return ret

def syntax(msg=None):
  if msg:
    sys.stderr.write("%s\n" % msg)
  sys.stderr.write("Syntax: %s [-123] [--json] file1 file2\n" % sys.argv[0])
  exit(1)

output = []
jsonOutput = False
skipUnique1 = False
skipUnique2 = False
skipCommon = False

verbose = False

(opts,args) = ([], [])
try:
  (opts,args) = getopt.getopt(sys.argv[1:], "vj123h?", ["verbose", "json", "help"])
except Exception as e:
  syntax("Caught %s" % repr(e))

for (opt,arg) in opts:
  if opt == '-1':
    skipUnique1 = not skipUnique1
  elif opt == '-2':
    skipUnique2 = not skipUnique2
  elif opt == '-3':
    skipCommon = not skipCommon
  elif opt in ["-j", "--json"]:
    jsonOutput = not jsonOutput
  elif opt in ["-v", "--verbose"]:
    verbose = not verbose
  elif opt in ["-?", "-h", "--help"]:
    syntax()
  else:
    syntax("Don't know how to handle %s" % repr(opt))

if len(args) != 2:
  syntax()

file1 = readFile(args[0])
file2 = readFile(args[1])

pos1 = 0
pos2 = 0

while (pos1 < len(file1)) or (pos2 < len(file2)):
  if (pos1 < len(file1)) and (pos2 < len(file2)) and (file1[pos1] == file2[pos2]):
    report(file1[pos1], COMMON)
    pos1 += 1
    pos2 += 1
  elif pos1 >= len(file1):
    report(file2[pos2], UNIQUE_TO_2)
    pos2 += 1
  elif pos2 >= len(file2):
    report(file1[pos1], UNIQUE_TO_1)
    pos1 += 1
  else:
    next1 = None
    next2 = None

    tmp = pos2 + 1
    while (tmp < len(file2)) and (not next2):
      if file1[pos1] == file2[tmp]:
        next2 = tmp
      else:
        tmp += 1

    tmp = pos1 + 1
    while (tmp < len(file1)) and (not next1):
      if file1[tmp] == file2[pos2]:
        next1 = tmp
      else:
        tmp += 1

    status("%s %s" % (next1, next2))
    if (next1 == None) and (next2 == None):
      report(file1[pos1], UNIQUE_TO_1)
      pos1 += 1
      report(file2[pos2], UNIQUE_TO_2)
      pos2 += 1
    elif next1 == None:
      report(file2[pos2], UNIQUE_TO_2)
      pos2 += 1
    elif next2 == None:
      report(file1[pos1], UNIQUE_TO_1)
      pos1 += 1
    else:
      if strength(pos1, next2) < strength(next1, pos2):
        report(file1[pos1], UNIQUE_TO_1)
        pos1 += 1
      else:
        report(file2[pos2], UNIQUE_TO_2)
        pos2 += 1

if output:
  print(json.dumps(output, indent=2, sort_keys=True))
