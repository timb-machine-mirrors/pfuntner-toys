#! /usr/bin/env python

import re
import json
import logging
import argparse
import subprocess

def get(root, path):
  if not path:
    return root

  if isinstance(path, basestring):
    path = path.split('/')

  if int_regexp.search(path[0]):
    pos = int(path[0])
    log.debug('pos: {pos}, root: {root}'.format(**locals()))
    assert 0 <= pos < len(root)
    return get(root[pos], path[1:])
  else:
    return get(root.get(path[0], {}), path[1:])

"""
  Display information on an AWS instance

    /Reservations/23/Instances/0/PublicIpAddress '34.201.117.107'

"""

parser = argparse.ArgumentParser(description='List AWS instance inforation')
parser.add_argument('names', metavar='name', nargs='*', help='One or more AWS hostnames')
parser.add_argument('-p', '--profile', help='Specify non-default profile')
parser.add_argument('-i', '--ip', action='store_true', help='Report on IP')
parser.add_argument('-l', '--list', dest='list', action='store_true', help='List host names')
parser.add_argument('-v', '--verbose', dest='verbose', action='count', help='Add more debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

if args.list and args.names:
  parser.error('-l may not be used with a list of hosts')
if (not args.list) and (not args.names):
  parser.error('No hosts specified and -l is not used')
if args.ip and (len(args.names) != 1):
  parser.error('--ip can only be used with exactly one host')

cmd = 'aws ec2 {profile} describe-instances'.format(profile=('--profile ' + args.profile) if args.profile else '')
log.info('cmd: {cmd!r}'.format(**locals()))
p = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
(stdout, stderr) = p.communicate()
rc = p.wait()

if rc or stderr:
  log.setLevel(logging.DEBUG)
log.debug('CLI: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))

if rc or stderr:
  parser.error('CLI failure')

int_regexp = re.compile('^\d+$')

names = {name: 0 for name in args.names or []}

instances = json.loads(stdout)
for instance in instances.get('Reservations', []):
  curr = get(instance, 'Instances/0/Tags/0/Value')
  if args.list:
    print curr
  else:
    chosen = False
    if curr in names.keys():
      chosen = True
      names[curr] += 1

    if not chosen:
      for name in names.keys():
        try:
          if re.search(name, curr):
            chosen = True
            names[name] += 1
        except:
          pass # the argument must not be a valid regular expression - that's ok!

    if chosen:
      if args.ip:
        print instance['Instances'][0]['PublicIpAddress']
      else:
        print json.dumps(instance, indent=2, sort_keys=True)

if not args.list:
  for (name, chosen) in names.items():
    if not chosen:
      log.warn('{name!r} was not found'.format(**locals()))
