#! /usr/bin/env python3

import re
import os
import json
import logging
import argparse
import subprocess

def get(root, path):
  if not path:
    return root

  if isinstance(path, str):
    path = path.split('/')

  if int_regexp.search(path[0]):
    pos = int(path[0])
    log.debug('pos: {pos}, root: {root}'.format(**locals()))
    assert 0 <= pos < len(root)
    return get(root[pos], path[1:])
  else:
    return get(root.get(path[0], {}), path[1:])

def get_user(instance):
  imageid = instance['Instances'][0]['ImageId']

  cmd = 'aws ec2 {profile} describe-images --image-ids {imageid}'.format(profile=('--profile ' + args.profile) if args.profile else '', **locals())
  log.info('cmd: {cmd!r}'.format(**locals()))
  p = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = p.communicate()
  rc = p.wait()

  if rc or stderr:
    log.setLevel(logging.DEBUG)
  log.debug('CLI: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))

  if rc or stderr:
    parser.error('CLI failure')

  images = json.loads(stdout)
  if len(images['Images']) == 1:
    description = images['Images'][0]['Description'].lower()
    log.info('image description: {description!r}'.format(**locals()))
    if 'amazon linux' in description:
      return 'ec2-user'
    elif 'ubuntu' in description:
      return 'ubuntu'
    elif 'debian' in description:
      return 'admin'
    elif 'red hat' in description:
      return 'ec2-user'
    elif 'centos' in description:
      return 'centos'
    else:
      parser.error('Could not determine AWS user from {description!r}'.format(**locals()))
  else:
    parser.error('Could not get single instance information')

def get_identify_file(profile):
  ret = ''

  profile_regexp = re.compile(r'^\[([^]]+)\]$')
  var_regexp = re.compile(r'^(\S+)\s*=\s*(\S+)$')

  creds = {}
  curr = None
  with open('{HOME}/.aws/credentials'.format(**os.environ)) as stream:
    for line in stream.read().splitlines():
      match = var_regexp.search(line)
      log.info('{line!r} var_regexp: {groups}'.format(groups=match.groups() if match else None, **locals()))
      if match and curr:
        creds[curr][match.group(1)] = match.group(2)
      else:
        match = profile_regexp.search(line)
        log.info('{line!r} profile_regexp: {groups}'.format(groups=match.groups() if match else None, **locals()))
        if match:
          curr = match.group(1)
          creds[curr] = {}
        else:
          curr = None

  log.info('creds: {creds}'.format(**locals()))

  identity_file = creds.get(profile, {}).get('identity_file', None)
  ret = '-i {identity_file} '.format(**locals()) if identity_file else ''

  log.info('get_identity_file({profile!r}) returning {ret!r}'.format(**locals()))
  return ret

parser = argparse.ArgumentParser(description='List AWS instance inforation')
parser.add_argument('names', metavar='name', nargs='*', help='One or more AWS hostnames')
parser.add_argument('-p', '--profile', help='Specify non-default profile')

group = parser.add_mutually_exclusive_group()
group.add_argument('-i', '--ip', action='store_true', help='Report on IP')
group.add_argument('-u', '--userip', '--ipuser', action='store_true', help='Report on user/IP')
group.add_argument('-s', '--ssh', action='store_true', help='Provide ssh credentials (identify file, user, ip)')

parser.add_argument('-l', '--list', dest='list', action='store_true', help='List host names')
parser.add_argument('-v', '--verbose', dest='verbose', action='count', help='Add more debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

if args.list and args.names:
  parser.error('-l may not be used with a list of hosts')
if (not args.list) and (not args.names):
  parser.error('No hosts specified and -l is not used')
if (args.ip or args.userip or args.ssh) and (len(args.names) != 1):
  parser.error('--ssh, --ip, and --userip can only be used with exactly one host')

cmd = 'aws ec2 {profile} describe-instances'.format(profile=('--profile ' + args.profile) if args.profile else '')
log.info('cmd: {cmd!r}'.format(**locals()))
p = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
(stdout, stderr) = p.communicate()
rc = p.wait()

if rc or stderr:
  log.setLevel(logging.DEBUG)
log.debug('CLI: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))

if rc or stderr:
  parser.error('CLI failure')

int_regexp = re.compile('^\d+$')

names = {name: 0 for name in args.names or []}

instances = json.loads(stdout)
for instance in instances.get('Reservations', []):
  curr = get(instance, 'Instances/0/Tags/0/Value')
  if args.list:
    print(curr)
  else:
    chosen = False
    if curr in names.keys():
      chosen = True
      names[curr] += 1

    if not chosen:
      for name in names.keys():
        try:
          if re.search(name, curr):
            chosen = True
            names[name] += 1
        except:
          pass # the argument must not be a valid regular expression - that's ok!

    if chosen:
      log.debug(instance)
      state = instance['Instances'][0]['State']['Name']
      if args.ip:
        # print instance['Instances'][0]['PublicIpAddress']
        if state == 'running':
          print(instance['Instances'][0]['PublicIpAddress'])
        else:
          log.warning('{curr} is {state}, no IP is available'.format(**locals()))
      elif args.userip:
        if state == 'running':
          print(get_user(instance) + '@' + instance['Instances'][0]['PublicIpAddress'])
        else:
          log.warning('{curr} is {state}, no user/IP is available'.format(**locals()))
      elif args.ssh:
        if state == 'running':
          print(get_identify_file(args.profile or 'default') + get_user(instance) + '@' + instance['Instances'][0]['PublicIpAddress'])
        else:
          log.warning('{curr} is {state}, no user/IP is available'.format(**locals()))
      else:
        print(json.dumps(instance, indent=2, sort_keys=True))

if not args.list:
  for (name, chosen) in names.items():
    if not chosen:
      log.warn('{name!r} was not found'.format(**locals()))
