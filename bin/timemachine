#! /usr/bin/env python3

import re
import sys
import getopt
import datetime

import pdb

def syntax(msg=None):
  if msg:
    sys.stderr.write("%s\n" % msg)

  sys.stderr.write("Syntax:\n")
  sys.stderr.write("        %s TIMESTAMP - TIMESTAMP\n" % sys.argv[0])
  sys.stderr.write("        %s TIMESTAMP + TIMEDELTA\n" % sys.argv[0])
  sys.stderr.write("        %s TIMESTAMP - TIMEDELTA\n" % sys.argv[0])
  sys.stderr.write('\n')
  sys.stderr.write('TIMESTAMP: {patterns}\n'.format(patterns=' or '.join(['\'{pattern}\''.format(**locals()) for pattern in datetimeFormats])))
  sys.stderr.write('TIMEDELTA: [[[DAYS:]HOURS:]MINUTES:]SECONDS[.MILLISECONDS]\n')

  exit(1)

def getTimedelta(s):
  """
    I'm doing the components as a dictionary so I could update their values dynamitically by name.
    I thought I could use the locals() builtin function as I have used globals() in the past but
    it works differently that globals().
  """
  components = {
                 "days": 0,
                 "hours": 0,
                 "minutes": 0,
                 "seconds": 0,
                 "microseconds": 0, # one-millionth of a second: range(999999)
               }
  valid = True

  ret = None

  tokens = s.split('.')
  if len(tokens) in [1,2]:
    if len(tokens) > 1:
      msecString = tokens[1].ljust(6, '0')
      if re.match("\d{6}$", str(msecString)):
        components["microseconds"] = int(msecString)
      else:
        valid = False

    if valid:
      tokens = tokens[0].split(':')
      tokenOrder = ["days", "hours", "minutes", "seconds"]
      if len(tokens) <= 4:
        for pos in range(-1, -(len(tokens) + 1), -1):
          if re.match("\d+$", tokens[pos]):
            components[tokenOrder[pos]] = int(tokens[pos])
          else:
            valid = False
      else:
        valid = False

  if valid:
    ret = datetime.timedelta(days=components["days"], hours=components["hours"], minutes=components["minutes"], seconds=components["seconds"], microseconds=components["microseconds"])

  return ret

datetimeFormats = [
                    "%Y/%m/%d %H:%M:%S.%f",
                    "%Y-%m-%d %H:%M:%S.%f",
                    "%Y/%m/%d %H:%M:%S",
                    "%Y-%m-%d %H:%M:%S",
                  ]

def getDatetime(s):
  timestamp = None
  for format in datetimeFormats:
    try:
      timestamp = datetime.datetime.strptime(s, format)
    except Exception as e:
      pass

  return timestamp

(opts,args) = ([], [])
try:
  (opts,args) = getopt.getopt(sys.argv[1:], "d", ["debug"])
except Exception as e:
  sys.stderr.write("%s\n" % e)
  syntax("Caught %s" % repr(e))

for (opt,arg) in opts:
  if opt in ["-d", "--debug"]:
    pdb.set_trace()

if len(args) != 3:
  syntax()

now = datetime.datetime.now()

if args[0] in ["now", "today"]:
  timestamp1 = now
else:
  timestamp1 = getDatetime(args[0])
  if not timestamp1:
    syntax("%s could not be parsed" % repr(args[0]))

operation = args[1]
if operation not in ['+', '-']:
  syntax("%s is not '+' or '-'" % operation)

timestamp2 = None
delta = None
if operation == '+':
  delta = getTimedelta(args[2])
  if not delta:
    syntax("%s could not be parsed as a timedelta" % repr(args[2]))
  print(timestamp1 + delta)
else:
  if args[2] == "now":
    timestamp2 = now
  else:
    timestamp2 = getDatetime(args[2])
    if timestamp2:
      print(timestamp1 - timestamp2)
    else:
      delta = getTimedelta(args[2])
      if delta:
        print(timestamp1 - delta)
      else:
        syntax("Could not parse %s as a timestamp or a timedelta" % repr(args[2]))
