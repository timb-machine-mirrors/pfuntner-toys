#! /usr/bin/env python2

import re
import os
import sys
import json
import getpass
import pymongo
import logging
import argparse
import traceback

from bson.objectid import ObjectId

from SecureKeyValues import SecureKeyValues

CONNECTION_STRING_TEMPLATE = 'mongodb://{args.user}:{pw}@{args.cluster_name}-shard-00-00-{args.server_name}.mongodb.net:27017,{args.cluster_name}-shard-00-01-{args.server_name}.mongodb.net:27017,{args.cluster_name}-shard-00-02-{args.server_name}.mongodb.net:27017/test?ssl=true&replicaSet={args.cluster_name}-shard-0&authSource=admin&retryWrites=true'

def get_value(label, args_attr, env_suffix, args_opt):
  ret = None
  environ_name = 'MONGODB_CLOUD_{env_suffix}'.format(**locals())

  if getattr(args, args_attr):
    ret = getattr(args, args_attr)
  else:
    ret = os.environ.get(environ_name)

  if not ret:
    log.log(logging.WARNING if env_suffix == 'DATABASE' else logging.CRITICAL, 'No {label} specified.  Export {environ_name} or specify via {args_opt}'.format(**locals()))

  return ret

def prepDocs(docs):
  for doc in docs:
    if type(doc['_id']) not in [int, float, bool]:
      doc['_id'] = str(doc['_id'])
  return docs

def noop(tokens):
  pass

def quit(tokens):
  exit(0)

def list_databases(tokens):
  global mongo

  print '\n'.join(mongo.database_names())

def list_collections(tokens):
  global mongo

  if args.db_name:
    print '\n'.join(mongo[args.db_name].collection_names())
  else:
    log.error('No database selected -- `use DATABASE_NAME`')

def select_from(tokens):
  global mongo

  if args.db_name:
    ret = prepDocs([doc for doc in mongo[args.db_name][tokens[0]].find({})])
    json.dump(ret, sys.stdout, indent=2, sort_keys=True)
    print ''
    # print ret
  else:
    log.error('No database selected -- `use DATABASE_NAME`')

def create_database(tokens):
  global mongo

  if args.db_name:
    print 'work in progress: create database {tokens}'.format(**locals())
  else:
    log.error('No database selected -- `use DATABASE_NAME`')

def create_document(tokens):
  global mongo
  global log

  if args.db_name:
    collection_name = tokens[0]
    raw = tokens[1]
    log.debug('raw: {raw!r}'.format(**locals()))
    content = json.loads(raw)
    log.debug('work in progress: create document in collection {collection_name} of database {db_name}: {content}'.format(db_name=args.db_name, **locals()))
    ret = mongo[args.db_name][collection_name].insert_one(content)
    log.info('Created in {db_name}/{collection_name} with id {id}'.format(
      db_name=args.db_name,
      collection_name=collection_name,
      id=ret.inserted_id,
    ))
  else:
    log.error('No database selected -- `use DATABASE_NAME`')

def objectify(s):
  id = None
  match = re.search('"_id":\s*(ObjectId\("([0-9a-f]{24})"\))', s)
  log.debug('objectify groups: {}'.format(match.groups() if match else None))
  if match:
    s = s[:match.start(1)] + 'null' + s[match.end(1)]
    id = match.group(2)

  return (s, id)

def delete_document(tokens):
  global mongo
  global log

  if args.db_name:
    collection_name = tokens[0]
    raw = tokens[1]
    log.debug('raw: {raw!r}'.format(**locals()))
    (raw, id) = objectify(raw)
    selection = json.loads(raw)
    if id:
      selection['_id'] = ObjectId(id)
      log.debug('objectified: {selection}'.format(**locals()))

    log.debug('work in progress: delete document from collection {collection_name} of database {db_name}: {selection}'.format(db_name=args.db_name, **locals()))
    ret = mongo[args.db_name][collection_name].delete_one(selection)
    log.info('Deleted {count} documents from {db_name}/{collection_name}: {ret}'.format(
      db_name=args.db_name,
      collection_name=collection_name,
      count=ret.deleted_count,
      ret=ret.raw_result,
    ))
  else:
    log.error('No database selected -- `use DATABASE_NAME`')

def use_database(tokens):
  global mongo
  global args

  args.db_name = tokens[1]

def help(tokens):
  print '\n'.join([action[0].pattern for action in actions[1:]])

parser = argparse.ArgumentParser(description='mongoDB cloud CLI')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('-s', '--server', dest='server_name', help='MongoDB server (eg aen6e)')
parser.add_argument('-c', '--cluster', dest='cluster_name', help='MongoDB cluster')
parser.add_argument('-u', '--user', dest='user', help='MongoDB user')
parser.add_argument('-d', '--db', dest='db_name', help='MongoDB database')
args=parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.INFO)

args.server_name = get_value('MongoDB server', 'server_name', 'SERVER', '-s')
args.cluster_name = get_value('MongoDB cluster', 'cluster_name', 'CLUSTER', '-c')
args.user = get_value('MongoDB user', 'user', 'USER', '-u')
args.db_name = get_value('MongoDB database', 'db_name', 'DATABASE', '-d')

if not all([args.server_name, args.cluster_name, args.user]):
  sys.stderr.write('\n')
  parser.print_help(sys.stderr)
  exit(1)

pw = SecureKeyValues('mongodb', ssh=True).get([args.server_name, args.cluster_name, args.user])
if pw:
  log.debug('Got password from mongodb secure store')
else:
  pw = getpass.getpass('Enter password for {args.user}@{args.cluster_name} cluster: '.format(**locals()))

connection_string = CONNECTION_STRING_TEMPLATE.format(**locals())
log.debug('Connection: {}'.format(re.sub(':\w+', ':' + ('*'*8), connection_string, 1)))
mongo = pymongo.MongoClient(connection_string)

actions = [
  (re.compile('^$', re.IGNORECASE), noop), # keep this as the first action so help() can skip it
  (re.compile('^quit(\(\))?$', re.IGNORECASE), quit),
  (re.compile('^help$', re.IGNORECASE), help),
  (re.compile('^use(\s+(\w+))?$', re.IGNORECASE), use_database),
  (re.compile('^list databases$', re.IGNORECASE), list_databases),
  (re.compile('^list collections$', re.IGNORECASE), list_collections),
  (re.compile('^select from (\S+)$', re.IGNORECASE), select_from),
  (re.compile('^create (\S+)\s+(.*)$', re.IGNORECASE), create_document),
  (re.compile('^delete (\S+)\s+(.*)$', re.IGNORECASE), delete_document),
]

while True:
  if sys.stdin.isatty():
    sys.stdout.write('{args.user} {args.db_name}> '.format(**locals()))

  cmd = sys.stdin.readline()
  if not cmd:
    break
  cmd = cmd.strip('\n').strip()

  matched = False
  for action in actions:
    match = action[0].search(cmd)
    if match:
      matched = True
      try:
        action[1](match.groups())
      except Exception as e:
        sys.stderr.write('Caught: {e}\n'.format(**locals()))
        traceback.print_exc(file=sys.stderr)
  if not matched:
    sys.stderr.write('What?\n')
