#! /usr/bin/env python3

import os
import re
import sys
import signal
import logging
import argparse
import datetime

import bruno_tools

def log_files(dir):
    ret = list()
    for filename in os.listdir(os.path.expanduser(dir)):
        path = os.path.join(dir, filename)
        if os.path.isdir(path):
            ret += log_files(path)
        elif path.endswith('.log') and not filename.startswith('#'):
            ret.append(path)
    return ret

parser = argparse.ArgumentParser(description='Search hexchat logs')
parser.add_argument('regexp', nargs='?', help='Regular expression for which to search')
parser.add_argument(
    '-d', '--days',
    type=float,
    help='Restrict messages to X days (negative for less than or equal, positive for greater than or equal)'
)
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

"""
*** BEGIN LOGGING AT Fri Nov 10 11:55:41 2023

[them has address ~user@host]
Nov 10 11:55:43 *     [them] (~ident@host): description
Nov 10 11:55:43 *     [them] #channel
Nov 10 11:55:43 *     [them] *.undernet.org :The Undernet Underworld
Nov 10 11:55:43 *     [them] idle 00:00:13, signon: Fri Nov 10 11:55:28
Nov 10 11:55:43 *     [them] End of WHOIS list.
Nov 10 11:55:48 <me>         message
Nov 10 11:56:29 <me>         message
Nov 10 11:56:49 <them>       message
Nov 10 11:56:57 *            me action
Nov 10 11:57:03 <me>         message
Nov 10 11:57:11 <them>       message
Nov 10 11:57:16 <me>         message
Nov 10 11:57:29 <me>         messages
"""

begin_regexp = re.compile(r'^\*\*\*.+BEGIN\s+LOGGING\s+AT\s+\S{3}\s+\S{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}\s+(\d{4})$')
address_regexp = re.compile(r'^\[\S+ has address ([^]]+)\]$')
common_timestamp = re.compile(r'^(\S{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2})\s+(.+)$')

now = datetime.datetime.now()

table = bruno_tools.Table('User', 'Network', 'Date', 'Message')

for path in sorted(log_files(os.path.expanduser('~/hexchat/logs'))):
    tokens = path.split('/')
    filename = tokens[-1]
    user = filename[:-4]
    network = tokens[-2]
    if network != user:
        year = None
        address = None
        with open(path) as stream:
            for line in stream.read().splitlines():
                # get year
                match = begin_regexp.search(line)
                if match:
                    year = match.group(1)
                else:
                    # get address
                    match = address_regexp.search(line)
                    if match:
                        address = match.group(1)
                    else:
                        # get common timestamp
                        match = common_timestamp.search(line)
                        if match:
                            timestamp = datetime.datetime.strptime(
                                year + ' ' + match.group(1),
                                '%Y %b %d %H:%M:%S'
                            )
                            if args.days is not None:
                                age = now - timestamp
                                if args.days < 0:
                                    if age > datetime.timedelta(days=-args.days):
                                        continue
                                elif age < datetime.timedelta(days=args.days):
                                    continue
                            remain = match.group(2)
                            if not remain.startswith('*'):
                                message = remain
                                if args.regexp and not re.search(args.regexp, message):
                                    continue
                                table.add(
                                    user,
                                    network,
                                    timestamp.strftime('%Y-%m-%d %H:%M:%S'),
                                    message,
                                )

table.close()
