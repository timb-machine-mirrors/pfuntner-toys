#! /usr/bin/env python2

import pdb

import sys
import json
import getopt
import datetime
import re

class Timer:
  def __init__(self):
    self.startTimestamp = datetime.datetime.now()
    self.stopTimestamp  = None

  def stop(self):
    self.stopTimestamp = datetime.datetime.now()

  def elapsed(self):
    if not self.stopTimestamp:
      self.stop()
    return self.stopTimestamp - self.startTimestamp

def debug(s):
  if verbose:
    sys.stderr.write("%s: %s\n" % (datetime.datetime.now(), s))

def syntax(msg=None):
  if msg:
    sys.stderr.write(msg + "\n")
  sys.stderr.write("Syntax: %s [-v|--verbose] [-d|--debug] [-f=FILE|--file=FILE]\n")
  exit(1)
  
verbose = False
stream = None
junk = False
(opts,args) = ([], [])
try:
  (opts,args) = getopt.getopt(sys.argv[1:], "jvdf:", ["junk", "verbose", "debug", "file="])
except Exception as e:
  syntax(str(e))

for (opt,arg) in opts:
  if opt in ["-d", "--debug"]:
    pdb.set_trace()
  elif opt in ["-v", "--verbose"]:
    verbose = not verbose
  elif opt in ["-f", "--file"]:
    stream = open(arg)
  elif opt in ["-j", "--junk"]:
    junk = not junk

if not stream:
  if sys.stdin.isatty():
    syntax("stdin must be redirected if -f/--file is not specified")
  stream = sys.stdin

junk_regexp = re.compile('([{\[].*)$')
in_struct = False
objs = []
readTimer = Timer()
lines = ""
linenum = 0
for line in stream:
  if junk and (not in_struct):
    match = junk_regexp.search(line)
    if match:
      line = match.group(1)
      in_struct = True

  if (not junk) or in_struct:
    lines += line
    try:
      objs.append(json.loads(lines))
    except Exception as e:
      # raise Exception("Caught %s with line %d: %s" % (e, len(objs)+1, repr(line)))
      pass
    else:
      lines = ""
      in_struct = False

  linenum += 1
  debug('{linenum:0>8} {items:0>8} {line!r}'.format(linenum=linenum, items=len(objs), line=line))

debug("%d elements read in %s" % (len(objs), readTimer.elapsed()))

if all(["timestamp" in datum for datum in objs]):
  sortTimer = Timer()
  objs = sorted(objs, key=lambda datum: datum["timestamp"])
  sortTimer.stop()
  debug("sorted in %s" % sortTimer.elapsed())

printTimer = Timer()
print json.dumps(objs, indent=2, sort_keys=True)
debug("printed in %s" % printTimer.elapsed())
