#! /usr/bin/env python3

import re
import sys
import signal
import logging
import argparse
import datetime
import subprocess

from table import Table
from gityup import Git

def run(cmd, capture=True):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None)
  if capture:
    (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  else:
    (stdout, stderr) = ('', '')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

def shorten(s):
  if not args.long:
    s = s[:60]
  return s

parser = argparse.ArgumentParser(description='Summary git log')
parser.add_argument('targets', metavar='target', nargs='*', help='Zero or more targets (files, etc)')
parser.add_argument('-r', '--remote', action='store_true', help='Examine remote branch')
parser.add_argument('-b', '--branch', help='Examine branch other than current')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')

group = parser.add_mutually_exclusive_group()
group.add_argument('-l', '--long', action='store_true', help='Do not truncate commit text')
group.add_argument('-s', '--shorten', action='store_true', help='Shorten commit SHAs')

(args, unknown_args) = parser.parse_known_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

branch = None
if args.branch:
  branch = args.branch
else:
  (rc, stdout, stderr) = run('git branch')
  branch_match = re.search(r'^\*\s+(\S+)$', stdout, re.MULTILINE)
  if branch_match:
    branch = branch_match.group(1)
  else:
    parser.error('Could not detect current branch')

table = Table('Commit', 'Author', 'Date (UTC)', 'Text')
git_class = Git(log)
for commit in git_class.parse_log(unknown_args + [('origin/' if args.remote else '') + branch] + args.targets):
  table.add(commit['commit'][:7] if args.shorten else commit['commit'], commit['author'], commit['utc_date'], shorten(repr('\n'.join(commit['messages']))[1:-1]))

print(str(table), end='')
