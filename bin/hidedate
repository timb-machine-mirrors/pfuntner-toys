#! /usr/bin/env python2

import re
import sys

class Object(object):
  pass

def dictToObj(oldobjs):
  new = []
  for oldobj in oldobjs:
    new.append(Object())
    for (key, value) in oldobj.items():
      setattr(new[-1], key, value)
  return new

def debug(s):
  if verbose:
    sys.stderr.write('>>> {s}\n'.format(s=repr(s)))

assert not sys.stdin.isatty(), 'stdin must be redirected'

regexps = dictToObj([
  {
    'regexp': re.compile('(^|\D)(\d{10}-\d{3})(\D|$)', flags=re.MULTILINE),
    'pos': 2,
    'replacement': ('#'*10) + '-' + ('#'*3),
  },
  {
    'regexp': re.compile('(^|\D)(\d{10}-\d{6})(\D|$)', flags=re.MULTILINE),
    'pos': 2,
    'replacement': ('#'*10) + '-' + ('#'*6),
  },
  {
    'regexp': re.compile('(^|\D)(\d{10}\.\d{3})(\D|$)', flags=re.MULTILINE),
    'pos': 2,
    'replacement': ('#'*10) + '.' + ('#'*3),
  },
  {
    'regexp': re.compile('(^|\D)(\d{10}\.\d{6})(\D|$)', flags=re.MULTILINE),
    'pos': 2,
    'replacement': ('#'*10) + '.' + ('#'*6),
  },
  {
    'regexp': re.compile('(^|\D)(\d{10}\.\d{2})(\D|$)', flags=re.MULTILINE),
    'pos': 2,
    'replacement': ('#'*10) + '.' + ('#'*2),
  },
  {
    'regexp': re.compile('([A-Z][a-z]{2} [A-Z][a-z]{2} ( |\d)\d \d{2}:\d{2}:\d{2} \S+ \d{4})', flags=re.MULTILINE),
    'pos': 1,
    'replacement': 'Www Mmm dd HH:MM:SS ZZZ YYYY',
  },
  {
    'regexp': re.compile('(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{6})', flags=re.MULTILINE),
    'pos': 1,
    'replacement': 'YYYY-mm-ddTHH:MM:SS.ssssss',
  },
])

verbose = ('-v' in sys.argv[1:]) or ('--verbose' in sys.argv[1:])

data = sys.stdin.read()
for regexp in regexps:
  for hit in list(regexp.regexp.finditer(data))[-1::-1]:
    debug(hit.group(regexp.pos))
    debug(data[hit.start(regexp.pos):hit.end(regexp.pos)])
    debug(data)
    data = data[:hit.start(regexp.pos)] + regexp.replacement + data[hit.end(regexp.pos):]
    debug(data)
sys.stdout.write(data)
