#! /usr/bin/env python2

import re
import sys
import logging
import argparse
import subprocess

parser = argparse.ArgumentParser(description='Cat a file from git')
parser.add_argument('branch', nargs='?', help='Git branch: SHA1, HEAD~1, etc (default: HEAD)')
parser.add_argument('filename', help='Name of file to extract')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

# git cat-file -p HEAD~1:meta/main.yml

if args.branch is None:
  args.branch = 'HEAD'
elif re.match('-\d+$', args.branch):
  args.branch = 'HEAD~{}'.format(args.branch[1:])

cmd = ['git', 'cat-file', '-p', '{args.branch}:{args.filename}'.format(**locals())]
log.debug('cmd: {cmd}'.format(**locals()))
p = subprocess.Popen(cmd, stderr=subprocess.PIPE)
(_, stderr) = p.communicate()
rc = p.wait()
log.debug('{rc}, {stderr!r}'.format(**locals()))
if stderr:
  sys.stderr.write(stderr)

exit(1 if (stderr or rc != 0) else 0)
