#! /usr/bin/env python2

import os
import re
import logging
import argparse

def process(filename):
  if os.path.isfile(filename):
    log.info('Processing {filename!r}'.format(**locals()))
    with open(filename) as stream:
      cls = None
      for (linenum, line) in enumerate(stream.read().splitlines()):
        linenum += 1
        log.debug('scanning {linenum}: {line!r}'.format(**locals()))
        match = class_regexp.search(line)
        log.debug('class match: {groups}'.format(groups=match.groups() if match else None))
        if match:
          cls = match.group(1)
        else:
          match = method_regexp.search(line)
          log.debug('method match: {groups}'.format(groups=match.groups() if match else None))
          if match:
            method = match.group(2)
            if not match.group(1):
              cls = None
              print '{filename}:{linenum} {method}()'.format(**locals())
            elif cls:
              print '{filename}:{linenum} {cls}.{method}()'.format(**locals())
            else:
              log.warning('{filename}:{linenum} defines class method {method}() without a class'.format(**locals()))
  else:
    log.warning('Not a file: {filename!r}'.format(**locals()))

parser = argparse.ArgumentParser(description='Find Python methods')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('files', metavar='file', nargs='+', help='One or more Python scripts to scan')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

class_regexp = re.compile('^class ([^(: \t]+)\s*(?=[(:])')
method_regexp = re.compile('^(\s*)def\s+([^( \t]+)\s*(?=\()')

map(process, args.files)
