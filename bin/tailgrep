#! /usr/bin/env python3

"""
  Do a `head` or `tail` based on a regular expression
  rather than a number of lines.

  Expectations:
    There is exactly one regular expression specified
    Data is read from stdin
    `headgrep` and `tailgrep` should be links to the same script.  No other names are expected.
    `headgrep` prints the data from the FIRST line up to and including the first line that matches the regular expression
    `tailgrep` prints the data from the LAST line that matches the regular expression through the last line
"""

import sys
import os
import re
import getopt

def reversed(items):
  """
    Reverse a list without the side effect of reversing the original list
  """
  return items[-1::-1]

def lastIndex(items, item):
  """
    Find the last index of `item` in the `items` list.  This is
    similar to list.index() which works left to right but this works
    right to left.
  """
  return len(items) - reversed(items).index(item) - 1

def syntax(msg=None):
  if msg:
    sys.stderr.write(msg + "\n")
  sys.stderr.write("Syntax: %s [-v|--negate] REGEXP\n" % sys.argv[0])
  exit(1)
 
base = os.path.basename(sys.argv[0])
expectedBases = ["headgrep", "tailgrep"]
if not os.path.basename(base) in expectedBases:
 syntax("%s is not %s" % (repr(base), " or ".join([repr(expectedBase) for expectedBase in expectedBases])))

assert not sys.stdin.isatty(), "stdin must be redirected"

negate = False
(opts,args) = ([],[])
try:
  (opts,args) = getopt.getopt(sys.argv[1:], "v", ["negate"])
except Exception as e:
  syntax(str(e))

for (opt,arg) in opts:
  if opt in ["-v", "--negate"]:
    negate = not negate
  else:
    syntax("Don't know how to handle %s" % repr(opt))

if len(args) != 1:
  syntax("Exactly one regular expression is required")

regexp = re.compile(args[0])

lines = sys.stdin.read().splitlines()
matches = [(bool(match) != negate) for match in map(regexp.search, lines)]

assert any(matches), "No matches for %s" % repr(regexp.pattern)

if base == "headgrep":
  lines = lines[:matches.index(True)+1]
else:
  lines = lines[lastIndex(matches,True):]

print('\n'.join(lines))
