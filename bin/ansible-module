#! /usr/bin/env python3

"""
  $ ansible-module file '{ "path": "/foo", "state": "absent" }'
  - name: Run file
    hosts: localhost
    tasks:
      - file:
          path: /foo
          state: absent
  
  PLAY [Run file] *****************************************************************************************************************************************************************************************************************************
  
  TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
  ok: [localhost]
  
  TASK [file] *********************************************************************************************************************************************************************************************************************************
  ok: [localhost]
  
  PLAY RECAP **********************************************************************************************************************************************************************************************************************************
  localhost                  : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
  
  $
"""

import json
import yaml
import logging
import argparse
import tempfile
import subprocess

def run(cmd, trap=True):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE if trap else None, stderr=subprocess.PIPE if trap else None)
  (stdout, stderr) = tuple([s.decode('utf-8') if s else None for s in p.communicate()])
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Run an Ansible module')
parser.add_argument('module', help='Name of Ansible module')
parser.add_argument('args', help='JSON dictionary for arguments')
parser.add_argument('--hosts', default='localhost', help='Comma-delimited list of host (default: localhost)')
parser.add_argument('-a', '--ansible-verbose', action='count', help='Use Ansible --verbose option')
parser.add_argument('-b', '--become', action='store_true', help='Become superuser')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

ansible_args = yaml.dump(json.loads(args.args))
log.info(f'ansible_args: {ansible_args}')
playbook_file = tempfile.NamedTemporaryFile(mode='w')
log.info(f'playbook_file: {playbook_file.name}')
playbook_file.write(f'''- name: Run {args.module}
  hosts: {args.hosts}
  tasks:
    - {args.module}:
''')

for ansible_arg in ansible_args.splitlines():
  playbook_file.write(f'        {ansible_arg}\n')

if args.become:
  playbook_file.write('  become: true\n')

playbook_file.flush()
run(f'cat {playbook_file.name}', trap=False)

opts = ' '.join(['-v'] * (args.ansible_verbose or 0))

run(f'ansible-playbook {opts} {playbook_file.name}', trap=False)
