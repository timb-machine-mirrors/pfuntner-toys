#! /usr/bin/env python3

import os
import sys
import signal
import logging
import argparse
import subprocess

class Table(object):
  def __init__(self, *args):
    if len(args) == 1 and type(args[0]) in (list, tuple):
      self.headings = args[0]
    else:
      self.headings = args

    try:
      self.p = subprocess.Popen(['column', '-t', '-s\t'], stdin=subprocess.PIPE, text=True)
    except Exception as e:
      print(f'Error opening `column`: {e!s}', file=sys.stderr)
      print('On Ubuntu, try installing the bsdmainutils package', file=sys.stderr)
      exit(1)

    self.p.stdin.write('\t'.join([str(heading) for heading in self.headings]) + '\n')

  def add(self, *args):
    self.p.stdin.write('\t'.join([str(arg) for arg in args]) + '\n')

  def close(self):
    self.p.stdin.close()
    self.p.wait()

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))

  p = None
  try:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  except Exception as e:
    (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

  if p:
    if stdin:
      p.stdin.write(stdin.encode())
    if capture:
      (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    else:
      (stdout, stderr) = ('', '')
    rc = p.wait()

  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Report on disk usage')
parser.add_argument('files', metavar='file', nargs='*', default=['.'], help='Zero or more files (default: `.`)')
parser.add_argument('--ssh', help='Remote server on which to execute')
parser.add_argument('-L', '--follow', action='store_true', help='Follow symlinks')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

table = Table('File', 'Filesystem', 'Total blocks', 'Total used', 'Blocks', 'Used')
for filename in args.files:
  if os.path.exists(filename):
    # Filesystem     1K-blocks      Used Available Use% Mounted on
    # C:/cygwin64    248780408 162975760  85804648  66% /
    cmd = (['ssh', '-o', 'StrictHostKeyChecking=no', args.ssh, '--'] if args.ssh else []) + ['df', '-k', filename]
    (rc, stdout, stderr) = run(cmd)
    stdout_lines = stdout.splitlines()
    if rc == 0 and len(stdout_lines) == 2:
      (file_system, total_blocks, total_used, total_avail, total_used, mount_point) = stdout_lines[1].split()
  
      cmd = (['ssh', '-o', 'StrictHostKeyChecking=no', args.ssh, '--'] if args.ssh else []) + ['du', '-k'] + (['-L'] if args.follow else []) + [filename]
      (rc, stdout, stderr) = run(cmd)
      stdout_lines = stdout.splitlines()
      if rc == 0 and len(stdout_lines) > 0:
        curr_blocks = int(stdout_lines[-1].split()[0])
        table.add(filename, file_system, total_blocks, total_used, curr_blocks, f'{int(curr_blocks*100/int(total_blocks))}%')
      else:
        log.error(f'du error for {filename!r}: {rc}, {stdout!r}, {stderr!r}')
    else:
      log.error(f'df error for {filename!r}: {rc}, {stdout!r}, {stderr!r}')
  else:
    log.error(f'Could not find {filename!r}')

table.close()
