#! /usr/bin/env python3

import re
import os
import sys
import signal
import inspect
import logging
import argparse

class Base(object):
  def __init__(self, filename):
    self.valid = False
    self.filename = filename
    self.data = None
    if os.path.exists(filename):
      if not os.path.isdir(filename):
        with open(filename, 'rb') as stream:
          self.data = stream.read().splitlines()
          self.valid = True
      else:
        log.warning(f'Cannot open {filename}')
    else:
      log.warning(f'Cannot find {filename}')


class PythonBase(Base):
  def __init__(self, filename):
    Base.__init__(self, filename)

  def test(self):
    ret = False
    if self.data:
      match = None
      try:
        match = re.match(r'#!\s?/usr/bin/(\S+)\s*(\S*)$', self.data[0].decode())
      except:
        log.debug(f'Skipping for {self.filename}')
      log.debug('{name} match: {groups}'.format(name=self.name, groups=match.groups() if match else 'None'))
      if match:
        if match.groups(1) == self.name or (match.group(1) == 'env' and match.group(2) == self.name):
          ret = True
    log.debug(f'{self.name} ret: {ret}')
    return ret


class ExtBase(Base):
  def __init__(self, filename):
    Base.__init__(self, filename)

  def test(self):
    ret = self.filename.endswith('.' + self.name)
    log.debug(f'{self.name} ret: {ret}')
    return ret


class Python(PythonBase):
  name = 'python'

  def __init__(self, name):
    PythonBase.__init__(self, name)


class Python2(PythonBase):
  name = 'python2'

  def __init__(self, name):
    PythonBase.__init__(self, name)


class Python3(PythonBase):
  name = 'python3'

  def __init__(self, name):
    PythonBase.__init__(self, name)


class Java(ExtBase):
  name = 'java'

  def __init__(self, name):
    ExtBase.__init__(self, name)


class JavaClass(ExtBase):
  name = 'class'

  def __init__(self, name):
    ExtBase.__init__(self, name)


class CompiledPython(ExtBase):
  name = 'pyc'

  def __init__(self, name):
    ExtBase.__init__(self, name)


capitalized_regexp = re.compile(r'[A-Z]')

def is_capitalized(s):
  return bool(capitalized_regexp.match(s))

testers = {
  obj.name: obj for name, obj in inspect.getmembers(sys.modules[__name__]) if is_capitalized(name) and not name.endswith(('Base'))
}

parser = argparse.ArgumentParser(description='Determine interpreter of scripts')
parser.add_argument('-i',
                    '--interpreter',
                    choices=[tester for tester in testers.keys()],
                    help='Name of interpreter for which to search')
parser.add_argument('files', metavar='file', nargs='+', help='One or more file names')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

log.info(f'args: {args}')

if args.interpreter:
  testers = {args.interpreter: testers[args.interpreter]}

for filename in args.files:
  valid = True
  interp = None
  for name, cls in testers.items():
    tester = cls(filename)
    if tester.valid:
      if tester.test():
        interp = name
        break
    else:
      valid = False
      break

  if valid:
    if interp:
      if args.interpreter:
        print(filename)
      else:
        print(f'{filename}\t{interp}')
    elif not args.interpreter:
      print(f'{filename}\tUNKNOWN')
