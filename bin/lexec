#! /usr/bin/env python3

import os
import re
import sys
import logging
import argparse

isWindows = 'win' in sys.platform.lower()

parser = argparse.ArgumentParser(description='Locate executables with regular expressions')
parser.add_argument('pats', metavar='pat', nargs='+', help='One or more regular expressions')

parser.add_argument('-l', '--local', action='count', help='Report on non-system executables only')

if isWindows:
  parser.add_argument('-s', '--system', action='store_true', help='Expand search to system directories (Windoze only - slow!!!)')

parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

positivePats = []
negativePats = []

for pat in args.pats:
  if pat and (pat[0] == '!'):
    negativePats.append(re.compile(pat[1:]))
  else:
    positivePats.append(re.compile(pat))

history = set()

notLocal = re.compile("/c/WINDOWS|/c/Program Files", re.IGNORECASE)
system_paths = [re.compile('^/usr/(local|ucb|bin|sbin)'), re.compile('^/s?bin')]

# Real Unix and CYGWIN separate paths in a list with a colon but Git bash uses a semicolon
dirs = re.split('[;:]', os.environ["PATH"])
for dir in dirs:
  log.info("raw dir {dir}".format(**locals()))
  if (dir not in history) and ((not isWindows) or args.system or (not notLocal.search(dir))) and ((not args.local) or not any([regexp.search(dir) for regexp in system_paths])):
    history.add(dir)
    if os.path.isdir(dir):
      log.info("good dir {dir}".format(**locals()))
      files = os.listdir(dir)
      for file in files:
        path = os.path.join(dir, file)
        log.info("testing {path}".format(**locals()))
        if os.path.isfile(path) and os.access(path, os.X_OK):
          candidate = False
          for pat in positivePats:
            if pat.search(file):
              candidate = True
              break
          if candidate:
            for pat in negativePats:
              if pat.search(file):
                candidate = False
                break
          if candidate:
            print(path)
  else:
    log.info("Skipping {dir}".format(**locals()))
