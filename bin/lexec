#! /usr/bin/env python3

import os
import os.path
import sys
import re
import getopt

def debug(msg):
  if verbose:
    sys.stderr.write(msg + "\n")

def syntax(s):
  if s:
    sys.stderr.write(s + "\n")
  sys.stderr.write("Syntax %s [-d|--debug] [-l|--local] pat1 [pat2 ...]\n" % sys.argv[0])
  exit(1)

(opts,args) = ([], [])
try:
  (opts,args) = getopt.getopt(sys.argv[1:], "dl", ["debug", "local"])
except Exception as e:
  syntax(str(e))

verbose = False
localOnly = False
for (opt,arg) in opts:
  if opt in ["-d", "--debug"]:
    verbose = not verbose
  elif opt in ["-l", "--local"]:
    localOnly = not localOnly
  else:
    syntax("Don't know how to handle {opt}".format(opt=repr(opt)))

if not args:
  syntax()

positivePats = []
negativePats = []

for pat in args:
  if pat and (pat[0] == '!'):
    negativePats.append(re.compile(pat[1:]))
  else:
    positivePats.append(re.compile(pat))

history = set()

notLocal = re.compile("/c/WINDOWS|/c/Program Files", re.IGNORECASE)

# Real Unix and CYGWIN separate paths in a list with a colon but Git bash uses a semicolon
dirs = re.split('[;:]', os.environ["PATH"])
for dir in dirs:
  debug("raw dir {dir}".format(**locals()))
  if (dir not in history) and ((not localOnly) or (not notLocal.search(dir))):
    history.add(dir)
    if os.path.isdir(dir):
      debug("good dir {dir}".format(**locals()))
      files = os.listdir(dir)
      for file in files:
        path = os.path.join(dir, file)
        debug("testing {path}".format(**locals()))
        if os.path.isfile(path) and os.access(path, os.X_OK):
          candidate = False
          for pat in positivePats:
            if pat.search(file):
              candidate = True
              break
          if candidate:
            for pat in negativePats:
              if pat.search(file):
                candidate = False
                break
          if candidate:
            print(path)
  else:
    debug("Skipping {dir}".format(**locals()))
