#! /usr/bin/env python

import os
import re
import gzip
import string
import tarfile
import logging
import argparse
import StringIO
import subprocess


class BaseFileType(object):
  def __init__(self, name, pattern=None, content=None):
    """
    The base class is inherited by all file type classes.
    :param name: Name of the file type (required)
    :param pattern: Pattern to match the file name
    :param content: Boolean method that must return True based on file content
    """
    self.name = name
    self.pattern = re.compile(pattern) if pattern else None
    self.content_method = content


class Tarball(BaseFileType):
  def __init__(self, name=None, pattern=None, content=None):
    super(Tarball, self).__init__(name or 'Tarball', pattern=pattern if name else r'\.tar$', content=content)

  def compare(self, file_name1=None, data1=None, file_name2=None, data2=None):
    assert file_name1 and file_name2, 'Two files are required'
    if not data1:
      data1 = read(file_name1)
    if not data2:
      data2 = read(file_name2)
    tc1 = tar_count(data1)
    tc2 = tar_count(data2)
    emit(
      ('File name', 'directories', 'files', 'others'),
      (file_name1, tc1.dirs, tc1.files, tc1.others),
      (file_name2, tc2.dirs, tc2.files, tc2.others),
    )


class GzippedTarball(Tarball):
  """
  The super class is sufficient to read gzipped tar balls so we don't need to implement compare().  The only
  difference between the classes is the constructor: basically, what regular expression we use to identify
  the type of file.
  """
  def __init__(self):
    super(GzippedTarball, self).__init__('Gzipped tarball', pattern=r'\.(tgz|tar\.gz)$')


class XzTarball(Tarball):
  """
  The super class is not quite sufficient to read xz-compressed tar balls so we need to implement compare().
  """
  def __init__(self):
    super(XzTarball, self).__init__('XZ tarball', pattern=r'\.tar\.xz$')

  def compare(self, file_name1=None, file_name2=None):
    data1 = xz_uncompress(read(file_name1))
    data2 = xz_uncompress(read(file_name1))
    super(XzTarball, self).compare(file_name1=file_name1, data1=data1, file_name2=file_name2, data2=data2)


class PlainText(BaseFileType):
  def __init__(self, name=None, pattern=None, content=None):
    super(PlainText, self).__init__(name or 'Plain text', pattern=pattern, content=content if name else no_binary)

  def compare(self, file_name1=None, data1=None, file_name2=None, data2=None):
    assert file_name1 and file_name2, 'Two files are required'
    if not data1:
      data1 = read(file_name1)
    if not data2:
      data2 = read(file_name2)
    wc1 = word_count(data1)
    wc2 = word_count(data2)
    emit(
      ('File name', 'lines', 'words', 'bytes'),
      (file_name1, wc1.lines, wc1.words, wc1.bytes),
      (file_name2, wc2.lines, wc2.words, wc2.bytes),
    )

class GzippedText(PlainText):
  """
  This class leverages the PlainText class by uncompressing both files and then using the compare() method
  of the super class.
  """
  def __init__(self):
    super(GzippedText, self).__init__('Gzipped text', pattern=r'\.gz$')

  def compare(self, file_name1=None, file_name2=None):
    assert file_name1 and file_name2, 'Two files are required'

    super(GzippedText, self).compare(
      file_name1=file_name1,
      data1=gunzip(file_name1),
      file_name2=file_name2,
      data2=gunzip(file_name2),
    )


class UnknownType(BaseFileType):
  def __init__(self):
    super(UnknownType, self).__init__('Unknown type')


class Object(object):
  """
  Bogus class that will allow us to instantiate an instance and create arbitrary attributes.
  """
  pass


def xz_uncompress(data):
  p = subprocess.Popen('xz --decompress --stdout'.split(), stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = p.communicate(data)
  rc = p.wait()
  assert (rc == 0) and (not stderr), 'xz uncompress failure: {rc}, {stderr!r}'.format(**locals())
  return stdout

def read(file_name):
  data = None
  with open(file_name) as stream:
    data = stream.read()
  return data

def gunzip(file_name):
  data = None
  with gzip.open(file_name) as stream:
    data = stream.read()
  return data

def word_count(data):
  ret = Object()
  setattr(ret, 'lines', 0)
  setattr(ret, 'words', 0)
  setattr(ret, 'bytes', 0)

  follow_newline = False
  follow_whitespace = False

  for c in data:
    if (ret.bytes == 0) or follow_newline:
      ret.lines += 1
      follow_newline = False
    if ((ret.bytes == 0) and (c in string.whitespace)) or follow_whitespace:
      ret.words += 1
      follow_whitespace = False
    ret.bytes += 1

    follow_newline = c == '\n'
    follow_whitespace = c in string.whitespace

  return ret

def tar_count(data):
  ret = Object()
  setattr(ret, 'dirs', 0)
  setattr(ret, 'files', 0)
  setattr(ret, 'others', 0)

  tarball = tarfile.open(fileobj=StringIO.StringIO(data))
  for member in tarball.getmembers():
    log.debug('member: {type} {member.name}'.format(
      type='-' if member.isfile() else ('d' if member.isdir() else '?'),
      **locals()))
    if member.isdir():
      ret.dirs += 1
    elif member.isfile():
      ret.files += 1
    else:
      ret.others += 1

  return ret

def no_binary(file_name):
  """
  Determine if a file is not composed of binary data
  :param file_name: The name of the file to scan
  :return: True if file is none-empty and no binary data is found, False otherwise
  """
  data = read(file_name)
  if not data:
    log.info('{file_name} is empty => False'.format(**locals()))
    return False
  non_printables = set([c for c in data if c not in string.printable])
  if non_printables:
    log.info('{file_name} data {non_printables} => False'.format(**locals()))
    return False

  log.info('{file_name} data => True'.format(**locals()))
  return True

def find_type(file_name):
  """
  Find the FileType that describes a file
  :param file_name: Name of file to find the type of
  :return: The FileType that describes the file, None if no FileType was found
  """

  for file_type in file_types:
    log.debug('Trying {file_type.name}'.format(**locals()))
    if file_type.pattern and not file_type.pattern.search(file_name):
      continue
    if file_type.content_method and not file_type.content_method(file_name):
      continue
    log.info('{file_name} => {file_type.name}'.format(**locals()))
    return file_type
  return None

def assert_files(*file_names):
  assert file_names, 'At least one file must be specified'
  missing = [file_name for file_name in file_names if (not os.path.exists(file_name)) or os.path.isdir(file_name)]
  if missing:
    log.error('Not found: {files}'.format(files=', '.join(missing)))
    return False

def str_with_numeric_commas(obj):
  """
  Stringify an object - sort of like str(obj) but formatting numerics with commas.
  :param obj:
  :return: A string representation of the object
  """
  if isinstance(obj, int) or isinstance(obj, float):
    return '{:,}'.format(obj)
  else:
    return str(obj)

def emit(*rows):
  """
  Print rows and columns to stdout
  :param rows: A tuple of tuples of strings/ints.  Each outer tuple represents a row and each inner tuple represents
  columns in that row
  :return: None
  """
  stdin = '\n'.join('|'.join(str_with_numeric_commas(column) for column in row) for row in rows)

  p = subprocess.Popen(['column', '-t', '--separator', '|'], stdin=subprocess.PIPE)
  p.communicate(stdin + '\n')
  p.wait()

file_types = [
  Tarball(),
  GzippedTarball(),
  XzTarball(),
  GzippedText(),
  PlainText(),
  UnknownType(),
]

parser = argparse.ArgumentParser(description='Make gross comparisons between a couple of files')
parser.add_argument('-v', '--verbose', dest='verbose', action='count', help='Enable more debugging')
parser.add_argument('file1', help='First file')
parser.add_argument('file2', help='Second file')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(funcName)s %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - 10*(args.verbose or 0))

log.debug('Types: {types}'.format(types=[file_type.name for file_type in file_types]))

assert_files(args.file1, args.file2)
type1 = find_type(args.file1)
type2 = find_type(args.file2)

if type1 != type2:
  parser.error('File type mismatch: {args.file1} is {type1.name} and {args.file2} is {type2.name}'.format(**locals()))

if type1 is file_types[-1]:
  parser.error('{args.file1} and {args.file2} have unknown file types'.format(**locals()))

type1.compare(file_name1=args.file1, file_name2=args.file2)
