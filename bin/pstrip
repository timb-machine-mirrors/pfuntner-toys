#! /usr/bin/env python3

import re
import sys
import logging
import argparse

parser = argparse.ArgumentParser(description='Python strip - remove whitespace')
parser.add_argument('-t', '--trailing', action='count', help='Remove trailing blanks: default: True')

group = parser.add_mutually_exclusive_group()
group.add_argument('-l', '--leading', action='count', help='Remove all leading blanks: default: False')
group.add_argument('-c', '--common', action='count', help='Remove common leading blanks: default: False')

parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

trailing = bool((args.trailing or 1) % 2)
leading = bool((args.leading or 0) % 2)
common = bool((args.common or 0) % 2)

log.info(f'trailing={trailing}, leading={leading}, common={common}')

if not (trailing or leading or common):
  parser.error('No stripping is requested')

if sys.stdin.isatty():
  parser.error('stdin is not redirected')

search_regexp = re.compile('^(\s*)')
lines = sys.stdin.read().splitlines()
if common:
  lens = [len(search_regexp.search(line).group(1)) for line in lines if line]
  shift = min([curr for curr in lens])
  log.info(f'shift is {shift} blanks')
  sub_regexp = re.compile(r'^\s{' + str(shift) + '}')
elif leading:
  sub_regexp = re.compile(r'^\s*')
else:
  sub_regexp = None

log.info(f'sub_regexp: {sub_regexp!r}')

for line in lines:
  if trailing:
    line = line.rstrip()
  if sub_regexp:
     line = sub_regexp.sub('', line)
  print(line)
