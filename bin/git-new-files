#! /usr/bin/env python3

import signal
import logging
import argparse

from gityup import Git
from table import Table

def find(items, datum):
  ret = [pos for (pos, item) in enumerate(items) if item[0] == datum]
  assert len(ret) == 1, '{datum!r} found {count} times'.format(datum=datum, count=len(ret))
  return ret[0]

parser = argparse.ArgumentParser(description='List git files as they have been added')
parser.add_argument('-a', '--all', action='store_true', help='Display all information')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

"""
  {
    "author": "jpfuntne@cisco.com",
    "commit": "b910bbd0ad8727b6779b0ed897f56aab03e0031b",
    "files": [
      {
        "name": "bin/rotate",
        "operation": "add"
      }
    ],
    "messages": [
      "Creating new tool"
    ],
    "utc_date": "2020-07-31 14:06:49"
  },
"""

files = []
gitlog = Git(log).parse_log()
for commit in gitlog[-1::-1]:
  for curr in commit.get('files', []):
    log.debug('{commit} {curr} files={files}'.format(commit=commit['commit'], curr=curr, files=files))
    if curr['operation'] == 'add':
      files.insert(0, [curr['name'], commit['utc_date'], commit['commit'], commit['author']])
    elif curr['operation'] == 'rename':
      pos = find(files, curr['old_name'])
      files[pos][0] = curr['name']
    elif curr['operation'] == 'delete':
      pos = find(files, curr['name'])
      files.pop(pos)

table = Table('Name', 'Date', 'Commit', 'Author') if args.all else None
for curr in files:
  if args.all:
    table.add(curr)
  else:
    print(curr[0])
if args.all:
  print(str(table), end='')
