#! /usr/bin/env python3

import re
import sys
import getopt
import os.path

"""
  Apply multiple regular expressions to a list of files.

    o -i regexp or --include regexp : the file must include the regular expression.

      This is an "and" condition: If multiple `include` expressions are present, each 
      must pass at least once in the file.

    o -x regexp or --exclude regexp : the must must not include the regular expression.

      This is an "or" condition: If multiple `exclude` expressions are present, the file
      will fail when the first expression is present.

  You can follow --include expressions with --include or --exclude expressions but you can 
  only follow --exclude expressions with more --exclude expressions.
"""

def syntax(msg=None):
  if msg:
    sys.stderr.write("%s\n" % msg)
  sys.stderr.write("Syntax: %s -i REGEXP -x REGEXP ... --verbose file ...\n" % sys.argv[0])
  exit(1)

class Rule:
  def __init__(self, pattern, present):
    self.regexp = re.compile(pattern)
    self.present = present

  def search(self, line):
    return self.regexp.search(line)

def process(filename):
  ret = True

  lines = []
  with open(filename, 'r') as f:
    lines = f.read().strip('\n').split('\n')

  for rule in rules:
    matched = False
    for line in lines:
      match = rule.search(line)
      if match:
        if rule.present:
          matched = True
          break
        else:
          ret = False
          break

    if rule.present and (not matched):
      ret = False
      break

    if not ret:
      break

  """
    If ret == True, all the rules have passed: 
      - all of the include expressions have matched at least one line in the file 
      - none of the exclude expressions have matched any line in the file
  """

  if verbose:
    print("%s %s" % ('+' if ret else '-', filename))
  elif ret:
    print(filename)

rules = []
verbose = False

(opts,args) = ([], [])
try:
  (opts,args) = getopt.getopt(sys.argv[1:], "i:x:v", ["include=", "exclude=", "verbose"])
except Exception as e:
  syntax("Caught %s" % e)

noMoreIncludes = False

for (opt,arg) in opts:
  if opt in ["-i", "--include"]:
    if noMoreIncludes:
      syntax("An include expression must not follow an exclude expression")
    rules.append(Rule(arg, True))
  elif opt in ["-x", "--exclude"]:
    rules.append(Rule(arg, False))
    noMoreIncludes = True
  elif opt in ["-v", "--verbose"]:
    verbose = not verbose

if not rules:
  syntax("No rules specified")

if not args:
  syntax("No files specified")

for filename in args:
  process(filename)
