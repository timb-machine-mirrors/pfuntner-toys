#! /usr/bin/env python3

import sys
import json
import logging
import argparse

def is_balanced(s):
  ret = False
  if len(s) >= 2:
    c1 = s[0]
    c2 = s[-1]

    if c1 == '"' and c2 == '"':
      ret = True
    elif c1 == "'" and c2 == "'":
      ret = True
    elif c1 == '{' and c2 == '}':
      ret = True
    elif c1 == '[' and c2 == ']':
      ret = True
  return ret

parser = argparse.ArgumentParser(description='String to Python object')
parser.add_argument('-t', '--threshold', type=float, default=90, help='Ratio threshold (default: 90%%)')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

if sys.stdin.isatty():
  parser.error('stdin must be redirected')

for (linenum, line) in enumerate(sys.stdin.read().splitlines()):
  done = False
  log.info(f'Processing: {linenum} {line!r}')
  for stop in range(len(line), 0, -1):
    for start in range(0, stop):
      ratio = (stop-start+0.0) / len(line) * 100
      log.debug(f'{start}:{stop} ratio: {ratio} >= {args.threshold} ?')
      if ratio >= args.threshold:
        curr = line[start:stop].replace('false', 'False').replace('true', 'True').replace('none', 'None')
        if True or is_balanced(curr):
          log.debug(f'Trying [{start}:{stop}]: {curr!s}')
          try:
            # obj = json.loads(curr)
            obj = eval(curr)
            print(json.dumps(obj))
            done = True
            break
          except Exception as e:
            log.debug(f'Caught: {e!s}')
            pass
    if done:
      break
