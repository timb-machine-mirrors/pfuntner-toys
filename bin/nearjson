#! /usr/bin/env python3

import re
import sys
import json
import signal
import logging
import argparse

# set up some "aliases" so Python evaluation will work
null = None
true = True
false = False

def in_string():
  return stack and stack[-1] in '"\''

def matching(c):
  ret = False
  if stack:
    if c == '}' and stack[-1] == '{':
      ret = True
    elif c == ']' and stack[-1] == '[':
      ret = True
    elif c == '"' and stack[-1] == '"':
      ret = True
    elif c == "'" and stack[-1] == "'":
      ret = True
  return ret

def pop(c):
  global stack
  global buf

  buf += c
  if len(stack) > 1:
    del stack[-1]
  else:
    substr = buf.replace('%!(PACKER_COMMA)', ',')
    log.info(f'Potential Python expression: {substr!r}')
    try:
      # Python might work if:
      #   - None, True, False are present - null, true, false are "ok" but only because we have "aliases"
      #   - Single or double quotes are used for strings
      struct = eval(substr)
      json.dump(struct, sys.stdout, indent=2)
    except Exception as e:
      log.info(f'Caught {e!s} processing {substr!r} as JSON')
      try:
        # JSON might work better if:
        #   - null, true, false are present
        #   - None, True, False are not present
        #   - Single quotes are not used for strings
        #   - There are no unicode, byte strings
        log.info(f'Re-evaluating as JSON structure')
        struct = json.loads(substr)
        json.dump(struct, sys.stdout, indent=2)
      except Exception as e:
        log.info(f'Caught {e!s} processing {substr!r} as JSON')

    del stack[0]
    buf = ''

parser = argparse.ArgumentParser(description='Process nearly-JSON data')
parser.add_argument('-p', '--packer', action='store_true', help='Strip prefix to lines that packer adds')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if sys.stdin.isatty():
  parser.error('stdin must be redirected')

packer_prefix_regexp = re.compile('^\s*[^ :]+:\s*')

stack = []
buf = ''
for (linenum, line) in enumerate(sys.stdin.read().splitlines()):
  if stack:
    buf += '\n'

  log.info(f'{linenum}: {line!r}')
  if args.packer:
    line = packer_prefix_regexp.sub('', line)
  escaped = False
  pos = 0

  for (pos, c) in enumerate(line):
    log.debug(f'{linenum}:{pos} {c!r} {stack} {buf!r}')
    if in_string() and not escaped and c == '\\':
      log.debug(f'Escaping at {pos}: {c!r}')
      escaped = True
      buf += c
    else:
      if escaped:
        log.debug(f'Un-escaping at {pos}: {c!r}')
        escaped = False
        if stack:
          buf += c
      elif in_string():
        if matching(c):
          log.debug(f'Closing string at {pos}: {c!r}')
          pop(c)
        else:
          buf += c
      elif c in '"\'':
        log.debug(f'Opening string at {pos}: {c!r}')
        stack.append(c)
        buf += c
      elif c in '[{':
        log.debug(f'Opening element at {pos}: {c!r}')
        stack.append(c)
        buf += c
      elif matching(c):
        log.debug(f'Closing element at {pos}: {c!r}')
        pop(c)
      else:
        log.debug(f'Non-meta at {pos}: {c!r}')
        if stack:
          buf += c

