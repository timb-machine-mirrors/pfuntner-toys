#! /usr/bin/env python3

import re
import sys
import signal
import logging
import datetime
import argparse

import bruno_tools

def process(source):
  global table

  if isinstance(source, str):
    stream = open(source)
  else:
    stream = sys.stdin

  first = None
  last = None
  for line in stream.read().splitlines():
    match = None
    for pattern in patterns:
      match = pattern['regex'].search(line)
      if match:
        timestamp = datetime.datetime.strptime(''.join(match.groups()), pattern['date-format'])
        if not first:
          first = timestamp
        last = timestamp
        break

  if first:
    table.add(*(([source] if isinstance(source, str) else []) + [first.isoformat(), last.isoformat(), str(last-first)]))
  else:
    table.add(*(([source] if isinstance(source, str) else []) + ['']*3))

  if isinstance(source, str):
    stream.close()

parser = argparse.ArgumentParser(description='Determine delta between first and last timestamp in a file')
parser.add_argument('paths', metavar='path', nargs='*', help='Zero or more files')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

patterns = [
 { 'date-format': '%Y-%m-%dT%H:%M:%S.%f', 'regex': re.compile(r'(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3,6})Z') }, # 2025-01-31T11:37:03.468Z
]

table = bruno_tools.Table(*((['File'] if args.paths else []) + ['Start', 'Stop', 'Duration']))
if args.paths:
  for path in args.paths:
    process(path)
else:
  process(sys.stdin)
table.close()
