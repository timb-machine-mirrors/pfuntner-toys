#! /usr/bin/env python3

import re
import os
import sys
import time
import errno
import logging
import datetime
import argparse
import subprocess

import bruno_tools

"""
  I thought about introducing fancy Ansible options:

    --docker
    --extra-vars
    --inventory
    --become

  but since a playbook is required, the playbook (maybe combined with /etc/ansible/hosts and/or ~/.ssh/config) can be responsible for doing the above)
"""
parser = argparse.ArgumentParser(description='Run an Ansible playbook in step mode and run a command after each task')
parser.add_argument('command', nargs='+', help='Command to run after each task')
parser.add_argument('--playbook-path', required=True, help='Path to Ansible playbook')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.INFO - (args.verbose or 0)*10)

"""
$ ansible-playbook --step -e hosts=localhost /home/ubuntu/ansible/HelloWorld.yml
[WARNING]: No inventory was parsed, only implicit localhost is available
[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all'
[WARNING]: Found variable using reserved name: hosts

PLAY [Small playbook] ***********************************************************************************************************************************************************************************************************************
Perform task: TASK: Gathering Facts (N)o/(y)es/(c)ontinue: yes

Perform task: TASK: Gathering Facts (N)o/(y)es/(c)ontinue: **********************************************************************************************************************************************************************************

TASK [Gathering Facts] **********************************************************************************************************************************************************************************************************************
Friday 22 September 2023  09:38:17 -0400 (0:00:06.014)       0:00:06.014 ******
ok: [localhost]
Perform task: TASK: debug (N)o/(y)es/(c)ontinue: yes

Perform task: TASK: debug (N)o/(y)es/(c)ontinue: ********************************************************************************************************************************************************************************************

TASK [debug] ********************************************************************************************************************************************************************************************************************************
Friday 22 September 2023  09:38:23 -0400 (0:00:06.213)       0:00:12.227 ******
ok: [localhost] => {
    "msg": "Hello, Ansible world."
}

PLAY RECAP **********************************************************************************************************************************************************************************************************************************
localhost                  : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0

Friday 22 September 2023  09:38:23 -0400 (0:00:00.065)       0:00:12.293 ******
===============================================================================
gather_facts ------------------------------------------------------------ 6.21s
debug ------------------------------------------------------------------- 0.07s
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
total ------------------------------------------------------------------- 6.28s
$
"""

# This regular expression is the `step` prompt we're waiting for.  When we see it, we want to:
#   1) run the desired command
#   2) respond to the prompt affirmatively and have it continue the playbook - presumably stopping at the next task
regexp = re.compile(r'Perform task: (TASK|HANDLER): (.+) \(N\)o/\(y\)es/\(c\)ontinue: $')

# by turning off blocking, we can read one byte at a time without waiting for newlines
(pipe_read, pipe_write) = os.pipe()
os.set_blocking(pipe_read, False)

# `output` contains all stdout/stderr concatenated together, always appended to the end.  Once a prompt
# is observed, we'll empty out `output` so we don't re-recognize the same prompt again if there's a long
# delay. Wiping it out will also help make the string more manageable so it doesn't explode to astronomical
# size because it's not maintaining all the output over the lifetime of the playbook.
output = ''

# `last_char` is the time the last character was read
last_char = datetime.datetime.now()

log.info(f'Running {args.playbook_path!r} playbook')

ansible_command = ['ansible-playbook', '--step', args.playbook_path]
ansible_process = subprocess.Popen(ansible_command, stdout=pipe_write, stderr=pipe_write, stdin=subprocess.PIPE)
while ansible_process.poll() is None:
  c = None
  try:
    # try to read the next character
    c = os.read(pipe_read, 1).decode()
  except OSError as e:
    if e.errno != errno.EAGAIN:
      # OSError exceptions can pass along an errno but only EAGAIN (no data ready) is expected - anything else is
      # an error
      log.error(f'os.read() failure: {e!s}')
      exit(1)
  except Exception as e:
    # No other exceptions are expected
    log.error(f'os.read() failure: {e!s}')
    exit(1)

  now = datetime.datetime.now()
  if c:
    # we've read a new character
    print(c, end='')
    output += c
    last_char = now
  else:
    # no character - check for eyecatcher if a character hasn't arrived recently
    if now - last_char > datetime.timedelta(seconds=1):
      match = regexp.search(output)
      if match:
        # we've found an eyecatcher we've been waiting for!
        (task_type, task) = match.groups()
        print()
        log.info(f'Running {args.command!r} before {task_type} {task!r}')
        bruno_tools.run(args.command, capture=False)
        print()
        ansible_process.stdin.write('yes\n'.encode())
        ansible_process.stdin.flush()
        output = ''
    time.sleep(.2)

log.info(f'Finished running {args.playbook_path!r} playbook')
