#! /usr/bin/env python3

"""
   Takes a list of dictionaries in JSON form and converts it to table.

   Sample JSON form:

     {
       [
         "header1": "data1-1",
         "header2": "data1-2",
         .
         .
         .
       ],
       ],
       [
         "header1": "data1-2",
         "header2": "data1-2",
         .
         .
         .
       ],
       .
       .
       .
     }

   The script would turn this into:

    +---------+---------+---------+
    | header1 | header2 |   ...   |
    +---------+---------+---------+
    | data1-1 | data1-2 |   ...   |
    | data2-1 | data2-2 |   ...   |
    |    .    |    .    |    .    |
    |    .    |    .    |    .    |
    |    .    |    .    |    .    |
    +---------+---------+---------+

   Notes:
     - Regarding the table:
       - The first row dictates the columns of the table:
         - If a subsequent row doesn't have a key/column that that's in the first row, "None" appears in the column for that row
         - If a subsequent row has a key/column that isn't in the first row, the column does not appear in the table at all
     - The script is designed to read the data from stdin
     - The --sample option can be used to parse a well-formed table text string rather than reading from stdin
"""

import re
import sys
import json
import getopt
import string
import io

def syntax(msg=None):
  if msg:
    sys.stderr.write('{msg}\n'.format(**locals()))
  sys.stderr.write('Syntax: {pgm} [-s|--sample]\n'.format(pgm=sys.argv[0]))
  exit(1)

def see(expr):
  value = eval(expr)
  sys.stderr.write('{expr}\t{value}\n'.format(**locals()))

sample_data = """
     [
       {
         "header1": "data1-1",
         "header2": "data1-2"
       },
       {
         "header1": "data1-2",
         "header2": "data1-2"
       }
     ]
"""

(opts, args) = ([], [])
try:
  (opts, args) = getopt.getopt(sys.argv[1:], 's', ['sample'])
except Exception as e:
  syntax('Caught: {e!s}'.format(**locals()))

sample = False
for (opt, arg) in opts:
  if opt in ['-s', '--sample']:
    sample = not sample
  else:
    syntax('Unrecognized option: {opt!r}'.format(**locals()))

if sample:
  stream = io.StringIO(sample_data)
else:
  assert not sys.stdin.isatty(), 'stdin must be redirected'
  stream = sys.stdin

data = json.load(stream)
assert data and isinstance(data, list), 'No data or the data is not a list'
assert isinstance(data[0], dict), 'First element of list is not a dictionary'

headers = sorted(data[0].keys())
headers_set = set(headers)

# find width of each column
widths = []
for header in headers:
  widths.append(max(len(header), *[len(str(datum.get(header))) for datum in data]))

border = '+-{s}-+'.format(s='-+-'.join([('-' * widths[pos]) for (pos, header) in enumerate(headers)]))
print(border)
print('| {s} |'.format(s=' | '.join(['{0:{width}}'.format(header, width=widths[pos]) for (pos, header) in enumerate(headers)])))
print(border)
for datum in data:
  print('| {s} |'.format(s=' | '.join(['{0:{width}}'.format(str(datum.get(header)), width=widths[pos]) for (pos, header) in enumerate(headers)])))
print(border)
