#! /usr/bin/env python

import os
import sys
import json
import getopt
import os.path
import subprocess

def syntax(s=None):
  if s:
    sys.stderr.write("%s\n" % s)
  if isSSH:
    sys.stderr.write("Syntax: %s [-q|--quiet] [-v|--verbose] [--only name,name,...] [--not name,name,...] cmd [arg ...]\n" % sys.argv[0])
  elif isSCP:
    sys.stderr.write("Syntax: %s [-q|--quiet] [-v|--verbose] [--only name,name,...] [--not name,name,...] [-r] src1 [src2 ...] dest\n" % sys.argv[0])
  else:
    sys.stderr.write("WTF!  %s is not an ssh or scp command?  What are you doing, dude???\n")
  exit(1)

isSSH = False
isSCP = False

if "ssh" in sys.argv[0]:
  isSSH = True
elif "scp" in sys.argv[0]:
  isSCP = True
else:
  syntax()

verbose = False
quiet = False
recursive = False

(opts,args) = ([], [])
shortOptions = "vqo:n:"
if isSCP:
  shortOptions += "r"
longOptions = ["verbose", "quiet", "only=", "not="]

try:
  (opts,args) = getopt.getopt(sys.argv[1:], shortOptions, longOptions)
except Exception as e:
  syntax(str(e))

onlyList = []
notList = []

for (opt, arg) in opts:
  if opt in ["-q", "--quiet"]:
    quiet = not quiet
  elif opt in ["-v", "--verbose"]:
    verbose = not verbose
  elif opt in ["-o", "--only"]:
    onlyList = arg.split(",")
  elif opt in ["-n", "--not"]:
    notList = arg.split(",")
  elif opt == "-r":
    recursive = not recursive
  else:
    sys.stderr.write("Unexpected argument: `%s`\n" % opt)
    syntax()

if onlyList and notList:
  syntax("--only and --not are mutually exclusive")

systems = None

pgm = sys.argv[0]
if pgm[-3:] == ".py":
  pgm = pgm[:-3]

jsonFile = pgm + ".json"
if verbose:
  print "opening %s" % jsonFile

with open(jsonFile, 'r') as f:
  systems = json.load(f)

if verbose:
  print "Hosts: %s" % systems

if len(args) < (1 if isSSH else 2):
  syntax("Only %d arguments" % len(args))

for system in systems:

  if ((not onlyList) and (not notList)) or (onlyList and (system["name"] in onlyList)) or (notList and (system["name"] not in notList)):
    if isSSH:
      if not quiet:
        print "%s" % (system["name"])
      cmd = args
  
    else:
      # for src in args[:-1]:
      #   if not quiet:
      #     print "%s @ %s" % (src, system["name"])
      #
      #     cmd = [src, "%s@%s:%s" % (system["user"], system["host"], args[-1])]

      push = None
      cmd = []
      name = system["name"]
      host = system["host"]
      user = system["user"]
      remote = "{user}@{host}".format(**locals())

      for filename in args[:-1]:
        src = filename.format(remote=remote)
        pushing = not src.startswith(remote + ":")
        if (push != None) and (pushing != push):
          sys.stderr.write("Cannot change scp direction with %s" % repr(filename))
          exit(1)
        push = pushing
        cmd.append(src)

      dst = args[-1].format(remote=remote, host=host, user=user)
      if (dst == args[-1]) and pushing:
        dst = "{remote}:{dst}".format(**locals())
      cmd.append(dst)

      print "%s: %s" % (name, ' '.join(cmd))
  
    if isSSH:
      cmd = ["%s@%s" % (system["user"], system["host"])] + cmd
  
    if "key" in system:
      cmd = ["-i", system["key"]] + cmd
  
    cmd = ["-o", "LogLevel=quiet"] + cmd
  
    if recursive:
      cmd.insert(0, "-r") # -r should only be able to be specified if we're "megascp"

    cmd = ["ssh" if isSSH else "scp"] + cmd
  
    if verbose:
      print cmd
  
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (stdout, stderr) = p.communicate()
    rc = p.wait()
    if stderr or (rc != 0):
      sys.stdout.write(stdout)
      sys.stderr.write(stderr)
    elif verbose:
      sys.stderr.write("rc=%d, `%s`, `%s`\n" % (rc, repr(stdout.strip('\n')), repr(stderr.strip('\n'))))
    else:
      sys.stdout.write(stdout)
