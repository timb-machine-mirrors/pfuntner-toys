#! /usr/bin/env python3

import os
import sys
import pwd
import grp
import stat
import logging
import datetime
import argparse

from table import Table


def get_perms(stats):
  ret = ' ' if stats & stat.S_IFREG else ('d' if stats & stat.S_IFDIR else ('c' if stats & stat.S_IFCHR else '?'))
  mode_bits = stat.S_IMODE(stats)
  ret += 'r' if mode_bits & stat.S_IRUSR else '-'
  ret += 'w' if mode_bits & stat.S_IWUSR else '-'
  ret += 'x' if mode_bits & stat.S_IXUSR else '-'
  ret += 'r' if mode_bits & stat.S_IRGRP else '-'
  ret += 'w' if mode_bits & stat.S_IWGRP else '-'
  ret += 'x' if mode_bits & stat.S_IXGRP else '-'
  ret += 'r' if mode_bits & stat.S_IROTH else '-'
  ret += 'w' if mode_bits & stat.S_IWOTH else '-'
  ret += 'x' if mode_bits & stat.S_IXOTH else '-'
  ret += 't' if mode_bits & stat.S_ISVTX else ' '
  return ret


def get_user(uid):
  try:
    user = pwd.getpwuid(uid)
  except:
    return str(uid)
  else:
    return user.pw_name


def get_group(gid):
  try:
    group = grp.getgrgid(gid)
  except:
    return str(gid)
  else:
    return group.gr_name

parser = argparse.ArgumentParser(description='List path hierarchy of files')
parser.add_argument('files', metavar='file', nargs='+', help='One or more files')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

"""
drwxr-xr-x  24 root    root     4096 Jun 30 06:11 /
drwxr-xr-x   3 root    root     4096 Aug  4  2017 /media
drwxr-x---+  3 root    root     4096 Jul  8 17:33 /media/mrbruno
drwxrwxrwx  16 root    root     4096 Jun 29 08:40 /media/mrbruno/ExtraDrive1
drwxr-xr-x   9 mrbruno mrbruno  4096 Jul  5 08:28 /media/mrbruno/ExtraDrive1/toys
drwxr-xr-x   2 mrbruno mrbruno 12288 Jul 11 08:53 /media/mrbruno/ExtraDrive1/toys/bin
"""

table = Table(numeric_justify=True)

now = datetime.datetime.now()
six_months_ago = now - datetime.timedelta(days=6*30)

for (pos, pathname) in enumerate([os.path.realpath(arg) for arg in args.files]):
  log.debug('pathname: {pathname!r}'.format(**locals()))
  if pos > 0:
    table.add('')
  components = pathname.split('/')
  for comp_pos in range(len(components))[-1::-1]:
    path = '/' + os.path.join(*components[:comp_pos + 1])
    log.debug('comp_pos: {comp_pos} {path!r}'.format(**locals()))
    try:
      stats = os.stat(path)
    except Exception as e:
      log.warning('Can\'t find {path!r}: {e!s}'.format(**locals()))
    else:
      perms = get_perms(stats.st_mode)
      timestamp = datetime.datetime.fromtimestamp(os.path.getmtime(path))
      table.add(
        perms,
        str(stats.st_nlink),
        get_user(stats.st_uid),
        get_group(stats.st_gid),
        str(stats.st_size),
        timestamp.strftime('%b'),
        str(timestamp.day),
        timestamp.strftime('%H:%M') if six_months_ago < timestamp < now else str(timestamp.year),
        path
      )

print(str(table))
