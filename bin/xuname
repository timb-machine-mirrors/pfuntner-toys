#! /usr/bin/env python3

import re
import sys
import json
import signal
import logging
import argparse
import subprocess

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))

  p = None
  try:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  except Exception as e:
    (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

  if p:
    if stdin:
      p.stdin.write(stdin.encode())
    if capture:
      (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    else:
      (stdout, stderr) = ('', '')
    rc = p.wait()

  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

def process_option(full_string):
  tokens = full_string.split()
  return regexp.sub('', tokens[1])

parser = argparse.ArgumentParser(description='Extended uname')
parser.add_argument('hosts', metavar='host', nargs='*', default=['localhost'], help="Zero or more hosts.  Default: ['localhost']")
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

regexp = re.compile(r'^-+')

options = [
  process_option('-a, --all                print all information, in the following order, except omit -p and -i if unknown:'),
  process_option('-s, --kernel-name        print the kernel name'),
  process_option('-n, --nodename           print the network node hostname'),
  process_option('-r, --kernel-release     print the kernel release'),
  process_option('-v, --kernel-version     print the kernel version'),
  process_option('-m, --machine            print the machine hardware name'),
  process_option('-p, --processor          print the processor type (non-portable)'),
  process_option('-i, --hardware-platform  print the hardware platform (non-portable)'),
  process_option('-o, --operating-system   print the operating system'),
]

resp = dict()

for host in args.hosts:
  resp[host] = dict()
  cmd = list()
  if host != 'localhost':
    cmd += ['/usr/bin/ssh', '-q', host]
  for option in options:
    (rc, stdout, stderr) = run(cmd + ['uname', f'--{option}'])
    log.info(f'host={host} option={option}: {rc}, {stdout!r}, {stderr!r}')
    if rc == 0 and stdout:
      resp[host][option] = stdout.strip()
json.dump(resp, sys.stdout, indent=2)
