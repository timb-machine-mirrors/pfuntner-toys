#! /usr/bin/env python2

import re
import sys
import datetime
import getopt

def secondsSinceEpoch(s):
  return datetime.datetime.fromtimestamp(float(s))

class Pattern:
  def __init__(self, regexp, pat):
    self.regexp = re.compile(regexp)
    self.pat = pat

  def parse(self, line):   
    ret = (None, None)
    match = self.regexp.search(line)
    if match:
      if type(self.pat) == str:
        try:
          ret = (match.group(1), datetime.datetime.strptime(match.group(1), self.pat))
        except Exception as e:
          print "Caught %s parsing %s with %s" % (repr(e), repr(match.group(1)), repr(self.pat))
      else:
        ret = (match.group(1), self.pat(match.group(1)))

    return ret

pats = [
         Pattern("([A-Z][a-z]{2} [A-Z][a-z]{2} [ 0-9]\d \d{2}:\d{2}:\d{2} \S+ \d{4})", "%a %b %d %H:%M:%S %Z %Y"), # Unix `date` style: "Thu Mar  2 07:45:42 EST 2017"
         Pattern("(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{6})", "%Y-%m-%d %H:%M:%S.%f"), # Python datetime.datetime default format: "2017-03-06 16:04:42.318470"
         Pattern("(\d+\.\d+)", secondsSinceEpoch), # Seconds since epoch: "1489689993.956153"
       ]

def syntax():
  sys.stderr.write("Syntax: %s [-s|--seconds] [-u|--unix] [-o|--sort]\n" % sys.argv[0])
  exit(1)

(opts, args) = getopt.getopt(sys.argv[1:], "suo", ["seconds", "unix", "sort"])

def defaultEmitter(originalString, timestamp):
  print "%s\t%s\t%s\t%f" % (originalString, timestamp, datetime.datetime.strftime(timestamp, "%a %b %d %H:%M:%S %Y"), (timestamp - epoch).total_seconds())

def unixEmitter(originalString, timestamp):
  print datetime.datetime.strftime(timestamp, "%a %b %d %H:%M:%S %Y")

def sortEmitter(originalString, timestamp):
  print "%s" % timestamp

def secondsEmitter(originalString, timestamp):
  print "%f" % (timestamp - epoch).total_seconds()

emitter = defaultEmitter

for (opt,arg) in opts:
  if opt in ["-s", "--seconds"]:
    emitter = secondsEmitter
  elif opt in ["-u", "--unix"]:
    emitter = unixEmitter
  elif opt in ["-o", "--sort"]:
    emitter = sortEmitter
  else:
    sys.stderr.write("%s is not expected\n" % repr(opt))
    syntax()

epoch = datetime.datetime.utcfromtimestamp(0)

if args:
  for arg in args:
    timestamp = None
    for pat in pats:
      (s, timestamp) = pat.parse(arg)
      if timestamp:
        break
    if timestamp:
      emitter(s, timestamp)
    else:
      sys.stderr.write("%s cannot be converted to a timestamp\n" % repr(arg))
else:
  assert not sys.stdin.isatty(), "Either specify timestamps as arguments or redirect to stdin"
  for line in sys.stdin:
    timestamp = None
    for pat in pats:
      (s, timestamp) = pat.parse(line)
      if timestamp:
        break
    if timestamp:
      emitter(s, timestamp)
