#! /usr/bin/env python2

"""
  Download one or more Cloudant documents.

    - SPACE must be specified to be used as https://SPACE.cloudant.com
    - Credentials can be specified:
      -- user & password on the command line: not very secure, error-prone, strains memory or makes use of clipboard
      -- user on the command line, script prompts securely for the password: more secure but still strains memory
      -- user and password both through secure store
    - database and document combinations are specified in one or more arguments as "db/doc"
    - documents are stored as "db_doc" - this might be result in ambiguous combinations
"""

import os
import re
import sys
import json
import getopt
import getpass
import datetime

import pdb

from SecureKeyValues import SecureKeyValues
from cloudant.client import Cloudant

def syntax(msg = None):
  """
    Print a message about the syntax for invoking the command along with an optional
    message.
  """

  if msg:
    sys.stderr.write(msg)
    if msg[-1] != '\n':
      sys.stderr.write('\n')
  sys.stderr.write("Syntax: %s --space SPACE [ --store STORE ] [--user USER [--password PASSWORD ]] [--debug] [--verbose] DB/DOC ...\n" % sys.argv[0])
  exit(1)

def debug(msg):
  """
    Print a debugging messages if the `verbose` flag is enabled.  This turned on
    via the `--verbose` command line option.
  """

  if verbose:
    sys.stderr.write("%s\n" % msg)

"""
  Cloudant credentials
"""
cloudantUser = None
cloudantPass = None

"""
  `verbose` is used by the debug() to know if it should
  print the message or not.
"""
verbose = False

storeName = None
cloudantSpace = None

(opts,args) = ([], [])
try:
  """
    No -s option because both --space and --store might make sense and I didn't want
    to have to play games with case or alternate characters.
  """
  (opts,args) = getopt.getopt(sys.argv[1:], "vu:p:f:d", ["verbose", "space=", "store=", "user=", "password=", "debug"])
except Exception as e:
  syntax("Caught: %s" % e)

for (opt,arg) in opts:
  if opt in ["-v", "--verbose"]:
    verbose = not verbose
  elif opt in ["-d", "--debug"]:
    pdb.set_trace()
  elif opt in ["--space"]:
    cloudantSpace = arg
  elif opt in ["--store"]:
    storeName = arg
  elif opt in ["-u", "--user"]:
    cloudantUser = arg
  elif opt in ["-p", "--password"]:
    cloudantPass = arg
  else:
    syntax("Don't know how to handle %s" % repr(opt))

if not cloudantSpace:
  syntax("No Cloudant space specified")

if not args:
  syntax("At least one db & document combination must be specified")

"""
  After we've finished processing all command line options,
  let's see if we have enough for the credentials or need to
  prompt for a password look to a secure store.
"""
if cloudantPass and (not cloudantUser):
  syntax("Password not accepted without user")
elif cloudantUser and (not cloudantPass):
  cloudantPass = getpass.getpass("%s's password: " % cloudantUser)
elif (not cloudantUser) and storeName:
  store = SecureKeyValues(storeName, keyPromptForMissingFile=False)
  cloudantUser = store.get("user")
  cloudantPass = store.get("password")
  if cloudantUser and cloudantPass:
    debug("Acquired Cloudant credentials for %s from `%s`" % (cloudantUser, store.filename))

if (not cloudantUser) or (not cloudantPass):
  syntax("No credentials specified")

client = None
try:
  client = Cloudant(cloudantUser, cloudantPass, url="https://%s.cloudant.com" % cloudantSpace, connect=True)
except Exception as e:
  sys.stderr.write("Caught %s connecting to Cloudant\n" % repr(e))
  exit(1)

lastDb = None
lastDbName = None

regexp = re.compile("^([^/ ]+)/([^/ ]+)$")
for arg in args:
  match = regexp.search(arg)
  if match:
    dbName = match.group(1)
    docName = match.group(2)
    if dbName != lastDbName:
      db = client[dbName]
    with open(arg.replace("/", "_"), "w") as f:
      json.dump(db[docName], f, indent=2, sort_keys=True)
    print arg

    lastDbName = dbName
    lastDb = db
  else:
    sys.stderr.write("%s is not a db/doc pair\n" % repr(arg))
