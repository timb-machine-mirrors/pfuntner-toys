#! /usr/bin/env python3

import os
import re
import sys
import logging
import argparse
import subprocess

def run(cmd):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='See if github has the most recent commit')
parser.add_argument('repos', metavar='repo', nargs='*', default=['.'], help='One or more repo directories (default: [\'.\']')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

commit_regexp = re.compile('^commit ([0-9a-f]{40})$', flags=re.MULTILINE)
branch_regexp = re.compile('^\*\s(\S+)$', flags=re.MULTILINE)
# url_regexp = re.compile('^origin\s+(\S+)\s+\(fetch\)$', flags=re.MULTILINE)

cwd = os.getcwd()
log.info(f'cwd: {cwd!r}')

for repo in args.repos:
  if os.path.exists(repo):
    if os.path.isdir(repo):
      if repo != '.':
        os.chdir(repo)

      (rc, stdout, stderr) = run('git log')
      match = commit_regexp.search(stdout)
      if match:
        commit = match.group(1)
        log.info(f'last commit: {commit}')

        (rc, stdout, stderr) = run('git branch')
        match = branch_regexp.search(stdout)
        if match:
          branch = match.group(1)
          log.info(f'current branch: {branch}')

          (rc, stdout, stderr) = run(f'git log origin/{branch}')
          if stdout:
            remote_commits = commit_regexp.findall(stdout)
            log.debug(f'remote commits: {remote_commits}')
            if commit in remote_commits:
              print(f'{commit} found in remote branch {branch}')
            else:
              print(f'{commit} not found in remote branch {branch}')
          else:
            print(f'remote branch {branch} does not exist for {repo!r}')
        else:
          log.warning('No current branch found in `git branch` output for {repo!r}')
      else:
        log.warning('Could not find latest commit for {repo!r}')

      if repo != '.':
        os.chdir(cwd)
    else:
      log.warning(f'{repo!r} is not a directory')
  else:
    log.warning(f'{repo!r} does not exist')
