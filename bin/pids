#! /usr/bin/env python3

import re
import time
import json
import signal
import logging
import argparse
import datetime
import subprocess

def run(cmd):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  # alternately, if trapping is conditional:
  # if trap:
  #   stdout = stdout.decode('utf-8')
  #   stderr = stderr.decode('utf-8')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

def sigint_catcher(signum, stack):
  global stop
  log.info('Stopping on SIGINT')
  stop = True

parser = argparse.ArgumentParser(description='Capture processes over a period of time')
parser.add_argument('filename', help='Output file')
parser.add_argument('-s', '--sleep', type=float, default=15, help='Time in seconds to sleep between capturing processes (default: 15)')
parser.add_argument('-i', '--interval', help='Specify interval (ex: `1h30m`)')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

log.debug(f'args: {args}')
if args.interval is not None:
  regexp = re.compile(r'^(?:(\d*\.?\d*)d)?(?:(\d*\.?\d*)h)?(?:(\d*\.?\d*)m)?(?:(\d*\.?\d*)s)?$')
  match = regexp.search(args.interval)
  if match:
    groups = match.groups()
    log.debug(f'interval groups: {groups}')
    if any(groups):
      delta_args = {}
      if groups[0] is not None:
        delta_args['days'] = float(groups[0])
      if groups[1] is not None:
        delta_args['hours'] = float(groups[1])
      if groups[2] is not None:
        delta_args['minutes'] = float(groups[2])
      if groups[3] is not None:
        delta_args['seconds'] = float(groups[3])
      interval = datetime.timedelta(**delta_args)
      log.debug(f'interval: {interval!s}')
    else:
      parser.error(f'{args.interval!r} is not a valid interval')
  else:
    parser.error(f'{args.interval!r} does not match pattern {regexp.pattern!r}')
else:
  interval = None

output_file = open(args.filename, 'w')
output_obj = []

stop = False
signal.signal(signal.SIGINT, sigint_catcher)

start = datetime.datetime.now()
while True:
  now = datetime.datetime.now()
  (rc, stdout, stderr) = run(['pps'])
  output_obj.append({
    'time': now.isoformat(),
    'processes': json.loads(stdout),
  })

  print('{now}: {count} processes'.format(now=now.isoformat(), count=len(output_obj[-1]['processes'])))
  log.debug('sleeping')
  time.sleep(args.sleep)
  log.debug('wakey wakey')

  if stop or (interval and (now-start > interval)):
    log.info('interval has elapsed')
    break

json.dump(output_obj, output_file)
