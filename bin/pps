#! /usr/bin/env python3

import os
import re
import sys
import json
import errno
import logging
import argparse
import traceback

class Util(object):
  @staticmethod
  def div(amt, divisor):
    quotient = int(amt/divisor)
    amt -= quotient*divisor
    return (quotient, amt)

  @staticmethod
  def time(secs):
    (days, secs)  = Util.div(secs, 24*60*60)
    (hours, secs) = Util.div(secs, 60*60)
    (mins, secs)  = Util.div(secs, 60)

    return "%s%02d:%02d:%06.3f" % ("%dd" % days if days else "", hours, mins, secs)

class Process(object):
  stat_names = [
    'pid',                      # The process id
    'ex_name',                  # The filename of the executable
    'state',                    # R is running, S is sleeping, D is sleeping in an uninterruptible wait, Z is zombie, T is traced or stopped
    'euid',                     # effective user id
    'egid',                     # effective group id
    'ppid',                     # The pid of the parent
    'pgrp',                     # The pgrp of the process
    'session',                  # The session id of the process
    'tty',                      # The tty the process uses
    'tpgid',                    # (too long)
    'flags',                    # The flags of the process
    'minflt',                   # The number of minor faults
    'cminflt',                  # The number of minor faults with childs
    'majflt',                   # The number of major faults
    'cmajflt',                  # The number of major faults with childs
    'utime',                    # user mode jiffies
    'stime',                    # kernel mode jiffies
    'cutime',                   # user mode jiffies with childs
    'cstime',                   # kernel mode jiffies with childs
    'counter',                  # process's next timeslice
    'priority',                 # the standard nice value, plus fifteen
    'timeout',                  # The time in jiffies of the next timeout
    'itrealvalue',              # The time before the next SIGALRM is sent to the process
    'starttime',                # Time the process started after system boot
    'vsize',                    # Virtual memory size
    'rss',                      # Resident Set Size
    'rlim',                     # Current limit in bytes on the rss
    'startcode',                # The address above which program text can run
    'endcode',                  # The address below which program text can run
    'startstack',               # The address of the start of the stack
    'kstkesp',                  # The current value of ESP
    'kstkeip',                  # The current value of EIP
    'signal',                   # The bitmap of pending signals
  ]

  allDigits = re.compile("^\d+$")
  upTime = None

  @classmethod
  def massage_name(cls, name):
    c = 0
    previous_fixed = False
    while c < len(name):
      if name[c].isupper():
        if previous_fixed or (c == 0) or (name[c-1] == '_'):
          name = name[:c] + name[c].lower() + name[c+1:]
          c += 1
          previous_fixed = True
        else:
          name = name[:c] + '_' + name[c].lower() + name[c+1:]
          c += 2
          previous_fixed = True
      else:
        c += 1
        previous_fixed = False
    return name

  def __init__(self, pid, status, args, stats):
    self.pid = pid
    self.args = args.split('\0')

    for line in status:
      match = status_regexp.search(line)
      name = self.massage_name(match.group(1))
      value = match.group(2)
      if Process.allDigits.search(value):
        value = int(value)
      elif value.endswith(' kB'):
        value = int(value[:-3]) * 1024
      elif value.endswith(' mb'):
        value = int(value[:-3]) * 1024
      elif '\t' in value:
        value = value.split('\t')
      log.debug(f'status {pid} {name} {value!r}')
      setattr(self, name, value)

    for (pos, value) in enumerate(stats):
      log.debug(f'stat {pos}: {value!r}')
      if pos >= len(self.stat_names):
        break
      name = self.stat_names[pos]
      if not hasattr(self, name):
        if Process.allDigits.search(value):
          value = int(value)
        log.debug(f'stats {pid} {name} {value!r}')
        setattr(self, name, value)

  """
  def __init__(self, pid, ppid, args, jiffiesSinceBoot):
    if not Process.upTime:
      with open("/proc/uptime", "r") as stream:
        Process.upTime = float(stream.read().split()[0])

    self.pid = int(pid)
    self.ppid = int(ppid)
    self.args = args.split('\0')
    self.elapsedSecs = Process.upTime - (float(jiffiesSinceBoot) / os.sysconf(os.sysconf_names["SC_CLK_TCK"]))
  """

  """
  def __str__(self):
    return "%d %s (%s)" % (self.pid, str(self.args), Util.time(self.elapsedSecs))
  """

  @staticmethod
  def getPids():
    pids = []
    for filename in os.listdir("/proc"):
      try:
        if Process.allDigits.search(filename):
          pid = int(filename)

          """
            [centos@pfuntner1 packer-examples pfuntner-test]$ cat -A /proc/$$/status | head
            Name:^Ibash$
            Umask:^I0022$
            State:^IS (sleeping)$
            Tgid:^I28476$
            Ngid:^I0$
            Pid:^I28476$
            PPid:^I28421$
            TracerPid:^I0$
            Uid:^I1000^I1000^I1000^I1000$
            Gid:^I1000^I1000^I1000^I1000$
          """
          with open("/proc/%d/status" % pid, "r") as stream:
            status = stream.read().splitlines()
          log.debug(f'/proc/{pid}/status: {status}')

          with open("/proc/%d/cmdline" % pid, "r") as stream:
            args = stream.read().strip('\0')
          log.debug(f'/proc/{pid}/cmdline: {args}')

          """
            [centos@pfuntner1 packer-examples pfuntner-test]$ cat -A /proc/$$/stat
            28476 (bash) S 28421 28476 28476 34818 20421 4202496 51549 15751999 0 145 37 46 23163 7003 20 0 1 0 43072895 124010496 1977 18446744073709551615 4194304 5099244 140735471928016 140735471926664 139706347895740 0 65536 3686404 1266761467 18446744071627728742 0 0 17 0 0 0 0 0 0 7200240 7236240 28352512 140735471935111 140735471935117 140735471935117 140735471935470 0$
          """
          stats = []
          with open("/proc/%d/stat" % pid, "r") as stream:
            stats = stream.read().split()
          log.debug(f'/proc/{pid}/stats: {stats}')

          pids.append(Process(pid, status, args, stats).__dict__)
      except IOError as e:
        if e.errno in (errno.EACCES, errno.ENOENT):
          log.debug(f'Caught `{e!s}` while processing /proc/{pid}')
        else:
          log.debug('{!r} while processing /proc/{pid}'.format(traceback.format_exc(), pid=pid))
      except Exception as e:
        log.debug('{!r} while processing /proc/{pid}'.format(traceback.format_exc(), pid=pid))

    return pids

parser = argparse.ArgumentParser(description='Get procesesses via Python')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

status_regexp = re.compile('^([^:]+):\s+(.*)$')

pids = Process.getPids()

log.info('{} processes'.format(len(pids)))

json.dump(pids, sys.stdout, indent=2, sort_keys=True)
