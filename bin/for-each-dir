#! /usr/bin/env python3

import os
import sys
import json
import signal
import logging
import argparse
import subprocess

def banner(s):
  run(['banner', s], capture=False)

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))

  p = None
  try:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  except Exception as e:
    (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

  if p:
    if stdin:
      p.stdin.write(stdin.encode())
    if capture:
      (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    else:
      (stdout, stderr) = ('', '')
    rc = p.wait()

  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Execute a command in each directory')
parser.add_argument('dirs', metavar='dir', nargs='+', help='One or more directories')
parser.add_argument('-C', '--command', required=True, help='Command to execute in each directory')
parser.add_argument('-j', '--json', action='store_true', help='Generate JSON output')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

orig_dir = os.getcwd()
log.info(f'orig_dir: {orig_dir!r}')

if args.json:
  output = dict()

for dir in args.dirs:
  if os.path.exists(dir):
    if os.path.isdir(dir):
      if not args.json:
        banner(dir)
      os.chdir(dir)
      (rc, stdout, stderr) = run(args.command, shell=True, capture=bool(args.json))
      os.chdir(orig_dir)
      if args.json:
        output[dir] = {
          'rc': rc,
          'stdout': stdout.splitlines(),
          'stderr': stderr.splitlines(),
        }
      else:
        print()
    else:
      log.error(f'{dir!r} is not a directory')
  else:
    log.error(f'{dir!r} does not exist')

if args.json:
  json.dump(output, sys.stdout, indent=2, sort_keys=True)
  print()
