#! /usr/bin/env python3

import re
import logging
import argparse


def secs(s):
  match = inner_regexp.search(s)
  if match:
    log.debug('parsed {s!r} into {groups}'.format(groups=match.groups(), **locals()))
    return ((int(match.group(1) or 0)*24 + int(match.group(2) or 0))*60 + int(match.group(3) or 0))*60 + int(match.group(4) or 0)
  else:
    parser.error('{s!r} cannot be parsed by {inner_regexp.pattern!r}'.format(inner_regexp=inner_regexp, **locals()))
 
def divmod(dividend, divisor):
  return (dividend // divisor, dividend % divisor)

parser = argparse.ArgumentParser(description='timefun')
parser.add_argument('-p', '--pcent', '--percentage', dest='percentage', action='store_true', help='Display division as a percentage')
parser.add_argument('-v', '--verbose', action='store_true', help='Enable debugging')
parser.add_argument('expression', help='DHMS [+-/] DHMS')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

outer_regexp = re.compile('^([^+-/ ]+)\s*([+-/])\s*([^+-/ ]+)$')
# inner_regexp = re.compile('^(?:(\d+):)?(?:(\d+):)?(?:(\d+):)?(\d+)?$')
inner_regexp = re.compile('^(?:(?:(?:(\d+):)?(\d+):)?(\d+):)?(\d+)$')
match = outer_regexp.search(args.expression)
if match:
  log.debug('{args.expression!r} parsed into {groups}'.format(groups=match.groups(), **locals()))
else:
  parser.error('{args.expression!r} cannot be parsed by {outer_regexp.pattern!r}'.format(**locals()))

secs1 = secs(match.group(1))
secs2 = secs(match.group(3))

log.info('secs1: {secs1}, secs2: {secs2}'.format(**locals()))
if match.group(2) == '/':
  result = (secs1*1.0) / secs2
  if args.percentage:
    print('{result:.2%}'.format(**locals()))
  else:
    print('{result:.2}'.format(**locals()))
else:
  seconds = secs1 + (1 if match.group(2) == '+' else -1) * secs2
  sign = 1 if seconds >= 0 else -1
  seconds = seconds * sign

  (days, seconds) = divmod(seconds, 24*60*60)
  (hours, seconds) = divmod(seconds, 60*60)
  (minutes, seconds) = divmod(seconds, 60)
  print('{}{:>02}:{:>02}:{:>02}:{:>02}'.format('' if sign == 1 else '-', days, hours, minutes, seconds))
