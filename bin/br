#! /usr/bin/env python2

import os
import sys
import time
import signal
import logging
import tempfile
import argparse
import subprocess

import truepath

def cleanup(signum=None, frame=None):
  signals = {1: "SIGHUP", 2: "SIGINT", 3: "SIGQUIT", 4: "SIGILL", 5: "SIGTRAP", 6: "SIGABRT", 6: "SIGIOT", 7: "SIGBUS", 8: "SIGFPE", 9: "SIGKILL", 10: "SIGUSR1", 11: "SIGSEGV", 12: "SIGUSR2", 13: "SIGPIPE", 14: "SIGALRM", 15: "SIGTERM", 16: "SIGSTKFLT", 17: "SIGCHLD", 18: "SIGCONT", 19: "SIGSTOP", 20: "SIGTSTP", 21: "SIGTTIN", 22: "SIGTTOU", 23: "SIGURG", 24: "SIGXCPU", 25: "SIGXFSZ", 26: "SIGVTALRM", 27: "SIGPROF", 28: "SIGWINCH", 29: "SIGIO", 29: "SIGLOST", 30: "SIGPWR", 31: "SIGSYS", 32: "SIGRTMIN", 8192: "SIGSTKSZ"}

  if signum:
    print "Caught signal %s" % (signals[signum] if signum in signals else signum)
  if name:
    log.debug("Removing %s" % repr(name))
    os.remove(name)
  exit(0)

def add_crs(s):
  if windoze and args.notepad:
    s = '\r\n'.join(s.splitlines()) + '\r\n'
  return s

parser = argparse.ArgumentParser(description='Launch vi on a file/data stream in read-only mode')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')

windoze = 'win' in sys.platform
if windoze:
  # Windoze only options
  group = parser.add_mutually_exclusive_group()
  group.add_argument('-g', '--gvim', dest='gvim', action='store_true', help='Use gvim instead of vi (Windoze only)')
  group.add_argument('-n', '--notepad', dest='notepad', action='store_true', help='Use notepad instead of vi (Windoze only)')

parser.add_argument('files', metavar='file', nargs='*', help='Zero or more files')
args = parser.parse_args()

if not windoze:
  args.gvim = False
  args.notepad = False

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

editor = 'vi'
if args.gvim:
  editor = os.environ['GVIM']
  if not editor:
    log.error('--gvim used but there is no GVIM environment variable')
    exit(1)
elif args.notepad:
  editor = 'notepad'

log.debug('editor: {editor!r}'.format(**locals()))

if sys.stdin.isatty():
  """
    If stdin has not be redirected, we'll act like the old `br` script and just invoke `vi -R argv[1] ...`
  """
  if not args.files:
    log.error('When stdin is not directed, files are expected on command line')
    exit(1)
  cmd = [editor] + ([] if args.notepad else ["-R"]) + [truepath.process(path, log) for path in args.files]
  log.debug(str(cmd))
  os.execvp(editor, cmd)
  assert False, "os.execvp() of `vi` returned control to us!"

if args.files:
  log.error('Files are specified on the command line but stdin is also redirected')
  exit(1)

name = None

signal.signal(signal.SIGINT, cleanup)
signal.signal(signal.SIGTERM, cleanup)

(fd, name) = tempfile.mkstemp()
log.info("Created %s" % repr(name))
os.write(fd, add_crs(sys.stdin.read()))
os.close(fd)

with open("/dev/tty", 'r') as tty:
  cmd = [editor] + ([] if args.notepad else ["-R"]) + [truepath.process(name, log=log)]
  log.debug(str(cmd))
  p = subprocess.Popen(cmd, stdin=tty)
  rc = p.wait()

cleanup()
