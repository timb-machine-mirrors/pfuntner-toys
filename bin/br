#! /usr/bin/env python3

import os
import sys
import time
import signal
import logging
import tempfile
import argparse
import subprocess

import truepath

def cleanup(signum=None, frame=None):
  signals = {1: "SIGHUP", 2: "SIGINT", 3: "SIGQUIT", 4: "SIGILL", 5: "SIGTRAP", 6: "SIGABRT", 6: "SIGIOT", 7: "SIGBUS", 8: "SIGFPE", 9: "SIGKILL", 10: "SIGUSR1", 11: "SIGSEGV", 12: "SIGUSR2", 13: "SIGPIPE", 14: "SIGALRM", 15: "SIGTERM", 16: "SIGSTKFLT", 17: "SIGCHLD", 18: "SIGCONT", 19: "SIGSTOP", 20: "SIGTSTP", 21: "SIGTTIN", 22: "SIGTTOU", 23: "SIGURG", 24: "SIGXCPU", 25: "SIGXFSZ", 26: "SIGVTALRM", 27: "SIGPROF", 28: "SIGWINCH", 29: "SIGIO", 29: "SIGLOST", 30: "SIGPWR", 31: "SIGSYS", 32: "SIGRTMIN", 8192: "SIGSTKSZ"}

  if signum:
    print("Caught signal %s" % (signals[signum] if signum in signals else signum))
  if name:
    log.debug("Removing %s" % repr(name))
    os.remove(name)
  exit(0)

def add_crs(s):
  if windoze and args.notepad:
    s = b'\r\n'.join(s.splitlines()) + b'\r\n'
  return s

notepads = [
  '/cygdrive/c/Windows/system32/notepad',
  '/mnt/c/Windows/system32/notepad.exe',
]

notepad = None
for curr in notepads:
  if os.path.isfile(curr):
    notepad = curr
windoze = bool(notepad)

parser = argparse.ArgumentParser(description='Launch editor (vi, et al) on a file/data stream, in read-only mode if possible')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')

group = parser.add_mutually_exclusive_group()
if notepad:
  # Windoze only options
  # group.add_argument('-g', '--gvim', action='store_true', help='Use gvim instead of vi (Windoze only)')
  group.add_argument('-n', '--notepad', action='store_true', help='Use notepad instead of vi (Windoze only)')
if sys.platform == 'linux':
  group.add_argument('-g', '--gedit', action='store_true', help='Use gedit instead of vi (Unix only)')

parser.add_argument('files', metavar='file', nargs='*', help='Zero or more files')
args = parser.parse_args()


"""
if not windoze:
  args.gvim = False
  args.notepad = False
else:
  args.gedit = False
"""

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

editor = 'vi'
editor_options = ['-R']

if getattr(args, 'gvim', False):
  editor = os.environ['GVIM']
  if not editor:
    log.error('--gvim used but there is no GVIM environment variable')
    exit(1)
elif getattr(args, 'gedit'):
  editor = 'gedit'
  editor_options = []
elif getattr(args, 'notepad'):
  editor = notepad

exrc_path = os.path.expanduser('~/.exrc')
log.info(f'exrc_path: {exrc_path!r}')
if editor == 'vi' and os.path.exists(exrc_path):
  editor_options += ['-u', exrc_path]

log.debug(f'editor: {editor!r}')

if args.files:
  """
    We'll act like the old `br` script and just invoke `vi -R argv[1] ...`
  """
  cmd = [editor] + ([] if getattr(args, 'notepad') else editor_options) + [truepath.process(path, log) for path in args.files]
  log.debug(str(cmd))
  os.execvp(editor, cmd)
  assert False, "os.execvp() of `vi` returned control to us!"

if sys.stdin.isatty():
  log.error('stdin must be redirected if no files are specified on command line')
  exit(1)

name = None

signal.signal(signal.SIGINT, cleanup)
signal.signal(signal.SIGTERM, cleanup)

binary_stdin = os.fdopen(sys.stdin.fileno(), mode='rb')

(fd, name) = tempfile.mkstemp()
log.info("Created %s" % repr(name))
os.write(fd, add_crs(binary_stdin.read()))
os.close(fd)

with open("/dev/tty", 'r') as tty:
  cmd = [editor] + ([] if getattr(args, 'notepad') else editor_options) + [truepath.process(name, log=log)]
  log.debug(str(cmd))
  p = subprocess.Popen(cmd, stdin=tty)
  rc = p.wait()

cleanup()
