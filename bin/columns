#! /usr/bin/env python3

import sys
import string
import re
import getopt
import csv
import io
import logging
import argparse
import signal

def delimOrBlank():
  return (args.output or args.delim) or ' '

parser = argparse.ArgumentParser(description='Print columns from input')

parser.add_argument('-n', '--negate', action='store_true', help='Exclude specified columns')
group = parser.add_mutually_exclusive_group()
group.add_argument('-s', '-F', '--separator', '--delim', dest='delim', help='Specify regular expression delimiter')
group.add_argument('-r', '--regexp', dest='regexp', help='Specify regular expression')
group.add_argument('-c', '--csv', dest='csv', action='store_true', help='Read CSV input')

parser.add_argument('-o', '--output', help='Specify output separator')
parser.add_argument('-f', '--file', dest='filename', help='Specify file')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')

parser.add_argument('columns', metavar='column', nargs='*', help='Specify columns')
args = parser.parse_args()

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

if args.delim == '\\t':
  args.delim = '\t'

if (not args.delim) and (not args.regexp):
  delim = re.compile(r'\s+')
elif args.delim:
  log.debug(f'Compiling {args.delim!r}')
  delim = re.compile(args.delim)
else:
  delim = None

regexp = re.compile(args.regexp) if args.regexp else None

if args.filename:
  stream = open(args.filename)
else:
  if sys.stdin.isatty():
    parser.error('stdin is not redirected and --file FILENAME is not specified')
  stream = sys.stdin

values = []

args.columns = args.columns or []

"""
  expand ranges of fields
"""
curr = 0
while curr < len(args.columns):
  match = re.search(r'^(\d+)-(\d+)$', args.columns[curr])
  if match:
    low = int(match.group(1))
    high = int(match.group(2))
    args.columns = args.columns[:curr] + [str(low + inc) for inc in range(high-low+1)] + args.columns[curr+1:]
    values += [None] * (high-low+1)
  else:
    match = re.search(r'^(\d+)\*(\d+)$', args.columns[curr])
    if match:
      field = int(match.group(1))
      repeat = int(match.group(2))
      args.columns = args.columns[:curr] + ([str(field)]*repeat) + args.columns[curr+1:]
      values += [None] * repeat
    else:
      match = re.search(r'^(\d+)=(.+)$', args.columns[curr])
      if match:
        args.columns[curr] = int(match.group(1))
        values.append(match.group(2))
      else:
        values.append(None)
  curr += 1
log.debug('After expanding fields: {values}'.format(**locals()))

log.info('args.columns: {args.columns}'.format(**locals()))

desiredFields = []
try:
  if args.negate:
    for arg in range(1, 100001):
      if str(arg) not in args.columns:
        desiredFields.append(arg)
  else:
    for field in args.columns:
      field = int(field)
      if field == 0:
        parser.error('Cannot specify columns 0')
      if (field > 0) and (not args.regexp):
        field -= 1
      desiredFields.append(field)
except Exception as e:
  parser.error('Invalid field: `%s`' % str(e))
log.debug('desiredFields: {desiredFields}'.format(**locals()))

if args.csv:
  stream = csv.reader(stream)

for line in stream:
  if not args.csv:
    line = line.rstrip()
  output = []
  if regexp:
    match = regexp.search(line)
    log.debug('{line!r}: {groups}'.format(groups=match.groups() if match else None, **locals()))
    if match:
      if args.columns:
        print(delimOrBlank().join([match.group(field) for field in desiredFields]))
      else:
        print(match.groups())
  else:
    if args.csv:
      tokens = line
    else:
      tokens = delim.split(line)

    if args.columns:
      log.debug('{line!r}: {tokens}'.format(line=repr(line), tokens=tokens))
      skip = False
      for curr in range(len(values)):
        value = values[curr]
        if (value != None) and (curr < len(tokens)) and (value != tokens[curr]):
          skip = True
          break

      if not skip:
        for field in desiredFields:
          if field < len(tokens):
            output += [tokens[field]]
        if output:
          print(delimOrBlank().join(output))
    else:
      print(tokens)
