#! /usr/bin/env python2

import os
import pwd
import sys
import subprocess

class UnixProcess(object):
  def __init__(self, line):
    # 19446 19438 Oct03  5-18:44:18 [kded4] <defunct>
    # print 'init > line={line!r}'.format(**locals())
    tokens = line.split()
    self.line = line
    self.pid = int(tokens[0])
    self.ppid = int(tokens[1])
    self.stime = tokens[2]
    self.etime = tokens[2]
    self.cmd = ' '.join(tokens[3:])

  def isZombie(self):
    return self.cmd.endswith('<defunct>')

  def __str__(self):
    return 'pid={pid}, ppid={ppid}, stime={stime}, etime={etime}, cmd={cmd!r}'.format(
      pid=self.pid,
      ppid=self.ppid,
      stime=self.stime,
      etime=self.etime,
      cmd=self.cmd,
    )

def getUserID():
  return pwd.getpwuid(os.getuid()).pw_name

p = subprocess.Popen('ps -u {user} -o pid,ppid,stime,etime,cmd'.format(user=getUserID()).split(), stdout=subprocess.PIPE)
(stdout, stderr) = p.communicate()
rc = p.wait()
assert rc == 0, 'Error from ps'

processes = {}
lines = stdout.splitlines()
headings = lines[0]
for line in lines[1:]:
  process = UnixProcess(line)
  # print 'store > {process}'.format(**locals())
  processes[process.pid] = process

print headings
for (pid, process) in processes.items():
  if process.isZombie():
    if process.ppid in processes:
      print processes[process.ppid].line
    else:
      sys.stderr.write('No parent\n')
    print process.line
