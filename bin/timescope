#! /usr/bin/env python2

import re
import sys
import traceback
import datetime

# Styles of timestamps to process:
#   2016-01-16 00:01:08.1452931268
#   2016-01-20 05:12:17.1453295537
#   2016-01-18T05:54:07.273813

class Timestamp:
  regex = re.compile("(\d{4})[/-](\d{2})[/-](\d{2})[T ](\d{2}):(\d{2}):(\d{2})(\.\d{1,6})?")
  digit_regex = re.compile("\d")

  shortFormat = "%Y%m%d %H%M%S"
  longFormat = "%Y%m%d %H%M%S.%f"

  def __init__(self, line):
    match = Timestamp.regex.search(line)
    if not match:
      raise Exception("Not a timestamp")

    s = "%04d" % int(match.groups()[0])
    for group in match.groups()[1:3]:
      s += "%02d" % int(group)

    s += " "
    for group in match.groups()[3:6]:
      s += "%02d" % int(group)

    self.d = None
    if match.groups()[6] != None:
      s += match.groups()[6]
      self.d = datetime.datetime.strptime(s, Timestamp.longFormat)
    else:
      self.d = datetime.datetime.strptime(s, Timestamp.shortFormat)

    self.secs = Timestamp.total_seconds(self.d - datetime.datetime.utcfromtimestamp(0))

  def __str__(self):
    return "?"

  @staticmethod
  def total_seconds(time_diff):
    return (time_diff.days * 24*60*60) + time_diff.seconds + (time_diff.microseconds / 1000000.0)

  @staticmethod
  def diff(t1, t2):
    return Timestamp.total_seconds(t2-t1)

  @staticmethod
  def see(secs):
    ret = ""

    hours = int(secs/3600)
    secs %= 3600
    mins = int(secs/60)
    secs %= 60

    if hours:
      ret += "%dh" % hours

    if ret:
      ret += "%02dm" % mins
    elif mins:
      ret += "%dm" % mins
    
    if secs % 1:
      if ret:
        ret += "%06.3fs" % secs
      else:
        ret += "%.3fs" % secs
    else:
      if ret:
        ret += "%02ds" % secs
      else:
        ret += "%ds" % secs

    return ret

  @staticmethod
  def parse(line):
    obj = None
    try:
      obj = Timestamp(line)
    except Exception as e:
      # print e
      # print str(traceback.format_exc())
      pass

    return obj

  @staticmethod
  def stripLeadingDigits(s):
    while len(s) > 0:
      if re.match(Timestamp.digit_regex, s):
        s = s[1:]
      else:
        break
    return s

  @staticmethod
  def replace(line, secs):
    match = Timestamp.regex.search(line)
    # print "`%s`" % line[match.start(0): match.end(0)]
    first = match.start(0)
    last = match.end(0)

    delta = "%03dd" % int(secs/(24*60*60))
    secs %= 24*60*60
    delta += "%02dh" % int(secs/(60*60))
    secs %= 60*60
    delta += "%02dm" % int(secs/60)
    secs %= 60
    delta += "%06.3fs" % secs

    return line[:first] + delta + Timestamp.stripLeadingDigits(line[last:])

def process(filename):
  global delta
  global neighbor

  if filename:
    print "%s:" % filename
    f = open(filename, "r")
  else:
    f = sys.stdin

  first = None
  last = None
  total = 0
  count = 0

  for line in f:
    curr = Timestamp.parse(line) 
    if curr:
      # bruno
      curr = curr.d
      if neighbor:
        sys.stdout.write(Timestamp.replace(line, Timestamp.diff(last if last else curr, curr)))
      elif delta:
        sys.stdout.write(Timestamp.replace(line, Timestamp.diff(curr, now)))
      else:
        # calculate average duration
        if not first:
          first = curr
        if last:
          total += Timestamp.diff(last, curr)
        count += 1
      last = curr
    elif delta:
      sys.stdout.write(line)

  if count == 1:
    print str(first)
  elif count == 2:
    print "%d timestamps over %s" % (count, Timestamp.see(Timestamp.diff(first, last)))
  elif count > 2:
    print "%d timestamps over %s, average duration %s, %.3f/minute" % (count, Timestamp.see(Timestamp.diff(first, last)), Timestamp.see(total / (count-1)), 60/(total / (count-1)))

  if filename:
    f.close()
    print ""

delta = False
neighbor = False
now = datetime.datetime.now()

opt = 1
if (opt < len(sys.argv)) and (sys.argv[opt].startswith("-")):
  if sys.argv[opt] == "--delta":
    delta = True
    opt += 1
  elif sys.argv[opt] == "--neighbor":
    delta = True
    neighbor = True
    opt += 1
  else:
    raise Exception("Unknown option: `%s`" % sys.argv[opt])

if len(sys.argv) > opt:
  for filename in sys.argv[opt:]:
    process(filename)
else:
  if sys.stdin.isatty():
    raise Exception("stdin is not redirected")
  process(None)
