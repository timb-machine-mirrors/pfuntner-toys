#! /usr/bin/env python3

import os
import json
import logging
import requests
import argparse
import datetime
import binascii

from table import Table

parser = argparse.ArgumentParser(description='Jenkins job monitor')
parser.add_argument('-c', '--credentials', '--creds', help='Jenkins credentials (eg. user@token)')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
parser.add_argument('jobs', metavar='job', nargs='+', help='URLs to one or more Jenkins job')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

creds = tuple((args.credentials or os.environ.get('JENKINS_CREDENTIALS')).split(':'))
if not creds:
  parser.error('Jenkins credentials not present')

table = Table('Job', 'Status', 'Started', 'Duration')

for job in args.jobs:
  req = None
  url = f'{job}/api/json?pretty=true'
  log.info(f'url: {url}, auth: {creds}')
  try:
    req = requests.get(url, auth=creds)
  except Exception as e:
    log.warning(f'{url!r} failed: {e!s}')

  log.debug(f'req: {req!s}')

  if req is not None:
    if req.ok:
      attrs = req.json()
      log.debug(f'json: {attrs!s}')
      started = datetime.datetime.fromtimestamp(attrs['timestamp']/1000.0)
      duration = datetime.timedelta(seconds=attrs['duration']/1000.0) if attrs['duration'] else datetime.datetime.now()-started
      table.add(' '.join(attrs['fullDisplayName'].split()[-2:]), (attrs['result'] or 'Running').title(), started, duration)
    else:
      table.add(job, req.text, '', '')

print(str(table), end='')
