#! /usr/bin/env python3

import re
import json
import signal
import logging
import argparse
import datetime
import subprocess

from table import Table

def dhms(delta):
  """
  Return a time delta formatted as "days-hours:minutes:seconds"
  """
  seconds = int(delta.total_seconds())
  (days, seconds) = divmod(seconds, 24*60*60)
  (hours, seconds) = divmod(seconds, 60*60)
  (minutes, seconds) = divmod(seconds, 60)
  return f'{days:02}-{hours:02}:{minutes:02}:{seconds:02}'

def run(cmd, capture=True):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None)
  if capture:
    (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  else:
    (stdout, stderr) = ('', '')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Get information from Ansible hosts')
parser.add_argument('hosts', metavar='host', default=['all'], nargs='*', help='Zero or more hosts (default: all)')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

"""
  /_meta/hostvars/aws-centos7/ansible_host '54.197.26.211'
  /_meta/hostvars/aws-centos7/ansible_ssh_private_key_file '/home/centos/.ssh/pfuntner-aws.pem'
  /_meta/hostvars/aws-centos7/ansible_user 'centos'
"""

(rc, stdout, stderr) = run('ansible-inventory --list')
if rc != 0 or not stdout:
  log.fatal(f'ansible-inventory --list failed: {rc}, {stdout!r}, {stderr!r}')
  exit(1)
inventory = json.loads(stdout).get('_meta', {}).get('hostvars', {})
if args.hosts == ['all']:
  args.hosts = inventory.keys()

args.hosts = sorted(args.hosts)
log.info(f'all hosts => {args.hosts}')

setup_regexp = re.compile(r'^(\S+)\s+\|\s+SUCCESS\s+=>\s+\{$')
table = Table('Host', 'User', 'Address', 'Key', 'Distro', 'Up time', 'Kernel', 'Pkgmgr')

(rc, stdout, stderr) = run('ansible {} -m setup'.format(','.join(args.hosts)))
lines = stdout.splitlines()
setup = dict()
pos = 0
while pos < len(lines):
  match = setup_regexp.search(lines[pos])
  if match:
    host = match.group(1)
    json_string = '{'
    pos += 1
    while pos < len(lines):
      json_string += '\n' + lines[pos]
      if lines[pos] == '}':
        break
      pos += 1
    try:
      setup[host] = json.loads(json_string)
    except Exception as e:
      log.debug(f'JSON parser threw {e!s} on {json_string!r}')
  pos += 1
log.info(f'setup: {setup}')

for host in args.hosts:
  if host == 'localhost':
    addr = 'localhost'
    user = ''
    key = ''
  else:
    addr = inventory.get(host, {}).get('ansible_host')
    user = inventory.get(host, {}).get('ansible_user', '')
    key = inventory.get(host, {}).get('ansible_ssh_private_key_file', '')

  log.info(f'{host}: -i {key} {user}@{addr}')
  if addr:
    facts = setup.get(host, {}).get('ansible_facts', {})
    facts['distro'] = facts.get('ansible_distribution', '')
    if facts['distro']:
      facts['distro'] = (facts['distro'] + ' ' + facts.get('ansible_distribution_version', '')).strip()
    if 'WIN' in facts.get('ansible_distribution', ''):
      """
        [jpfuntne@JPFUNTNE-GCEYJ ~]$ systeminfo | grep 'System Boot Time'
        System Boot Time:          2020-10-06, 7:51:30 AM
      """
      (rc, stdout, stderr) = run('systeminfo')
      match = re.search(r'^System Boot Time:\s+(\d{4}-\d{2}-\d{2}, \d{1,2}:\d{2}:\d{2} (?:AM|PM))', stdout, flags=re.MULTILINE)
      if match:
        boot_time = datetime.datetime.strptime(match.group(1), '%Y-%m-%d, %I:%M:%S %p')
        log.info(f'boot_time: {boot_time!s}')
        facts['uptime'] = dhms(datetime.datetime.now() - boot_time)
      else:
        facts['uptime'] = ''
    else:
      facts['uptime'] = dhms(datetime.timedelta(seconds=facts.get('ansible_uptime_seconds', 0)))
    table.add(host, user, addr, key, facts.get('distro', ''), facts.get('uptime', ''), facts.get('ansible_kernel', ''), facts.get('ansible_pkg_mgr', ''))
  else:
    log.warning(f'Could not find host {host!r}')

print(str(table), end='')
