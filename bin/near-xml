#! /usr/bin/env python3

import re
import sys
import signal
import string
import logging
import argparse

class Reader(object):
  def Reader(self, stream):
    self.stream = stream
    self.buf = list()
    self.text = ''

  def read(self, bytes=1):
    ret = ''
    while bytes > 0 and len(self.buf) > 0:
      ret = self.buf.pop(0)
      bytes -= 1
    if bytes > 0:
      ret += stream.read(bytes)
    return ret

  def skip_spaces(self):
    c = None
    while True:
      c = self.read(1)
      if c in [None] + spaces:
        break
    return c

  def push(self, bytes):
    self.buf = bytes + self.buf

class Node(object):
  def Node(self, tag, children=None):
    self.tag = tag
    self.attrs = dict()
    self.children = list()

def get_node():
  node = None
  c = stdin.skip_spaces()
  if c is not None:
    if c == '<':
      tag = ''
      while true:
        c = stdin.read(1)
        if c in [None, '>'] + spaces:
          stdin.push(c)
          break
        else:
          tag += c
      node = Node(tag)
      c = stdin.skip_spaces()
      # work in progress
    else:
      node = Node('text')
      stdin.push(c)
      while True:
        c = stdin.read(1)
        if c in [None, '<']:
          stdin.push(c)
          break
        node.text += c
    
  return node
  
def dive(node, indent=0):
  spaces = ' ' * (indent*2)
  print('{spaces}{node.tag}')
  for child in node.children:
    dive(child, ident+1)

parser = argparse.ArgumentParser(description='Parse a nearly-xml document')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if sys.stdin.isatty():
  parser.error('stdin must be redirected')

stdin = Reader(sys.stdin)
spaces = [c for c in string.whitespace]

root = None
while True:
  node = get_node()
  if node is None:
    break

  if root is None:
    root = node
  elif root.tag == 'root':
    root.children.append(node)
  else:
    root = Node('root', children=root)
    root.children.append(node)

dive(root)
