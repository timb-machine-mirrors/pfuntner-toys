#! /usr/bin/env python3

import re
import sys
import signal
import string
import logging
import argparse

from PushbackReader import PushbackReader

class Node(object):
  def __init__(self, tag, location, children=None):
    """
    Construct a ndoe
    :param tag: tag (name) of tag
    :param location: typically stream.location() when the node was first encountered
    :param children: optional children to assign to the node
    """
    self.tag = tag
    self.location = location
    self.attrs = dict()
    self.children = children or list()
    self.text = ''
    self.self_closed = False

  def describe(self):
    return f'<{self.tag}> from {self.location}'

def get_node():
  node = None
  c = stream.skip_spaces()
  if c is not None:
    if c == '<':
      tag = ''
      location = stream.location()
      while True:
        c = stream.read()
        if c in [None, '>'] + whitespace:
          stream.push(c)
          break
        else:
          log.debug(f'Read {c!r} for tag')
          tag += c

      node = Node(tag, location)
      log.debug(f'creating {node.describe()}')

      # parse attributes
      while True:
        c = stream.skip_spaces()
        if c in [None, '/', '>']:
          break

        # parse out attribute name
        name = c
        while True:
          c = stream.read()
          if c in [None, '='] + whitespace:
            break
          name += c

        if c != '=':
          log.fatal(f'Missing `=` after attribute {name!r} at {stream.location()}: {c!r}')
          exit(1)

        # prepare for attribute value
        value = ''
        quote = None
        c = stream.read()
        if c in '"\'':
          quote = c
        else:
          stream.push(c)

        # parse out attribute value
        while True:
          c = stream.read()
          if c is None:
            break
          if not quote and c in whitespace + ['>', '/']:
            stream.push(c)
            break
          elif quote and c == quote:
            break
          elif c == '\\':
            c = stream.read()
            if c != None and c != quote:
              value += '\\'
            value += c
          else:
            value += c
        if not value:
          log.fatal(f'Missing value after attribute {name!r} at {stream.location()}: {c!r}')
          exit(1)
        log.debug(f'creating {name}={value} for {node.describe()}')
        node.attrs[name] = value

      if c == '/':
        log.debug(f'{node.describe()} is self-closed')
        node.self_closed = True
        c = stream.read()

      if c != '>':
        log.fatal(f'Missing `>` at end of {node.tag!r} tag at {stream.location()}: {c!r}')
        exit(1)

      if not node.self_closed:
        log.debug(f'Seeking inner nodes for {node.describe()}')

        # process inner (child) nodes
        while True:
          c = stream.skip_spaces()
          if c is None:
            log.warning(f'At {stream.location()}: No </{node.tag}> found for <{node.tag}> started at {node.location}')
            break
          if c == '<':
            c = stream.read()
            if c == '/':
              name = ''
              while True:
                c = stream.read()
                if c in [None, '/', '>'] + whitespace:
                  break
                name += c
              if name == node.tag and c == '>':
                # found the end tag of this node
                log.debug(f'Found <!{node.tag} for {node.describe()}')
                break
              else:
                # assume this end tag for this node is missing and we're reading the end tag for a previous tag
                log.warning(f'At {stream.location}: No </{node.tag}> found for <{node.tag}> started at {node.location}')
                # push the end tag back on the stream so a previous node can be closed
                stream.push(f'</{name}>')
                break
          stream.push(c)
          log.debug(f'Seeking child node #{len(node.children)} for {node.describe()}')
          node.children.append(get_node())
      else:
        node = Node('text', stream.location())
        log.debug(f'creating {node.describe()}')
        stream.push(c)
        while True:
          c = stream.read()
          if c in [None, '<']:
            stream.push(c)
            break
          log.debug(f'Read {c!r} for {node.describe()} at {stream.location()}')
          node.text += c
    
  return node
  
def dive(node, indent=0):
  spaces = ' ' * (indent*2)
  print(f'{spaces}{node.tag}', end='')
  for (name, value) in node.attrs.items():
    print(f' {name}={value}', end='')
  print('')
  for child in node.children:
    dive(child, indent+1)

parser = argparse.ArgumentParser(description='Parse a nearly-xml document')
parser.add_argument('file', nargs='?', help='File to process (if not reading from stdin)')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

stream = PushbackReader(args.file or sys.stdin, log=log)
whitespace = [c for c in string.whitespace]

root = None
while True:
  node = get_node()
  if node is None:
    break

  if root is None:
    root = node
  elif root.tag == 'root':
    root.children.append(node)
  else:
    root = Node('root', 'implied-root', children=[root])
    root.children.append(node)

dive(root)
