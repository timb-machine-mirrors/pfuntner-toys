#! /usr/bin/env python3

import re
import sys
import json
import signal
import string
import logging
import argparse

from PushbackReader import PushbackReader

class Node(object):
  def __init__(self, tag, location, children=None):
    """
    Construct a ndoe
    :param tag: tag (name) of tag
    :param location: typically stream.location() when the node was first encountered
    :param children: optional children to assign to the node
    """
    self.tag = tag.lower()
    self.location = location
    self.attrs = dict()
    self.children = children or list()
    self.text = ''
    self.special = None
    self.self_closed = False
    self.valid = not self.tag.startswith('/')

  def __str__(self):
    if self.tag == 'text':
      start_tag = repr(self.text)
      end_tag = ''
      children = ''
    else:
      start_tag = f'<{self.tag}'
      end_tag = '>'
      children = f', {len(self.children)} children'

    invalid = '' if self.valid else 'INVALID '
    attrs = ' '.join([f'{key}={value!r}' for (key, value) in self.attrs.items()])

    return f'''{invalid}{start_tag}{' ' if attrs else ''}{attrs}{end_tag}{children} from {self.location}'''

  def equals(self, name):
    return self.tag == name.lower()

def consume_special_tag(node):
  """
  consume all text until end-tag
  :param node: The special node object (script, style) to receive the text
  :return: None
  """

  node.special = ''
  end_tag = f'</{node.tag}>'
  while node.special[-len(end_tag):] != end_tag:
    c = stream.read()
    if c:
      node.special += c
    else:
      break

  if node.special[-len(end_tag):] == end_tag:
    node.special = node.special[:-len(end_tag)]

def get_node():
  node = None
  c = stream.skip_spaces()
  if c is not None:
    if c == '<':
      tag = ''
      location = stream.location()
      while True:
        c = stream.read()
        if c == '>' and tag.startswith('/'):
          log.warning(f'Ignoring unmatched </{tag} at {location}')
          node = Node(tag, location)
          return node
        if c in [None, '>'] + whitespace:
          stream.push(c)
          break
        else:
          log.debug(f'Read {c!r} for tag')
          tag += c

      node = Node(tag, location)
      log.debug(f'created {node!s}')

      # parse attributes
      while True:
        c = stream.skip_spaces()
        if c in [None, '/', '>']:
          break

        # parse out attribute name
        name = c
        while True:
          c = stream.read()
          if c in [None, '=', '>'] + whitespace:
            break
          name += c

        value = ''
        if c == '=':
          # prepare for attribute value
          quote = None
          c = stream.read()
          if c in '"\'':
            quote = c
          else:
            stream.push(c)

          # parse out attribute value
          while True:
            c = stream.read()
            if c is None:
              break
            if quote:
              if c == quote:
                break
              if c == '\\':
                c = stream.read()
                if c != None and c != quote:
                  value += '\\'
            else: # not quoted
              if c in whitespace + ['>']:
                stream.push(c)
                break
              if c == '/':
                next = stream.read()
                stream.push(next)
                if next == '>':
                  stream.push(c)
                  break
            value += c
        else:
          log.warning(f'No `=` after attribute {name!r} at {stream.location()}: {c!r}')
          stream.push(c)

        if not value:
          log.warning(f'Assuming {name}=true at {stream.location()}: {c!r}')
          value = True

        log.debug(f'creating {name}={value} for {node!s}')
        node.attrs[name] = value

      if c == '/':
        log.debug(f'{node!s} is self-closed')
        node.self_closed = True
        c = stream.read()

      if c != '>':
        log.fatal(f'Missing `>` at end of {node.tag!r} tag at {stream.location()}: {c!r}')
        exit(1)

      if not node.self_closed:
        log.debug(f'Seeking inner nodes for {node!s} at {stream.location()}')

        # process inner (child) nodes
        while True:
          c = stream.skip_spaces()
          if node.tag in ['script', 'style']:
            stream.push(c)
            consume_special_tag(node)
            break # a script/style node only contains text, no other children, and is always explicitly ended
          else:
            log.debug(f'First character in top of inner nodes loop: {c!r}')
            if c is None:
              log.warning(f'At {stream.location()}: No </{node.tag}> found for <{node.tag}> started at {node.location}')
              break
            if c == '<':
              c = stream.read()
              if c == '/':
                name = ''
                while True:
                  c = stream.read()
                  if c in [None, '/', '>'] + whitespace:
                    break
                  name += c
                if node.equals(name) and c == '>':
                  # found the end tag of this node
                  log.debug(f'Found </{node.tag}> for {node!s}')
                  break
                else:
                  # assume this end tag for this node is missing and we're reading the end tag for a previous tag
                  log.warning(f'At {stream.location()}: No </{node.tag}> found for <{node.tag}> started at {node.location}')
                  # push the end tag back on the stream so a previous node can be closed
                  stream.push(f'</{name}>')
                  break
              else:
                stream.push(c)
              stream.push('<')
            else:
              stream.push(c)
            log.debug(f'Seeking child node #{len(node.children)} for {node!s}')
            child = get_node()
            if child.valid:
              node.children.append(child)
    else:
      # we don't have a tag so we'll assume it's text
      node = Node('text', stream.location())
      log.debug(f'creating {node!s}')
      stream.push(c)
      while True:
        c = stream.read()
        if c in [None, '<']:
          stream.push(c)
          break
        log.debug(f'Read {c!r} for {node!s} at {stream.location()}')
        node.text += c

  log.info(str(node))
  return node
  
def dive(node, writer=print, indent=0):
  if node:
    spaces = ' ' * (indent*2)
    writer(f'{spaces}{node!s}')
    # for (name, value) in node.attrs.items():
    #   print(f' {name}={value}', end='')
    # print('')
    for child in node.children:
      dive(child, writer, indent+1)

def to_json(root):
  if root.tag == 'text':
    ret = root.text
  else:
    if len(root.children) == 1 and root.children[0].tag == 'text':
      ret = {root.tag: root.children[0].text}
    else:
      ret = {root.tag: dict()}
      for (name, value) in root.attrs.items():
        ret[root.tag][name] = value

      if root.special:
        ret[root.tag]['special'] = root.special

      ret[root.tag]['children'] = list()
      for child in root.children:
        ret[root.tag]['children'].append(to_json(child))
  return ret

parser = argparse.ArgumentParser(description='Parse a nearly-xml document')
parser.add_argument('file', nargs='?', help='File to process (if not reading from stdin)')
parser.add_argument('-j', '--json', action='store_true', help='Generate JSON output')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

stream = PushbackReader(args.file or sys.stdin, log=log)
whitespace = [c for c in string.whitespace]

root = None
while True:
  dive(root, writer=log.debug)

  node = get_node()
  if node is None:
    break

  if node.valid:
    if root is None:
      log.debug('initial root')
      root = node
    elif root.tag == 'root':
      log.debug('adding to root')
      root.children.append(node)
    else:
      log.debug('creating an implied root')
      root = Node('root', 'implied-root', children=[root])
      root.children.append(node)

if args.json:
  root = to_json(root)
  json.dump(root, sys.stdout)
else:
  dive(root)
