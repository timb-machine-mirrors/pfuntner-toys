#! /usr/bin/env python3

"""
   Replace passwords in stdin, sending to stdout. This only works when there is on
   password per line but can probably be adapted to process multiple passwords per
   line if necessary.

   Initially, it *only* keys off of a keyword of "password" but this can be extended.
   It's enough to process these examples:

       password: foo
       "password": "foo",
       password:foo

   These should be replaced by:

       password: ********
       "password": "********",
       password:********
"""

import re
import sys

assert not sys.stdin.isatty()

# groups when the regular expression matches:
#   1: Special non-blank characters that preceed the password keyword.  This can be a null string, quotes, etc.
#   2: The password keyword.  This will be something like the string "password"
#   3: Special non-blank characters that follow the password keyword.  This can be a null string or a combination of quotes, colons, etc.
#   4: White space the separate the keyword the password
#   5: Special non-blank characters that preceed the actual password.  This can be a null string, quotes, etc.
#   6: The actual password
#   7: Special non-blank characters that follow the actual password .  This can be a null string or a combination of quotes, colons, etc.
regexp = re.compile(r'([^a-zA-Z ]*)(password)([^a-zA-Z ]*)(\s)*([^\-@#.a-zA-Z0-9 ]*)([^ \'"]+)([^\-@#.a-zA-Z0-9 ]*)')

while True:
  line = sys.stdin.readline()
  if not line:
    break
  line = line.strip('\n').strip('\r')
  match = regexp.search(str(line))
  """
     Not only do we have to make sure the regular expression matches but there must be some chracters after the keyword preceeding the password.

     Here's an example of parsing a false match.  No special characters follow the keyword so we want to leave it alone

       ('/', 'password', '', ' ', '', 'here', '')	'# be run as root however, optionally we configure list of IPs and user/password here'

     A positive match does have special characters following the keyword:

       ('', 'password', ':', ' ', '', 'foobar', '')	'#  password: foobar'
  """
  if match and match.group(3):
    line = line[:match.start(0)] + match.group(1) + match.group(2) + match.group(3) + match.group(4) + match.group(5) + ('*'*8) + match.group(7) + line[match.end(0):]
  print(line)
