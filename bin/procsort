#! /usr/bin/env python3

import sys
import getopt
import subprocess

class Datum:
  def __init__(self, line):
    self.line = line
    tokens = line.split()
    num = [c for c in tokens[0] if (c.isdigit()) or (c == '.')]
    if len(num) == 0:
      self.key = 0
    else:
      self.key = float(''.join(num))

fields = ["%cpu", "cputime", "rss", "%mem", "etime"]
sortField = None
defaultPsFields = "pid,args"
psFields = defaultPsFields 

def syntax():
  global fields
  global defaultPsFields

  sys.stderr.write("Syntax: %s %s [-o psFields|%s]\n" % (sys.argv[0], '|'.join(["--%s" % field for field in fields]), defaultPsFields))
  exit(1)

try:
  opts, args = getopt.getopt(sys.argv[1:], "o:", fields)
except Exception as e:
  sys.stderr.write("Caught: %s\n" % e)
  syntax()

for (opt, arg) in opts:
  if opt in ["--%s" % field for field in fields]:
    if sortField:
      sys.stderr.write("%s cannot be specified since --%s was already specified\n" % (opt, sortField))
      syntax()
    sortField = opt[2:]
  elif opt == "-o":
    psFields = arg
  else:
    raise Exception("Unhandled option: %s" % opt)

if not sortField:
  sys.stderr.write("Specify a `ps` field on which to sort\n")
  syntax()

if args:
  sys.stderr.write("Unexpected arguments: %s\n" % args)
  syntax()

p = subprocess.Popen(["ps", "-e", "-o", "%s,%s" % (sortField, psFields)], stdout=subprocess.PIPE)
(stdout, stderr) = p.communicate()
assert p.wait() == 0, "`ps` returned with %d" % p.returncode

lines = stdout.split('\n')[:-1]
print(lines[0])

data = [Datum(line) for line in lines[1:]]
for datum in sorted(data, key=lambda datum: datum.key, reverse=True):
  print(datum.line)
