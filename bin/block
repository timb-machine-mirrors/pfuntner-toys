#! /usr/bin/env python3

import re
import sys
import logging
import argparse

def vertical_border():
  line = ''
  while len(line) < args.width:
    line += args.border[0]
  print(line[:args.width])

def append(s1, s2):
  return s1 + (' ' if s1 else '') + s2

def emit(line):
  match = prefix_regexp.search(str(line))
  if line and match:
    indent = match.group(1)
    remainder = match.group(2).split()
    while remainder:
      curr = indent
      while remainder and (len(append(curr, remainder[0])) <= inner_width):
        curr = append(curr, remainder.pop(0))
      if (not curr.strip()):
        parser.error('{next!r} is too wide for a width of {args.width}'.format(next=remainder[0], **globals()))

      if args.center_first_line:
        curr = curr.center(inner_width)
        args.center_first_line = False

      print('{args.border} {curr:{inner_width}} {right_border}'.format(curr=curr, **globals()))
  else:
    print('{args.border} {spaces} {right_border}'.format(**globals()))

parser = argparse.ArgumentParser(description='Generate block comment')
parser.add_argument('-b', '--border', default='#', help='Specify border string')
parser.add_argument('-w', '--width', default=80, type=int, help='Specify total width')
parser.add_argument('-c', '--center-first-line', action='store_true', help='Center the top line')
parser.add_argument('-v', '--verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

log.debug(args)

prefix_regexp = re.compile('^(\s*)(.*)$')

inner_width = args.width - (len(args.border) + 1) * 2
spaces = ' ' * inner_width
right_border = args.border[-1::-1]

if sys.stdin.isatty():
  parser.error('stdin must be redirected')

vertical_border()
for (lineno, line) in enumerate(sys.stdin.read().splitlines()):
  if lineno > 0:
    emit('')
  emit(line)
vertical_border()
