#! /usr/bin/env python3

import os
import sys
import signal
import logging
import argparse
import subprocess

class Table(object):
  def __init__(self, *args):
    if len(args) == 1 and type(args[0]) in (list, tuple):
      self.headings = args[0]
    else:
      self.headings = args

    try:
      self.p = subprocess.Popen(['column', '-t', '-s\t'], stdin=subprocess.PIPE, text=True)
    except Exception as e:
      log.error(f'Error opening `column`: {e!s}. On Ubuntu, try installing the bsdmainutils package')
      exit(1)

    self.p.stdin.write('\t'.join([str(heading) for heading in self.headings]) + '\n')

  def add(self, *args):
    self.p.stdin.write('\t'.join([str(arg) for arg in args]) + '\n')

  def close(self):
    self.p.stdin.close()
    self.p.wait()

def factor(bytes):
  if file_data[0][1] == 0:
    return 'Inf'
  else:
    return f'{bytes/file_data[0][1]:12.2%}'

parser = argparse.ArgumentParser(description='Compare the size of two or more files')
parser.add_argument('files', metavar='file', nargs='+', help='Files to compare (`-` for stdin)')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if len(args.files) < 2:
  parser.error('Specify at least two files')

stdins = [filename for filename in args.files if filename == '-']
if len(stdins) > 1:
  parser.error('Cannot specify stdin more than once')
if len(stdins) == 1 and sys.stdin.isatty():
  parser.error('stdin must be redirected')

file_data = list()

for filename in args.files:
  if filename == '-':
    stream = sys.stdin
  else:
    if os.path.exists(filename):
      if not os.path.isdir(filename):
        stream =  open(filename)
      else:
        parser(f'{filename!r} is not a file')
    else:
      parser(f'{filename!r} does not exist')
  file_data.append((filename, len(stream.read())))
  if filename != '-':
    stream.close()

file_data.sort(key=lambda file_datum: file_datum[1])

table = Table('File', 'Size', 'Size factor')
for (filename, bytes) in file_data:
  table.add(filename, f'{bytes:10d}', factor(bytes))
table.close()
