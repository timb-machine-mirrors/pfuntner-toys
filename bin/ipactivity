#! /usr/bin/env python2

import re
import sys
import getopt
import subprocess
import datetime
import time

"""
style 1:
  ens192    Link encap:Ethernet  HWaddr 00:50:56:a0:e2:d1
            inet addr:9.42.89.63  Bcast:9.42.89.255  Mask:255.255.255.0
            inet6 addr: fe80::250:56ff:fea0:e2d1/64 Scope:Link
            UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
            RX packets:38174561 errors:0 dropped:25825 overruns:0 frame:0
            TX packets:26854487 errors:0 dropped:0 overruns:0 carrier:0
            collisions:0 txqueuelen:1000
            RX bytes:32627598517 (32.6 GB)  TX bytes:3766956972 (3.7 GB)

style 2:
  enccw0.0.b900: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
          inet 9.47.152.120  netmask 255.255.254.0  broadcast 9.47.153.255
          inet6 fe80::ff:fe36:53de  prefixlen 64  scopeid 0x20<link>
          ether 02:00:00:36:53:de  txqueuelen 1000  (Ethernet)
          RX packets 5850210  bytes 5665462382 (5.2 GiB)
          RX errors 0  dropped 0  overruns 0  frame 0
          TX packets 2088311  bytes 173898158 (165.8 MiB)
          TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

style 3 (Ubuntu 17.04 - Meerkat):
  eno1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
          inet 192.168.2.5  netmask 255.255.255.0  broadcast 192.168.2.255
          inet6 fe80::3bf4:564:ed63:d8c  prefixlen 64  scopeid 0x20<link>
          ether f4:4d:30:6f:93:53  txqueuelen 1000  (Ethernet)
          RX packets 38046743  bytes 57404929919 (57.4 GB)
          RX errors 0  dropped 0  overruns 0  frame 0
          TX packets 16564280  bytes 1293197591 (1.2 GB)
          TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
          device interrupt 16  memory 0xdc200000-dc220000  
"""

def see(value):
  ret = "%16d" % value
  if human:
    units = "b"
    if value > 1000:
      value /= 1024.0
      units = "Kb"
      if value > 1000:
        value /= 1024.0
        units = "Mb"
        if value > 1000:
          value /= 1024.0
          units = "Gb"
          if value > 1000:
            value /= 1024.0
            units = "Tb"
    ret = "%7.3f%s" % (value, units)
  return ret

def emit():
  global interface, rx, tx

  ret = None

  if interface and (rx != None) and (tx != None):
    ret = "%-16s RX:%s TX:%s" % (interface, see(rx), see(tx))

    if lastTime:
      secs = (datetime.datetime.now() - lastTime).total_seconds()
      # print "rx: %s" % rx
      # print "tx: %s" % tx
      # print "lastRx: %s" % lastRx
      # print "lastTx: %s" % lastTx
      ret += " (%s/sec, %s/sec)" % (see((rx-lastRx) / secs), see((tx-lastTx) / secs)) 

  interface = None
  rx = None
  tx = None

  return ret

def debug(msg, lvl=1):
  if lvl<=verbose:
    sys.stderr.write("%s\n" % msg)

human = False
continuous = False
verbose = 0

(opts,args) = getopt.getopt(sys.argv[1:], "vhc", ["verbose", "human", "continuous"])
for (opt,arg) in opts:
  if opt in ["-h", "--human"]:
    human = not human
  elif opt in ["-c", "--continuous"]:
    continuous = not continuous
  elif opt in ["-v", "--verbose"]:
    verbose += 1

ifPat = re.compile("(\S+)")
bytesPat = re.compile("RX bytes:(\d+)\s.*TX bytes:(\d+)\s")
bytes2Pat = re.compile("(RX|TX)\s+packets\s+\d+\s+bytes\s+(\d+)\s+")

iterations = 0
lastTime = None
lastRx = None
lastTx = None

while continuous or (iterations == 0):
  iterations += 1
  p = subprocess.Popen(["/sbin/ifconfig"], stdout=subprocess.PIPE)
  stdout = p.stdout.read()
  rc = p.wait()
  if rc != 0:
     exit(rc)
  
  interface = None
  rx = None
  tx = None
  
  linenum = 0
  for line in stdout.strip('\n').split('\n'):
    match = None
  
    if not interface:
      match = ifPat.match(line)
  
      if match:
        interface = match.group(1)
        debug("got interface %s from %s" % (repr(interface), repr(line)))
        if args:
          found = False
          for arg in args:
            if re.search(arg, interface):
              found = True
              break
          if not found:
            interface = None
    else:
      match = bytesPat.search(line)
      if match:
        debug("%s matched %s" % (repr(line), repr(bytesPat.pattern)), 2)
        rx = int(match.group(1))
        tx = int(match.group(2))
        if continuous:
          ret = emit()
          now = datetime.datetime.now()
          print "%s: %s" % (now, ret)
          lastTime = now
          lastRx = int(match.group(1))
          lastTx = int(match.group(2))
          time.sleep(5)
        else:
          print emit()
      else:
        match = bytes2Pat.search(line)
        if match:
          debug("%s matched %s" % (repr(line), repr(bytes2Pat.pattern)), 2)
          if match.group(1) == "RX":
            rx = int(match.group(2))
          elif match.group(1) == "TX":
            tx = int(match.group(2))

          if (rx != None) and (tx != None):
            if continuous:
              ret = emit()
              now = datetime.datetime.now()
              print "%s: %s" % (now, ret)
              lastTime = now
              lastRx = int(match.group(1))
              lastTx = int(match.group(2))
              time.sleep(5)
            else:
              print emit()
        else:
          debug("%s failed matched %s and %s" % (repr(line), repr(bytesPat.pattern), repr(bytes2Pat.pattern)), 2)
  
  # emit()
