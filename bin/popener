#! /usr/bin/env python3

import logging
import argparse
import subprocess

def see(expr):
  value = eval(expr)
  logging.info('{expr}: {value!r}'.format(**locals()))

def dump(name):
  msgs = globals().get(name)
  log.info('{name}: {msgs!r}'.format(**locals()))

parser = argparse.ArgumentParser(description='A simple script that does subprocess.Popen() on a command')
parser.add_argument('-o', '--out', '--stdout', dest='stdout', action='store_true', help='trap stdout')
parser.add_argument('-e', '--err', '--stderr', dest='stderr', action='store_true', help='trap stderr')
parser.add_argument('pgm', metavar='pgm', help='Name of command to run')
parser.add_argument('args', metavar='arg', nargs='*', help='Arguments to command')
# parser.add_argument('-v', '--verbose', dest='verbose', action='store_true')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG)

p = subprocess.Popen([args.pgm] + args.args, stdout=subprocess.PIPE if args.stdout else None, stderr=subprocess.PIPE if args.stderr else None)
(stdout, stderr) = p.communicate()
rc = p.wait()

dump('stdout')
dump('stderr')
