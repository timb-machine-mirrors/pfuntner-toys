#! /usr/bin/env python3

import re
import sys
import signal
import logging
import argparse

potential_delimiters = '|%&$@#!/\\'
strip_leading_quote = re.compile('^ ')

parser = argparse.ArgumentParser(description='side diff parser')
parser.add_argument('-c', '--column', type=int, nargs='?', help='Specify an absolute column number for the channel (1=first column)')
parser.add_argument('-n', '--number', action='store_true', help='Number the lines')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if sys.stdin.isatty():
  parser.error('stdin must be redirected')

data = sys.stdin.read()
for delimiter in potential_delimiters:
  if delimiter not in data:
    break
else:
  log.error('Could not determine delimiter')
  exit(1)
log.debug(f'Your delimiter is {delimiter!r}')

lines = [line.expandtabs() for line in data.splitlines()]
if not lines:
  log.error('No lines to parse')
  exit(1)

max_width = max([len(line) for line in lines])
columns = []
for column in range(max_width):
  columns.append(set())
  for line in lines:
    columns[-1].add(line[column] if column < len(line) else None)

columns = list(enumerate(columns))
log.debug(f'columns: {columns}')

desired_chars = set([' ', '<', '>', '|', None])
channels = list([column for column in columns if column[1].issubset(desired_chars)])
log.info(f'First channels: {channels}')
if len(channels) > 1:
  # eliminate columns that are only blank/None
  pos = 0
  while pos < len(channels):
    if channels[pos][1].issubset(set([' ', None])):
      del channels[pos]
    else:
      pos += 1
  log.info(f'Second channels (no all-blanks): {channels}')

if args.column is not None:
  channels = [channel for channel in channels if channel[0] == args.column]

if len(channels) != 1:
  log.error('Could not determine channel in output')
  exit(1)

channel = channels[0][0]

for (pos, line) in enumerate(lines):
  log.debug(list(enumerate([c for c in line])))
  print(
    (str(pos+1)+delimiter if args.number else '') +
    line[:channel].rstrip() +
    delimiter +
    line[channel:channel+1].rstrip() +
    delimiter +
    strip_leading_quote.sub('', line[channel+1:]).rstrip()
  )
