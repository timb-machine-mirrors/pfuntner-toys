#! /usr/bin/env python2

"""
  Display portions of stdin through their specific line numbers (zero based), ranges of line numbers, and regular expressions

    rows 1:-2 # print lines 2 up through and including the next to last line
    row -v re=foo  # print all lines except those that match the regular expression `foo`
"""

import sys
import re
import getopt

def debug(msg):
  if verbose:
    sys.stderr.write('{msg}\n'.format(**locals()))

def see(expr):
  value = eval(expr)
  debug('{expr}: {value}'.format(**locals()))

def syntax(msg=None):
  if msg:
    sys.stderr.write('{msg}\n'.format(**locals()))
  sys.stderr.write('Syntax: {pgm} [-v|--negate] [-i|--immediate] [-d|--debug] [NUM[:NUM]] [re=REGEXP] ... \n'.format(pgm=sys.argv[0]))
  exit(1)

if sys.stdin.isatty():
  syntax('stdin must be redirected')

negate = False
immediate = False
verbose = False

(opts, args) = ([], [])
try:
  (opts, args) = getopt.getopt(sys.argv[1:], 'vid', ['negate', 'immediate', 'debug'])
except Exception as e:
  syntax('Caught `{e!s}`'.format(**locals()))

for (opt, arg) in opts:
  if opt in ['-v', '--negate']:
    negate = not negate
  elif opt in ['-i', '--immediate']:
    immediate = not immediate
  elif opt in ['-d', '--debug']:
    verbose = not verbose
  else:
    syntax('Unexpected option {opt!r}'.format(**locals()))

if not args:
  syntax('No ranges or regular expressions specified')

range_regexp = re.compile('^(-?\d+)(:(-?\d+))?$')
re_regexp = re.compile('^re=(.+)$')

lines = sys.stdin.read().splitlines()
count = len(lines)

def parse(arg):
  pos = int(arg)
  if pos < 0:
    pos = count + pos
  if (pos < 0) or (pos >= count):
    syntax('{arg!r} is an invalid position, there are only {count} lines'.format(count=count, **locals()))
  return pos

choices = [negate] * count
for arg in args:
  match = range_regexp.search(arg)
  if match:
    start = parse(match.group(1))
    if match.group(2):
      stop = parse(match.group(3))
    else:
      stop = start

    if stop < start:
      syntax('{arg!r} doesn\'t make sense with {count} lines'.format(**locals()))

    if immediate:
      for pos in range(count):
        see('pos, lines[pos], start <= pos <= stop, negate')
        if (start <= pos <= stop) != negate:
          print lines[pos]
    else:
      for pos in range(start, stop+1):
        choices[pos] = not negate
  else:
    match = re_regexp.search(arg)
    if match:
      regexp = re.compile(match.group(1))
      for (pos, line) in enumerate(lines):
        match = regexp.search(line)
        # print regexp.pattern, line, match
        if immediate:
          see('pos, line, match, negate')
          if bool(match) != negate:
            print lines[pos]
        else:
          if match:
            choices[pos] = not negate
    else:
      syntax('{arg!r} is not recognized')

if not immediate:
  for (pos, chosen) in enumerate(choices):
    if chosen:
      print lines[pos]
