#! /usr/bin/env python

import os
import sys
import time
import signal
import logging
import argparse

def timeout(signum, stack):
  log.debug('timeout')

def process(filename=None):
  if filename:
    stream = open(filename)
    signal.signal(signal.SIGALRM, timeout)
  else:
    stream = sys.stdin

  size = None
  while True:
    if filename:
      size = os.path.getsize(filename)
      signal.alarm(1)
    data = None
    data = stream.readline()
    if filename:
      signal.alarm(0)
    if data is not None:
      if data:
        sys.stdout.write(data)
      else:
        log.debug('sleeping at EOF')
        time.sleep(1)
        if filename and (size > os.path.getsize(filename)):
          sys.stderr.write('Rewinding file since it has decreased in size\n')
          stream.seek(0)
    elif filename:
      if size > os.path.getsize(filename):
        sys.stderr.write('Rewinding file since it has decreased in size\n')
        stream.seek(0)
  if filename:
    stream.close()

parser = argparse.ArgumentParser(description='Read a file continually')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('file', nargs='?', help='Path of file to read (if not reading stdin)')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

if args.file:
  process(args.file)
else:
  if sys.stdin.isatty():
    parser.error('stdin must be redirected if no file is specified')
  process()
