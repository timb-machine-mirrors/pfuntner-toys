#! /usr/bin/env python

"""
   Compare my tools/bin directory on the local machine with the contents of a directory on a remote machine.

   The current working directory should be the equivalent of tools/bin.

   A single `ssh` is done under the covers and it would be nice if ssh keys were enabled but it's ok if they are not.
"""

import re
import os
import hashlib
import logging
import argparse
import subprocess

def md5sum(filename):
  hash = hashlib.md5()
  with open(filename) as stream:
    hash.update(stream.read())
  return hash.hexdigest()

parser = argparse.ArgumentParser(description='Compare a local tools directory with a remote directory accessed via ssh')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('remote_dest', help='Remote destination user/system: USER@SYS, SYS')
parser.add_argument('remote_dir', help='Remote directory')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

cmd = ['ssh', args.remote_dest, 'cd {args.remote_dir!r}; md5sum *'.format(**locals())]
log.debug('cmd: {cmd}'.format(**locals()))
p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
(stdout, stderr) = p.communicate()
rc = p.wait()
log.debug('remote command returned {rc}, {stdout!r}, {stderr!r}'.format(**locals()))

remote = {}

for line in stdout.splitlines():
  match = re.match('(\S+)\s+(.+)$', line)
  log.debug('remote: {line!r} {groups}'.format(line=line, groups=match.groups() if match else None))
  if match:
    remote[match.group(2)] = match.group(1)

local = {}
for filename in os.listdir('.'):
  local[filename] = md5sum(filename)
  log.debug('local: {filename!r} {hash}'.format(hash=local[filename], **locals()))

  if filename in remote:
    if local[filename] == remote[filename]:
      print '+ {filename!r}'.format(**locals())
    else:
      print '- {filename!r} checksum mismatch'.format(**locals())
  else:
    print '- {filename!r} not at {args.remote_dest}:{args.remote_dir}'.format(**locals())

for filename in remote:
  if filename not in local:
    print '- {filename!r} not at local'.format(**locals())
