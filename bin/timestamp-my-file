#! /usr/bin/env python3

import re
import os
import signal
import logging
import argparse
import datetime
import subprocess

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))

  p = None
  try:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  except Exception as e:
    (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

  if p:
    if stdin:
      p.stdin.write(stdin.encode())
    if capture:
      (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    else:
      (stdout, stderr) = ('', '')
    rc = p.wait()

  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Add a timestamp to a filename')
parser.add_argument('files', metavar='file', nargs='+', help='One or more file names')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

rc = 0

now = datetime.datetime.now().strftime('_%Y-%m-%d_%H.%M.%S.%f')
regexp = re.compile(r'\d{4}-\d{2}-\d{2}_\d{2}\.\d{2}\.\d{2}\.\d{6}$')

for filename in args.files:
  if regexp.search(filename):
    log.warning(f'{filename} appears to already have timestamp')
    # this doesn't cause a non-zero exit status so we won't change `rc`
  elif os.path.exists(filename):
    (rc, stdout, stderr) = run(['mv', '-v', filename, filename + now])
    if rc == 0:
      print(stdout, end='')
    else:
      log.warning(f'Could not rename {filename}: {stderr or stdout!r}')
      rc = 1
  else:
    log.warning(f'Can not find {filename}')
    rc = 1

exit(rc)
