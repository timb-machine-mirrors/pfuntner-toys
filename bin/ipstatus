#! /usr/bin/env python2

import re
import time
import json
import datetime
import subprocess

# docker0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500
#         inet 172.17.0.1  netmask 255.255.0.0  broadcast 0.0.0.0
#         ether 02:42:05:f1:07:fc  txqueuelen 0  (Ethernet)
#         RX packets 0  bytes 0 (0.0 B)
#         RX errors 0  dropped 0  overruns 0  frame 0
#         TX packets 0  bytes 0 (0.0 B)
#         TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
# 
# eno1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
#         inet 192.168.2.3  netmask 255.255.255.0  broadcast 192.168.2.255
#         inet6 fe80::3bf4:564:ed63:d8c  prefixlen 64  scopeid 0x20<link>
#         ether f4:4d:30:6f:93:53  txqueuelen 1000  (Ethernet)
#         RX packets 21631323  bytes 22471609386 (22.4 GB)
#         RX errors 0  dropped 0  overruns 0  frame 0
#         TX packets 14072983  bytes 3069559814 (3.0 GB)
#         TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
#         device interrupt 16  memory 0xdc200000-dc220000  
# 
# lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
#         inet 127.0.0.1  netmask 255.0.0.0
#         inet6 ::1  prefixlen 128  scopeid 0x10<host>
#         loop  txqueuelen 1000  (Local Loopback)
#         RX packets 2308223  bytes 927988361 (927.9 MB)
#         RX errors 0  dropped 0  overruns 0  frame 0
#         TX packets 2308223  bytes 927988361 (927.9 MB)
#         TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
# 
# wlp58s0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500
#         ether f8:63:3f:3a:44:d1  txqueuelen 1000  (Ethernet)
#         RX packets 0  bytes 0 (0.0 B)
#         RX errors 0  dropped 0  overruns 0  frame 0
#         TX packets 0  bytes 0 (0.0 B)
#         TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
# 

def dump(attrs):
  if "name" in attrs and (not (any([ignoreAdapter.search(attrs["name"]) != None for ignoreAdapter in ignoreAdapters]) or ("LOOPBACK" in attrs["status"]))):
    print json.dumps(attrs, sort_keys=True)

epoch = datetime.datetime.fromtimestamp(0)

header = re.compile("(\w+): flags=\d+<([^>]+)>")
ignoreAdapters = [re.compile("^docker"), re.compile("^lo$"), re.compile("^wlp")]
parenthesized = re.compile("(^\()|(\)$)")

while True:
  now = (datetime.datetime.now() - epoch).total_seconds()
  
  cmd = ["ifconfig"]
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = p.communicate()
  rc = p.wait()
  assert (rc == 0) and (not stderr), "%s failed: %d, %s, %s" % (rc, repr(stdout), repr(stderr))
  
  attrs = {"time": now}
  
  for line in stdout.split('\n'):
    match = header.match(line)
    if match:
      dump(attrs)
      attrs = {"time": now}
      attrs["name"] = match.group(1)
      attrs["status"] = match.group(2).split(',')
    else:
      words = line.split()
      pos = 0
  
      if len(words) and (words[0] in ["TX", "RX"]):
        prefix = "%s " % words[0]
        pos += 1
      else:
        prefix = ""
  
      while (pos + 1) < len(words):
        if parenthesized.search(words[pos]):
          pos += 1
        else:
          attrs["%s%s" % (prefix, words[pos])] = words[pos+1]
          pos += 2
  
  dump(attrs)
  time.sleep(1)
