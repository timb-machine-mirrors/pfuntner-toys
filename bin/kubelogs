#! /usr/bin/env python2

import json
import logging
import argparse
import subprocess

def run(cmd):
  global sudo

  (rc, stdout, stderr) = (-1, '', '')
  cmd = cmd.split()
  while True:
    if sudo:
      cmd.insert(0, 'sudo')
    try:
      p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except Exception as e:
      log.critical('Caught {e!s} executing {cmd}'.format(**locals()))
      exit(1)
    (stdout, stderr) = p.communicate()
    rc = p.wait()
    log.info('with sudo={sudo}, {cmd} returned: {rc}, {stdout!r}, {stderr!r}'.format(sudo=sudo, **locals()))
    if rc == 0:
      sudo = bool(sudo)
      break
    else:
      if sudo is None:
        sudo = True
      else:
        break
  return (rc, stdout, stderr)
  
parser = argparse.ArgumentParser(description='Get logs from Kubernetes pods')
parser.add_argument('pods', metavar='pod', nargs='*', help='Zero or more Kubernetes pods')
parser.add_argument('-j', '--json', action='store_true', help='Show logs in JSON form')
parser.add_argument('-v', '--verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

log.info(args)

"""
   sudo is `trinary`.  Conceptually, it's a boolean value:
     True: sudo is needed to run kubectl
     False: sudo is not needed to run kubectl
   The initial value is None until the first time run() is used and it's determined if sudo is needed or not.
"""
sudo = None

if not args.pods:
  cmd = 'kubectl get pods -o json'
  (rc, stdout, stderr) = run(cmd)
  if rc == 0:
    resp = json.loads(stdout)
    args.pods = [pod.get('metadata', {}).get('name') for pod in resp.get('items', [])]
  else:
    log.error('{cmd} failed: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
    exit(1)

if not args.pods:
  log.warning('Note: no pods specified - use --all to process all pods')

out = {}
for pod in args.pods:
  cmd = 'kubectl logs {pod}'.format(**locals())
  (rc, stdout, stderr) = run(cmd)
  if rc == 0:
    stdout = stdout.splitlines()
    if args.json:
      out[pod] = stdout
    else:
      if stdout:
        print '\n'.join(['{pod}: {line}'.format(**locals()) for line in stdout])
      else:
        log.warning('No log from {pod}'.format(**locals()))
  else:
    log.error('{cmd} failed: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
    exit(1)

if args.json:
  print json.dumps(out, indent=2, sort_keys=True)
