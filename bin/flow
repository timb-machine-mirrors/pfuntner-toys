#! /usr/bin/env python3
import sys
import os
import math
import signal
import logging
import argparse

from Decolorizer import *
from BrunoUtils import *

def get(row, col):
  global orientation, rows, cols, data, colsInLastRow
  if args.horizontal:
    pos = row*cols + col
    if pos >= len(data):
      return ""
    else:
      return data[pos]
  else:
    isLastRow = row+1 == rows
    if isLastRow:
      if (col>=colsInLastRow):
        return ""
      else:
        return data[col*rows + row]
    else:
      if col < colsInLastRow:
        return data[col*rows + row]
      else:
        return data[col*(rows-1) + row + colsInLastRow]

parser = argparse.ArgumentParser(description='Flow lines into a grid/table')

group = parser.add_mutually_exclusive_group()
group.add_argument('-V', '--vertical', action='store_true', help='Display elements vertically (default mode)')
group.add_argument('-H', '--horizontal', action='store_true', help='Display elements horizontally')

parser.add_argument('-s', '--separator', default='  ', help='Desired width of grid/table lines')
parser.add_argument('-w', '--width', type=int, default=BrunoUtils.cols(), help='Width of lines (default: {})'.format(BrunoUtils.cols()))
parser.add_argument('items', metavar='item', nargs='*', help='Zero or more items')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if not any([args.horizontal, args.vertical]):
  args.vertical = True

data = []
maxWidth = 1

if len(args.items) == 0:
  if sys.stdin.isatty():
    parser.error('Cowardly refusing to read from the terminal!')

  # data comes from stdin
  decolorizer = Decolorizer()
  for line in sys.stdin.read().splitlines():
    line = decolorizer.process(line.strip())
    if line:
      # line = line.translate(None, "\n")
      if len(line) > maxWidth:
        maxWidth = len(line)
      data.append(line)
elif len(args.items) > 1:
  for datum in args.items:
    if len(datum) > maxWidth:
      maxWidth = len(datum.strip())

log.info("items: %d" % len(data))
log.info("width: %d" % args.width)
log.info("max width: %d" % maxWidth)

curr = maxWidth
cols = 1
step = maxWidth + len(args.separator)
log.info("step: %d" % step)
while (curr + step) < args.width and (cols < len(data)):
  curr += step
  cols += 1
  log.info("%d columns take up %d bytes" % (cols, curr))

colsInLastRow = len(data) % cols
if colsInLastRow == 0:
  colsInLastRow = cols
log.info("colsInLastRow: %d" % colsInLastRow)

log.info("columns: %d" % cols)
rows = int(math.ceil((len(data) * 1.0) / cols))
log.info("rows: %d" % rows)

for row in range(rows):
  for col in range(cols):
    if col > 0:
      sys.stdout.write(args.separator)
    sys.stdout.write("%-*s" % (maxWidth, get(row, col)))
  sys.stdout.write("\n")
