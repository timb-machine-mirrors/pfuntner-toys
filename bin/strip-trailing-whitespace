#! /usr/bin/env python3

import re
import sys
import signal
import logging
import argparse

def describe(src):
  return filename if isinstance(src, str) else "stdin"

def process(src):
  log.debug(f'Processing {describe(src)!r}')

  try:
    stream = open(src) if isinstance(src, str) else src
    lines = stream.read().splitlines()
  except Exception as e:
    log.warning(f'Could not process {describe(src)!r}: {e!s}')
    return

  hits = 0
  long_lines = list()
  for (linenum, line) in enumerate(lines):
    if regexp.search(line):
      hits += 1
      if args.long:
        long_lines.append(f'{describe(src)}:{linenum+1}: {line!r}')
      if not args.dry_run:
        lines[linenum] = regexp.sub('', line)

  if (hits or not args.quiet):
    log.info(f'{describe(src)}: {len(lines)} total lines, {hits} lines with trailing whitespace')
  if args.long:
    for long_line in long_lines:
      log.info(f'  {long_line}')

  if not args.dry_run:
    if isinstance(src,str) and hits == 0:
      log.debug(f'No changes to {filename!r}')
    else:
      out_stream = open(src, 'w') if isinstance(src, str) else sys.stdout
      out_stream.write('\n'.join(lines) + '\n')
      if isinstance(src,str):
        out_stream.close()

parser = argparse.ArgumentParser(description='Strip trailing whitespace')
parser.add_argument('files', metavar='file', nargs='*', help='Zero or more paths to files to process')
parser.add_argument('--dry-run', action='store_true', help='Do not make changes, only report changes')
parser.add_argument('-l', '--long', action='store_true', help='Report on each line being updated')
parser.add_argument('-q', '--quiet', action='store_true', help='Do not report on files that don\'t have trailing blanks')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.INFO - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

regexp = re.compile(r'\s+$')

if args.files:
  for filename in args.files:
    process(filename)
else:
  if args.dry_run:
    log.warning('Note: --dry-run has no meaning when reading from stdin')
  if sys.stdin.isatty():
    parser.error('stdin must be redirected if not filenames are specified')
  process(sys.stdin)
