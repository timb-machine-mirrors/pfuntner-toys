#! /usr/bin/env python3

import re
import sys
import json
import time
import logging
import argparse
import datetime
import subprocess

from table import Table

parser = argparse.ArgumentParser(description='Ping remote systems using Ansible')
parser.add_argument('hosts', metavar='host', nargs='*', help='List of hosts to ping')
parser.add_argument('-v', '--verbose', action='store_true', help='Enable debugging')
parser.add_argument('-c', '--continuous', action='store_true', help='Repeat continually')
parser.add_argument('-w', '--wait', action='store_true', help='Repeat until all are successful')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

"""
rhel7 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python"
    },
    "changed": false,
    "ping": "pong"
}
rhel8_hardened | UNREACHABLE! => {
    "changed": false,
    "msg": "Failed to connect to the host via ssh: ssh: connect to host 3.83.112.73 port 22: Connection refused",
    "unreachable": true
}
"""

header_regexp = re.compile('^(\S+)\s+\|\s+(\S+)\s+=>\s+{')
cmd = ('ansible {hosts} -m ping'.format(hosts=','.join(args.hosts) if args.hosts else 'all')).split()
log.debug(cmd)

buf = ''
while True:
  print(str(datetime.datetime.now()))
  hosts = []
  all_success = True
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = p.communicate()
  rc = p.wait()
  log.debug('{rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  if (not stdout) and stderr:
    sys.stderr.write(stderr)
    break

  for line in stdout.splitlines():
    match = header_regexp.search(line)
    if match:
      buf = '{'
      host = match.group(1)
      success = match.group(2) == 'SUCCESS'
      all_success &= success
    elif buf:
      buf += line
      if line == '}':
        resp = json.loads(buf)
        log.debug('{host} {success} {resp}'.format(**locals()))
        hosts.append((host, str(success), resp.get('ansible_facts', {}).get('discovered_interpreter_python') if success else resp.get('msg', '')))

  table = Table('host', 'status', 'message')
  for host in sorted(hosts, key=lambda host_tuple: host_tuple[0]):
    table.add(host)
  print(str(table))

  if args.wait:
    if all_success:
      break
  elif not args.continuous:
    break
  print('')
  time.sleep(15)
