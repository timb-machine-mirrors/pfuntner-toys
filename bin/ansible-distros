#! /usr/bin/env python3

import re
import json
import logging
import argparse
import subprocess

from table import Table

def run(cmd):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  # alternately, if trapping is conditional:
  # if trap:
  #   stdout = stdout.decode('utf-8')
  #   stderr = stderr.decode('utf-8')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Display Ansible distro information')
parser.add_argument('nodes', nargs='+', help='One or more nodes')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

regexp = re.compile('^(\S+)\s+\|\s+SUCCESS\s+=>\s+{$')

(rc, stdout, stderr) = run('ansible {nodes} -m setup'.format(nodes=','.join(args.nodes)))
if rc == 0 and stdout:
  table = Table('Node', 'OS Family', 'Distro', 'Version', 'Major Version', 'Package Manager', 'Service Manager')
  node = None
  buf = []
  for line in stdout.splitlines():
    match = regexp.search(line)
    if match:
      node = match.group(1)
      buf.append('{')
    elif node:
      buf.append(line)
      if line == '}':
        setup = json.loads('\n'.join(buf))
        # print(json.dumps(setup, indent=2, sort_keys=True), end='')

        # /ansible_facts/ansible_os_family 'Debian'
        table.add(
          node,
          setup['ansible_facts']['ansible_os_family'],
          setup['ansible_facts']['ansible_distribution'],
          setup['ansible_facts']['ansible_distribution_version'],
          setup['ansible_facts']['ansible_distribution_major_version'],
          setup['ansible_facts']['ansible_pkg_mgr'],
          setup['ansible_facts']['ansible_service_mgr']
        )
        node = None
        buf = []
  print(str(table), end='')
