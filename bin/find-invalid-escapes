#! /usr/bin/env python3

import os
import re
import sys
import signal
import logging
import argparse

# import bruno_tools

def show(name, pos, data, newlines):
  for (currpos, curr) in enumerate(newlines):
    if pos < curr:
      print(f'{name + ":" if name else ""}{currpos+1:<5} {data[0 if currpos == 0 else newlines[currpos-1]+1:curr]}')
      return

def process(source):
  if isinstance(source, str):
    if os.path.exists(source):
      stream = open(source)
    else:
      log.warning(f'Not found: {source!r}')
      stream = None
  else:
    stream = source

  if stream:
    try:
      data = stream.read()
    except Exception as e:
      log.warning(f'Could not read from {source if isinstance(source,str) else "stdin"!r}: {e!s}')
      data = None

    if data:
      newlines = [curr.start(0) for curr in re.finditer('\n', data)]
      quote = None
      raw = False
      pos = 0
      while pos < len(data):
        c = data[pos]
        log.debug(f'{pos=} {c=} {quote=} {data[pos:][:5]=}')
        if quote:
          if c == quote:
            quote = None
            raw = False
          elif quote in ["'''", '"""'] and data[pos:pos+3] == quote:
            quote = None
            raw = False
          elif data[pos:pos+2] == '\\\\':
            pos += 1
          else:
            if c == '\\' and pos < len(data)-1:
              if data[pos+1] not in [quote, 'n', 'o', 'r', 't', 'x'] and not raw:
                if args.list:
                  print(source)
                  return
                show(source if isinstance(source, str) else None, pos, data, newlines)
              pos += 1
        elif c in ['"', "'"]:
          if data[pos:pos+3] == c*3:
            quote = c*3
            pos += 2
          else:
            quote = c
          raw = pos > 0 and data[pos-1] == 'r'

        pos += 1

  if isinstance(source, str) and stream:
    stream.close()

parser = argparse.ArgumentParser(description='Find invalid escaped sequences in Python scripts')
parser.add_argument('filenames', metavar='filename', nargs='*', help='Zero or more file names')
parser.add_argument('-l', '--list', action='store_true', help='List files only')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if args.filenames:
  for filename in args.filenames:
    process(filename)
else:
  if sys.stdin.isatty():
    parser.error('stdin must be directed if no file names are specified')
  if args.list:
    parser.error('--list is incompatible with reading from stdin')
  process(sys.stdin)
