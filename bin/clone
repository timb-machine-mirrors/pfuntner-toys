#! /usr/bin/env python3

"""
  This is a quick and dirty script to `clone` (copy byte-by-byte) files from anywhere to the current working directory.

  I created this script because I was trying to use chmod to protect some *.pem files in Windoze but I think I did chmod 700 on the parent directory but that made it difficult to create new files or write to old ones for some stupid reason.  I figured what I did would have no trouble in Unix but Windoze didn't care for my shenanighans.  I was doing chmod on files and the permissions wouldn't "stick".  Another reason to despise Windoze?

  So I wanted to keep the content of those messed up files but I wanted to kind of start over with default permissions.  I used this script to copy the files to a new directory and just did a chmod on only the *.pem files.  The *.pem files worked with ssh and I just replaced the old directory that had suspicious permissions with the new directory.
"""

import os
import sys
import logging
import argparse

parser = argparse.ArgumentParser(description='Clone files to the current working directory')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('files', metavar='file', nargs='+', help='One or more files to clone')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

for path in args.files:
  if os.path.exists(path):
    file_name = os.path.basename(path)
    if not os.path.exists(file_name):
      log.info('{path!r} => {file_name!r}'.format(**locals()))
      with open(path) as reader:
        with open(file_name, 'w') as writer:
          writer.write(reader.read())
    else:
      log.warning('{file_name!r} already exists'.format(**locals()))
  else:
    log.warning('Could not find {path!r}'.format(**locals()))
