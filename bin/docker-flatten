#! /usr/bin/env python3

import sys
import json
import signal
import logging
import argparse

import bruno_tools

parser = argparse.ArgumentParser(description='Flatten a container image - multiple layers to one layer')
parser.add_argument('starting_image', metavar='starting-image', help='Starting image - presumably with multiple layers')
parser.add_argument('new_image', metavar='new-image', nargs='?', help='New image to create - the default is the same as the starting image but with the tag `flattened`')
parser.add_argument('-r', '--replace', action='store_true', help='Use name of starting image for flattened image')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if args.new_image and args.replace:
  parser.error('--replace and new-image are mutually exclusive')

starting_image_tokens = args.starting_image.split(':')
if len(starting_image_tokens) == 1:
  starting_image_tokens.append('latest')
elif len(starting_image_tokens) > 2:
  parser.error(f'Illegal tag {args.starting_image!r}')

new_image = ':'.join(starting_image_tokens) if args.replace else (args.new_image if args.new_image else f'{starting_image_tokens[0]}:flattened')

inspect_command = ['docker', 'inspect', args.starting_image]
(inspect_rc, inspect_stdout, inspect_stderr) = bruno_tools.run(inspect_command, log=log)
if inspect_rc == 0 and inspect_stdout:
  image_details = json.loads(inspect_stdout)[0]

  run_command = ['docker', 'run', '-dit', '--rm', '--entrypoint', 'sh', args.starting_image]
  (run_rc, run_stdout, run_stderr) = bruno_tools.run(run_command, log=log)
  if run_rc == 0 and run_stdout:
    container_id = run_stdout.strip()

    """
      $ docker export --help

      Usage:  docker export [OPTIONS] CONTAINER

      Export a container's filesystem as a tar archive

      Aliases:
        docker container export, docker export

      Options:
        -o, --output string   Write to a file, instead of STDOUT
      $



      $ docker import --help

      Usage:  docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]

      Import the contents from a tarball to create a filesystem image

      Aliases:
        docker image import, docker import

      Options:
        -c, --change list       Apply Dockerfile instruction to the created image
        -m, --message string    Set commit message for imported image
            --platform string   Set platform if server is multi-platform capable
      $
    """

    """
      /0/Architecture 'amd64'
      /0/Author ''
      /0/Comment ''
      /0/Config/AttachStderr False
      /0/Config/AttachStdin False
      /0/Config/AttachStdout False
      /0/Config/Cmd/0 '/bin/bash'
      /0/Config/Domainname ''
      /0/Config/Entrypoint None
      /0/Config/Env/0 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
      /0/Config/Hostname 'c11d143fb16b'
      /0/Config/Image 'almalinux:9'
      /0/Config/Labels/cloud9_vin '651a8f7fb0f0e03bc170f422'
      /0/Config/OnBuild None
      /0/Config/OpenStdin True
      /0/Config/StdinOnce False
      /0/Config/Tty True
      /0/Config/User ''
      /0/Config/Volumes None
      /0/Config/WorkingDir ''
      /0/Container 'c11d143fb16b850dd56faee470893fb1576d18413d4de144a414f320c6fd46dc'
      /0/ContainerConfig/AttachStderr False
      /0/ContainerConfig/AttachStdin False
      /0/ContainerConfig/AttachStdout False
      /0/ContainerConfig/Cmd/0 '/bin/bash'
      /0/ContainerConfig/Domainname ''
      /0/ContainerConfig/Entrypoint None
      /0/ContainerConfig/Env/0 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
      /0/ContainerConfig/Hostname 'c11d143fb16b'
      /0/ContainerConfig/Image 'almalinux:9'
      /0/ContainerConfig/OnBuild None
      /0/ContainerConfig/OpenStdin True
      /0/ContainerConfig/StdinOnce False
      /0/ContainerConfig/Tty True
      /0/ContainerConfig/User ''
      /0/ContainerConfig/Volumes None
      /0/ContainerConfig/WorkingDir ''
      /0/Created '2023-10-02T10:42:15.173720796Z'
      /0/DockerVersion '24.0.6'
      /0/GraphDriver/Data/LowerDir '/var/lib/docker/overlay2/3bb979ab04136297647ce0fbd006dd7b809d39c402f021a9958ac03af48efcee/diff'
      /0/GraphDriver/Data/MergedDir '/var/lib/docker/overlay2/7f95c57eed30a61a3deb22a79058970d1bce06ea59f5bedf0e6a0ba857cbff49/merged'
      /0/GraphDriver/Data/UpperDir '/var/lib/docker/overlay2/7f95c57eed30a61a3deb22a79058970d1bce06ea59f5bedf0e6a0ba857cbff49/diff'
      /0/GraphDriver/Data/WorkDir '/var/lib/docker/overlay2/7f95c57eed30a61a3deb22a79058970d1bce06ea59f5bedf0e6a0ba857cbff49/work'
      /0/GraphDriver/Name 'overlay2'
      /0/Id 'sha256:381429ad3cc1a8eae4a945c0056e7a20e20428459accd8ed9a494b5a800a28dd'
      /0/Metadata/LastTagTime '0001-01-01T00:00:00Z'
      /0/Os 'linux'
      /0/Parent ''
      /0/RepoDigests/0 'containers.cisco.com/sto-ccc-cloud9/hardened_almalinux@sha256:e87c1afa35fa0fc0f8df1dcecb6a4fe42c024549d2d0d1bb22a70e9d9f0c459f'
      /0/RepoTags/0 'containers.cisco.com/sto-ccc-cloud9/hardened_almalinux:latest'
      /0/RootFS/Layers/0 'sha256:6dca6b3e8763b43b544d2d7550cac1c92ce87f750519fbe6d931faf117c68a6b'
      /0/RootFS/Layers/1 'sha256:091482be6a9bead8013ffb80cfdaa84635bdd424a8b0052e6c0c231d8430b2df'
      /0/RootFS/Type 'layers'
      /0/Size 268098891
      /0/VirtualSize 268098891
    """

    flatten_shell_command = f'docker export {container_id} | docker import'

    flatten_shell_command += f' --platform {image_details.get("Architecture", "amd64")}'

    entrypoint = image_details['Config'].get('Entrypoint')
    if entrypoint:
      flatten_shell_command += f' --change "ENTRYPOINT {entrypoint}"'

    # https://docs.docker.com/engine/reference/builder/ states the prefered form is: CMD ["executable","param1","param2"]
    cmd = image_details['Config'].get('Cmd', [])
    if cmd:
      flatten_shell_command += ' --change \'CMD [' + ', '.join([f'"{token}"' for token in cmd]) + ']\''

    environment_variables = image_details['Config'].get('Env', [])
    for environment_variable in environment_variables:
      flatten_shell_command += ' --change ' + repr(f'ENV {environment_variable}')

    user = image_details['Config'].get('User')
    if user:
      flatten_shell_command += f' --change "USER {user}"'

    labels = image_details['Config'].get('Labels', [])
    for (label_name, label_value) in labels.items():
      flatten_shell_command += ' --change ' + repr(f'LABEL {label_name}={label_value!r}')

    flatten_shell_command += f' - {new_image}'

    flatten_command = [
      'bash',
      '-c',
      flatten_shell_command,
    ]

    (flatten_rc, flatten_stdout, flatten_stderr) = bruno_tools.run(flatten_command, log=log)
    if flatten_rc != 0:
      log.error(f'{flatten_command} failed: {flatten_rc=}, {flatten_stdout=!r}, {flatten_stderr=!r}')

    command = ['docker', 'rm', '-f', container_id]
    (rm_rc, rm_stdout, rm_stderr) = bruno_tools.run(command, log=log)
    if rm_rc != 0 or rm_stderr:
      log.error(f'{command} failed: {rm_rc=}, {rm_stdout=!r}, {rm_stderr=!r}')
      exit(1)

    if flatten_rc != 0 or flatten_stderr:
      exit(1)
  else:
    log.error(f'{run_command} failed: {run_rc=}, {run_stdout=!r}, {run_stderr=!r}')
    exit(1)
else:
  log.error(f'{inspect_command!r} failed: {inspect_rc=}, {inspect_stdout=!r}, {inspect_stderr=!r}')
  exit(1)
