#! /usr/bin/env python3

import os
import re
import sys
import logging
import argparse
import datetime
import subprocess

from table import Table

def run(cmd, readonly=True):
  (rc, stdout, stderr) = (None, '', '')
  if (not args.dry_run) or readonly:
    if isinstance(cmd, str):
      cmd = cmd.split()
    log.info('Executing {cmd}'.format(**locals()))
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (stdout, stderr) = p.communicate()
    stdout = stdout.decode('utf-8')
    stderr = stderr.decode('utf-8')
    rc = p.wait()
    log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)
  
def extract(s, regexp):
  ret = None
  match = regexp.search(s)
  if match:
    ret = match.group(1)

  log.debug('Extracted {ret!r} from {s!r} using pattern {regexp.pattern}'.format(**locals()))
  return ret

def get_branch():
  ret = None
  (rc, stdout, stderr) = run('git branch')
  for line in stdout.splitlines():
    if line and line[0] == '*':
      ret = line.split()[1]
  log.debug('get_branch() returning {ret!r}'.format(**locals()))
  return ret
    
def get_last_commit():
  """
    commit 00568eee3320fd22d2f1fa471a9312946df44fcb
    Author: belscher <belscher@cisco.com>
    Date:   Thu Dec 5 10:02:35 2019 -0500
    
        CCC-1535: December release (#182)
  """
  date = None
  sha1 = None
  text = []
  (rc, stdout, stderr) = run('git log -1')
  for line in stdout.splitlines():
    sha1 = sha1 or extract(line, sha1_regexp)
    date = date or extract(line, date_regexp)
    s = extract(line, text_regexp)
    if s != None or text:
      text.append(s)

  if date:
    date = datetime.datetime.strptime(date, '%a %b %d %H:%M:%S %Y').isoformat()

  if text:
    text = '\n'.join(text)[:20]
 
  log.debug('get_last_commit() returning date={date}, sha1={sha1}, text={text}'.format(**locals()))
  return (date, sha1[:7], text)
  
parser = argparse.ArgumentParser(description='Refresh git repositories')
parser.add_argument('root', nargs='?', help='Root in which to find repos (default: {HOME}/repos'.format(**os.environ))
parser.add_argument('-b', '--branch', action='store_true', help='Do not require master branch')
parser.add_argument('-d', '--dry-run', action='store_true', help='Perform no git operations')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()

if args.dry_run and not args.verbose:
  log.setLevel(logging.INFO)
else:
  log.setLevel(logging.WARNING - (args.verbose or 0)*10)

sha1_regexp = re.compile('commit ([0-9a-f]{40})$')
date_regexp = re.compile('^Date:\s*([a-z]{3} [a-z]{3} \d{1,2} \d{2}:\d{2}:\d{2} \d{4})', flags=re.IGNORECASE)
text_regexp = re.compile('^\s+(\S?.*)$')
up_to_date_regexp = re.compile('^Already up[- ]to[- ]date\.$')

if not args.root:
  args.root = os.path.join(os.environ['HOME'], 'repos')

if os.path.exists(args.root):
  if os.path.isdir(args.root):
    cwd = os.getcwd()
    table = Table('Path', 'Branch', 'Old SHA1', 'Old Date', 'Old Text', 'New SHA1', 'New Date', 'New Text')
    for filename in os.listdir(args.root):
      cols = ['']*8
      path = os.path.join(args.root, filename)
      realpath = os.path.realpath(path)
      if os.path.isdir(path) and os.path.isdir(os.path.join(path, '.git')):
        log.info('Processing {path!r} ({realpath!r})'.format(**locals()))
        os.chdir(path)
        branch = get_branch()
        (date, sha1, text) = get_last_commit()
        cols = [path, branch, sha1, date, text]
        if not args.dry_run:
          if (branch == 'master') or args.branch:
            (rc, stdout, stderr) = run('git pull', readonly=False)
            sys.stdout.write(stdout)
            sys.stderr.write(stderr)
            if not up_to_date_regexp.search(stdout.strip()):
              (date, sha1, text) = get_last_commit()
              cols += [date, sha1, text]
            else:
              cols += ['']*3
          else:
            cols += ['']*3
        else:
          cols += ['']*3
        log.info(f'cols: {cols}')
        table.add(cols)
        os.chdir(cwd)
      else:
        log.info('{path!r} ({realpath!r}) is not a git repository'.format(**locals()))
    print(str(table), end='')
  else:
    parser.error('{args.root!r} is not a directory'.format(**locals()))
else:
  parser.error('{args.root!r} does not exist'.format(**locals()))
