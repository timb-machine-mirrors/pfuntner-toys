#! /usr/bin/env python3

import re
import time
import signal
import logging
import datetime
import argparse

def duration_component_pattern(amt, suffix):
  ################################################################################
  # Generate a portion of a pattern to be used with two or more components. The  #
  # suffix can be 1-character in length up to the entire length.                 #
  #                                                                              #
  # For example:                                                                 #
  #                                                                              #
  #   duration_component_pattern('\d+', 'days') => '(?:\d+\s*d(?:a(?:ys?)?)?)'   #
  ################################################################################
  pattern = ''
  for c in suffix[-1:0:-1]:
    if pattern:
      pattern = f'(?:{c}{pattern})?'
    else:
      pattern = f'{c}?'
  pattern = '(?:(' + amt + ')\s*' + suffix[0] + pattern + ')?'
  return pattern

def parse_count_down(s):
  stop_time = None

  if not s:
    parser.error('A time specification is expected')

  # pattern = '(\d*)\s*days (\d*)\s*hours (\d*)\s*minutes (\d*)\s*seconds'
  pattern = '^' + duration_component_pattern(r'\d+', 'days') + r'\s*' +duration_component_pattern(r'\d+', 'hours') + r'\s*' +duration_component_pattern(r'\d+', 'minutes') + r'\s*' +duration_component_pattern(r'\d*.?\d*', 'seconds') + r'\s*' + '$'
  # log.info(f'Pattern: {pattern!r}')

  match = re.search(pattern, s, flags=re.IGNORECASE)
  if match and any(match.groups()) and match.group(4) != '.':
    log.info(f'From {pattern!r}: {match.groups()}')
    stop_time = start_time + datetime.timedelta(days=int(match.group(1) or 0), hours=int(match.group(2) or 0), minutes=int(match.group(3) or 0), seconds=float(match.group(4) or 0))
  else:
    log.info(f'No match from {pattern!r}')

  if not stop_time:
    parser.error(f'{s!r} is not a valid count until time specification')

  return stop_time

def parse_count_until(s):
  stop_time = None

  pattern = r'^(?:(\d{4})-(\d{2})-(\d{2})\s+)?(\d{2}):(\d{2})(?::(\d{2}))?$'
  match = re.search(pattern, s)
  if match:
    log.info(f'From {pattern!r}: {match.groups()}')
    if not match.group(1):
      s = start_time.strftime('%Y-%m-%d ') + s
    if not match.group(6):
      s += ':00'
    stop_time = datetime.datetime.strptime(s, '%Y-%m-%d %H:%M:%S')
    if not match.group(1) and stop_time < start_time:
      log.info('adjusting stop time to tomorrow')
      stop_time += datetime.timedelta(days=1)

  if not stop_time:
    parser.error(f'{s!r} is not a valid count until time specification')

  return stop_time

def sigint_handler(sig, stack_frame):
  global done
  log.info('Handling SIGINT')
  done = True

parser = argparse.ArgumentParser(description='Command line alarm clock')

group = parser.add_mutually_exclusive_group(required=True)
group.add_argument('--up', '--count-up', action='store_true', help='Run until stopped')
group.add_argument('--down', '--count-down', action='store_true', help='Run for a specified time')
group.add_argument('--until', action='store_true', help='Run until a specified time')

parser.add_argument('time', nargs='?', help='Time specification')
parser.add_argument('-i', '--interval', type=float, default=5, help='Interval between messages in seconds (default: 5)')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))
signal.signal(signal.SIGINT, sigint_handler)

start_time = datetime.datetime.now()
log.info(f'start time: {start_time!s}')

if args.up:
  if args.time:
    parser.error('A time specification is not expected')
  stop_time = None
  total_elapsed = None
elif args.down:
  stop_time = parse_count_down(args.time)
  total_elapsed = stop_time - start_time
elif args.until:
  stop_time = parse_count_until(args.time)
  total_elapsed = stop_time - start_time

log.info(f'stop time: {stop_time!s}')

closed = u'\u2612'
open = u'\u2610'

done = False
while not done:
  now = datetime.datetime.now()
  if (not args.up) and now > stop_time:
    break

  output_line = ''

  ################################################################################
  # current time                                                                 #
  ################################################################################
  output_line += now.isoformat().replace('T', ' ')

  ################################################################################
  # elapsed time                                                                 #
  ################################################################################
  curr_elapsed = now - start_time
  output_line += '  ' + str(curr_elapsed)

  if not args.up:
    ################################################################################
    # remaining time                                                               #
    ################################################################################
    output_line += '  ' + str(stop_time - now)

    ################################################################################
    # percent elapsed                                                              #
    ################################################################################
    pcent = curr_elapsed / total_elapsed
    output_line += f'  {pcent:6.2%}'

    ################################################################################
    # progress bar                                                                 #
    ################################################################################
    output_line += f'  {closed*int(10*pcent)}{open*int(10*(1-pcent))}'

  print(output_line)
  time.sleep(args.interval)
