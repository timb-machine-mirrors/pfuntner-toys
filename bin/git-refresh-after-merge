#! /usr/bin/env python3

import re
import sys
import signal
import logging
import argparse
import subprocess

def run(cmd, capture=True):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None)
  if capture:
    (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  else:
    (stdout, stderr) = ('', '')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Refresh your master git branch after merging a feature branch')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

(rc, stdout, stderr) = run('git branch')
if rc == 0:
  match = re.search(r'^\*\s+(.*)$', stdout, flags=re.MULTILINE)
  if match:
    branch = match.group(1)
    log.info(f'Current branch is {branch!r}')
    if branch != 'master':
      (rc, stdout, stderr) = run('git checkout master', capture=False)
      if rc == 0:
        (rc, stdout, stderr) = run('git pull', capture=False)
        if rc == 0:
          (rc, stdout, stderr) = run('git log -1')
          print(stdout, end='')
          sys.stderr.write(stderr)

          print(f'Master branch pulled.  Shall I remove {branch!r}? ', end='', flush=True)
          if re.match('y(e(s)?)?$', sys.stdin.readline().strip(), flags=re.IGNORECASE):
            (rc, stdout, stderr) = run(['git', 'branch', '-D', branch], capture=False)
            exit(rc)
          else:
            print(f'{branch!r} branch was not removed!')
        else:
          print('Could not pull master branch')
          exit(rc)
      else:
        print('Could not checkout master branch')
        exit(rc)
    else:
      print('You are already in the master branch')
      exit(1)
  else:
    print(f'Could not determine branch from: {stdout!r}')
    exit(1)
else:
  print(f'`git branch` failed: {stdout!r} {stderr!r}')
  exit(1)
