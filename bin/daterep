#! /usr/bin/env python3

"""
   Replace a timestamp expressed as seconds second the epoch with a more meaningful string of
   the format "YYYY-mm-dd HH:MM:SS".

   The script assumes that the number of seconds is expressed in 10 decimal digits.  This is
   sufficient to handle "2001-09-08 21:46:40" <= date <= "2286-11-20 12:46:39".  The upper bound
   shouldn't be a problem but the lower bound could be a little more problematic.  Typically, the
   script will be used on log files since they love to express dates in seconds and this may not
   prove to be an issue.
"""

import re
import sys
import getopt
import datetime

"""
1541419453.686956
"""

def debug(msg=None):
  if verbose:
    sys.stderr.write('{msg}\n'.format(**locals()))

def syntax(msg=None):
  if msg:
    sys.stderr.write('{msg}\n'.format(**locals()))
  sys.stderr.write('Syntax: {pgm} [-s|--single] [ TEXT ... ]\n'.format(pgm=sys.argv[0]))
  exit(1)

def replacement(old_string, timestamp):
  """
     Return a replacement string for `old_string` based on the `timestamp`
  """
  if short:
    ret = datetime.datetime.strftime(timestamp, '%Y/%m/%d %H:%M:%S')
  elif timeonly:
    ret = datetime.datetime.strftime(timestamp, '%H:%M:%S')
  else:
    ret = str(timestamp)

  if match:
    ret = ret.ljust(len(old_string))

  return ret

single = False
timeonly = False
short = False
match = False
verbose = False
(opts, args) = ([], [])
try:
  (opts, args) = getopt.getopt(sys.argv[1:], 'stmv', ['single', 'short', 'timeonly', 'match', 'verbose'])
except Exception as e:
  syntax('Caught `{e!s}`'.format(**locals()))

for (opt, arg) in opts:
  if opt in ['-s', '--single']:
    single = not single
  elif opt == '--short':
    short = True
    timeonly = False
  elif opt in ['-t', '--timeonly']:
    timeonly = True
    short = False
  elif opt in ['-m', '--match']:
    match = not match
  elif opt in ['-v', '--verbose']:
    verbose = not verbose
  else:
    syntax('Unexpected option: {opts!r}'.format(**locals()))

if args:
  lines = [' '.join(args)]
else:
  if sys.stdin.isatty():
    syntax('stdin must be directed when no text is provided')
  lines = sys.stdin.read().splitlines()

regexp = re.compile('(?=(^|[^0-9])(\d{10}([.-]\d{,6})?)($|[^0-9]))')

for line in lines:
  debug('Processing {line!r}'.format(**locals()))
  hits = list(regexp.finditer(line))
  if single:
    hits = hits[0:1]
  debug('single: {single}, {num} hits: {hits}'.format(num=len(hits), single=single, hits=[hit.group(2) for hit in hits]))
  for hit in hits[-1::-1]:
    timestamp = datetime.datetime.fromtimestamp(float(hit.group(2).replace('-', '.')))
    line = line[:hit.start(2)] + replacement(hit.group(2), timestamp) + line[hit.end(2):]
  print(line)
