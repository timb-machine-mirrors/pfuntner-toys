#! /usr/bin/env python3

import sys
import signal
import string
import logging
import argparse

from BrunoUtils import *

parser = argparse.ArgumentParser(description='Reform text to screen width')
parser.add_argument('-w', '--width', type=int, default=BrunoUtils.cols(), help='Set specific width (default: {})'.format(BrunoUtils.cols()))
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if sys.stdin.isatty():
    parser.error('stdin must be redirected')

lines = sys.stdin.read().splitlines()
lineno = 0
while lineno < len(lines):
    if len(lines[lineno]) > args.width:
        pos = args.width
        # find last whitespace character before screen width
        while pos >= 0:
            if lines[lineno][pos] in string.whitespace:
                break
            pos -= 1
        # find previous non-whitespace character
        while pos >= 0:
            if lines[lineno][pos] not in string.whitespace:
                lines.insert(lineno+1, lines[lineno][pos+1:].lstrip())
                lines[lineno] = lines[lineno][:pos+1]
                break
            pos -= 1
    lineno += 1
print('\n'.join(lines))
