#! /usr/bin/env python3

import re
import os
import sys
# import json
import logging
import argparse

"""
amazon1 ansible_user=ec2-user ansible_host=54.164.27.196 ansible_ssh_private_key_file=/home/centos/sto/pfuntner-aws.pem
"""

def get_user(platform):
  ret = None
  if 'centos' in platform.lower():
    ret = 'centos'
  elif 'ubuntu' in platform.lower():
    ret = 'ubuntu'
  elif 'debian' in platform.lower():
    ret = 'admin'
  elif 'rhel' in platform.lower():
    ret = 'ec2-user'
  elif 'amazon' in platform.lower():
    ret = 'ec2-user'
  else:
    parser.error('Cannot not figure out user for {platform!r}'.format(**locals()))
  return ret

parser = argparse.ArgumentParser(description='Make Ansible hosts file from AWS instances')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

if sys.stdin.isatty():
  parser.error('stdin must be redirected')

first_heading = None
headings = []
instances = []

heading_regexp = re.compile('^[A-Z]')
name_regexp = re.compile('^[A-Za-za-z]+[^A-Za-z0-9]+(([A-Za-z0-9]+).*)$')

lines = sys.stdin.read().splitlines()

# find headings
for (pos, line) in enumerate(lines):
  if heading_regexp.search(str(line)):
    if first_heading is None:
      first_heading = pos
    headings.append(line)
  else:
    if headings:
      break

log.debug('headings: {headings}'.format(**locals()))
if not headings:
  parser.error('No headings found')

for (pos, line) in enumerate(lines[first_heading + len(headings):]):
  heading_pos = pos % len(headings)
  if heading_pos == 0:
    instances.append({})
  instances[-1][headings[heading_pos]] = line.strip()
  log.debug('instance: {}'.format(instances[-1]))

# print json.dumps(instances, sort_keys=True, indent=2)

key_file = os.environ.get('ANSIBLE_SSH_PRIVATE_KEY_FILE')

for instance in instances:
  name = instance.get('Name')
  if name:
    ip = instance.get('IPv4 Public IP')
    if ip:
      match = name_regexp.search(str(name))
      if not match:
        parser.error('{name!r} didn\'t match {name_regexp.pattern!r}'.format(**locals()))
      host = match.group(1)
      platform = match.group(2)
      user = get_user(platform)

      # amazon1 ansible_user=ec2-user ansible_host=54.164.27.196 ansible_ssh_private_key_file=/home/centos/sto/pfuntner-aws.pem
      line = '{host} ansible_user={user} ansible_host={ip}'.format(**locals()) + ((' ansible_ssh_private_key_file=' + key_file) if key_file else '')
      print(line)
    else:
      parser.error('No IP for {name!r}'.format(**locals()))
