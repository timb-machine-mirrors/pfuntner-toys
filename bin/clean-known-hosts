#! /usr/bin/env python3

import os
import re
import signal
import logging
import argparse
import subprocess

def run(cmd, capture=True):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None)
  if capture:
    (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  else:
    (stdout, stderr) = ('', '')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Clean keys from ~/.ssh/known_hosts')
parser.add_argument('-d', '--dry-run', action='store_true', help='Do not make changes')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

"""
$ nslookup 35.227.121.118
118.121.227.35.in-addr.arpa	name = 118.121.227.35.bc.googleusercontent.com.

Authoritative answers can be found from:
35.in-addr.arpa	nameserver = y.arin.net.
35.in-addr.arpa	nameserver = arin.authdns.ripe.net.
35.in-addr.arpa	nameserver = r.arin.net.
35.in-addr.arpa	nameserver = z.arin.net.
35.in-addr.arpa	nameserver = x.arin.net.
35.in-addr.arpa	nameserver = u.arin.net.

$ tail ~/.ssh/known_hosts
52.91.174.213 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBOv+OMxpBEWPxwHx3zItZoitY4Gx5N1oaK0E5l5o5GODRVB+HvlMv/aT+WvIWL8BKHwOCkpzEv3Jwq8M3vVIBrg=
35.229.46.79 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBNwm8wVfgx0rNO1+OI/DbNgNxTt3yUgior+rJzibcvNoZZu3MonUd8NcPTsTR1R4PAumiYFeLacCNeXiFzxSHsw=
10.83.105.161 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBAiYgSg7LjdnGQoZLqAb8BbdwqcyyvJwvG61JQMlbeVB9qwOwggc6P/z6ffiqktYRYe+euFyY6PZW7k2davpzIU=
3.91.180.201 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHXNX/im6ohoVw5IgAF1wK7pjnAKK+5JgkSZmUaGG8kET82eLintDFdf6e6njAvdIesgfRtNDB8KhD3YazXpYVs=
18.205.244.6 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBDtOrUyuVNRnI2dcoLJE0pcEZEEWfSLtsUbVY/+k0ZoCw+rF5ZZr0JkeAvQHoJm/H2Ee74ZOA8BvKnC17My09RQ=
34.203.204.89 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBJ8ad8UX/BRXu2mQ4gpYZBioJ+T4o9UtVXM/nqvtVrYMqUockj0Jf25sKofKhH2juMRfytVpGsWYIN8GKJ4poKw=
3.82.96.67 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBCKttb1HNh3CtxWiRJI7fz3fryKu0gnj31HTG8a5wjD6Y4F80olwvaeUqzQ1SmSAkYb9Bhdg0lY8k6f2uck9vi8=
54.197.26.211 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBF+vnB1FaqRw2vZzb0B9fwfgSzkKtUvwEIclcm8DDrQFlWMSCoCMtqdWKf/6o8WIcQFLTr/vkIBvkL6Ya+c02x4=
35.231.202.238 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFMrC5ceFbP3s5e/C0i1E3OEdTuaGpZ/aKKQsE8KuU4Ks7GX07KCb6Ltd6EckVZ9gGKnAWgjBdCjQH9l5A1/m6M=
35.227.121.118 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBDHK4Qct2kduMnwJwvU0+iPMo1iSkGIqPvqnK5Lctp6rY2xGVpSegD0B7v0fmDNxjgKwxlc8W2o95ZvtL8vnMUE=
$ nslookup 54.197.26.211
211.26.197.54.in-addr.arpa	name = ec2-54-197-26-211.compute-1.amazonaws.com.

Authoritative answers can be found from:
in-addr.arpa	nameserver = c.in-addr-servers.arpa.
in-addr.arpa	nameserver = d.in-addr-servers.arpa.
in-addr.arpa	nameserver = f.in-addr-servers.arpa.
in-addr.arpa	nameserver = b.in-addr-servers.arpa.
in-addr.arpa	nameserver = e.in-addr-servers.arpa.
in-addr.arpa	nameserver = a.in-addr-servers.arpa.
"""

ip_regexp = re.compile(r'^(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s')
nslookup_regexp = re.compile(r'\s+name\s+=\s+(\S+)\.$', flags=re.MULTILINE)

known_hosts_file_name = os.path.expanduser('~/.ssh/known_hosts')
log.info(f'known_hosts_file_name: {known_hosts_file_name!r}')

if os.path.isfile(known_hosts_file_name):
  with open(known_hosts_file_name) as stream:
    lines = stream.read().splitlines()
    print('{amt} keys in {known_hosts_file_name}'.format(amt=len(lines), known_hosts_file_name=known_hosts_file_name))
    pos = 0
    cleanups = 0
    while pos < len(lines):
      line = lines[pos]
      match = ip_regexp.search(line)
      if match:
        ip = match.group(1)
        log.info(f'parsed {ip!r} from {line!r}')
        (rc, stdout, stderr) = run(f'nslookup {ip}')
        if rc == 0 and stdout:
          match = nslookup_regexp.search(stdout)
          if match:
            dns_server = match.group(1)
            if 'googleusercontent.com' in dns_server or 'amazonaws.com' in dns_server:
              print(f'{ip}\t{dns_server}')
              del lines[pos]
              cleanups += 1
            else:
              log.info(f'Skipping {ip}\t{dns_server}')
              pos += 1
          else:
            pos += 1
        else:
          pos += 1
      else:
        pos += 1

  if cleanups:
    print('{amt} keys in {known_hosts_file_name}'.format(amt=len(lines), known_hosts_file_name=known_hosts_file_name))
    if args.dry_run:
      print('No changes due to --dry-run option being used')
    else:
      run(f'cp -p {known_hosts_file_name} {known_hosts_file_name}.backup', capture=False)
      with open(known_hosts_file_name, 'w') as stream:
        stream.write('\n'.join(lines) + '\n')
  else:
    print('No instances to cleanup')
else:
  log.warning(f'Could not find {known_hosts_file_name!r}')
