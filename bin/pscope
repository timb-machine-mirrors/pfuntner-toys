#! /usr/bin/env python2

"""
Scope out stdin
"""

import re
import sys
import logging
import argparse

def process(item, depth=0):
  try:
    log.debug('Evaluating {item!r}'.format(**locals()))
    data = eval(item)
  except Exception as e:
    log.debug('Caught {e!s} interpreting {item!r}'.format(**locals()))
    print '{indent}{item!r}'.format(
      indent='  '*depth,
      **locals()
    )
  else:
    if isinstance(data, basestring):
      log.debug('{bytes} byte string'.format(bytes=len(data)))
      lines = data.splitlines()
      if len(lines) > 1:
        print '{indent}['.format(indent='  '*depth)
        for line in lines:
          process(line, depth+1)
        print '{indent}]'.format(indent='  '*depth)
      else:
        print '{indent}{item!r}'.format(
          indent='  '*depth,
          **locals()
        )
    elif type(data) in [int, float]:
      print '{indent}{item}'.format(
        indent='  '*depth,
        **locals()
      )
    elif isinstance(data, tuple):
      log.debug('{count} tuple'.format(count=len(data)))
    elif isinstance(data, dict):
      log.debug('{count} dict'.format(count=len(data)))
    elif isinstance(data, list):
      log.debug('{count} list'.format(count=len(data)))
    else:
      log.debug('Don\'t know how to handle {typ}'.format(typ=type(data)))

parser = argparse.ArgumentParser(description='Scope out stdin')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('regexp', nargs='?', help='Regular expression')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

if sys.stdin.isatty():
  parser.error('stdin must be redirected')

if args.regexp:
  regexp = re.compile(args.regexp)
  log.debug('regexp: {regexp.pattern}'.format(**locals()))
else:
  regexp = None

for line in sys.stdin.read().splitlines():
  if regexp:
    match = regexp.search(line)
    log.debug('{line!r}: {groups}'.format(
      groups=match.groups() if match else None,
      **locals()
    ))
    if match:
      print repr(line)
      if match.groups():
        map(process, match.groups())
      else:
        process(line)
  else:
    process(line)
