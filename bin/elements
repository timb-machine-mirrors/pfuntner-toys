#! /usr/bin/env python3

"""
  assuming stdin is a json list of dictionaries, this script prints selected elements of a json list in a table
"""

import sys
import json
import getopt
from table import Table

def seeFields(ignoreException=True):
  try:
    sys.stderr.write("Fields are: {fields}\n".format(fields=', '.join(sorted(data[0].keys()))))
  except Exception as e:
    if not ignoreException:
      sys.stderr.write("Caught: {e!r}\n".format(**locals()))
      exit(1)

def syntax(msg=None):
  if msg:
    sys.stderr.write("{msg}\n".format(**locals()))

  sys.stderr.write("Syntax: {pgm} [-h|--help] [-a|--all] FIELD ...\n".format(pgm=sys.argv[0]))
  seeFields()
  exit(1)

def get(items, key):
  if key in items:
    value = str(items[key])
    if type(items[key]) in [str, unicode]:
      value = repr(value)[1:-1]
  else:
    value = "n/a"

  return value

allKeys = False
help = False
(opts, keys) = ([], [])
try:
  (opts, keys) = getopt.getopt(sys.argv[1:], "ha", ["help", "all"])
except Exception as e:
  syntax("Caught {e!r}".format(**locals()))

for (opt, arg) in opts:
  if opt in ["-h", "--help"]:
    help = not help
  elif opt in ["-a", "--all"]:
    allKeys = not allKeys
  else:
    syntax("Unexpected option {opt!r}".format(**locals()))

if sys.stdin.isatty():
  syntax("stdin must be redirected")

try:
  data = json.load(sys.stdin)
except Exception as e:
  syntax("Could not parse stdin: {e!r}".format(**locals()))

if type(data) != list:
  syntax("stdin is a {datatype}, not a list".format(datatype=type(data)))

if not data:
  syntax("stdin is a list with no elements")

if type(data[0]) != dict:
  syntax("First element of stdin list is a {datatype}, not a dictionary".format(datatype=type(data[0])))

if help:
  seeFields(ignoreException=False)
  exit(0)

if allKeys:
  keys = data[0].keys()

if not keys:
  syntax()

table = Table(keys)
for datum in data:
  table.add([get(datum, key) for key in keys])

print(str(table))
