#! /usr/bin/env python3

import sys
import math
import re
import signal
import logging
import argparse

def process(size, file, filename=None):
  linenum = 0
  buf = []

  top = math.ceil(size/2.0)
  bot = size - top

  visibleFilename = "%s " % filename if filename else ""

  for line in file:
    linenum += 1
    if linenum <= top:
      sys.stdout.write("{visibleFilename}{linenum}{line}".format(visibleFilename=visibleFilename, linenum="%8d " % linenum if print_numbers else '', line=line))
    else:
      if len(buf) == bot:
        del buf[0]
      buf += [line]

  if linenum > top:
    if linenum > size:
      for x in range(3):
        print("%s%s" % (" " * len(visibleFilename), ".".rjust(10 if print_numbers else 1, ' ')))
    else:
      bot = len(buf)
    for curr in range(len(buf)):
      sys.stdout.write("{visibleFilename}{linenum}{line}".format(visibleFilename=visibleFilename, linenum="%8d " % (linenum - (bot - curr - 1)) if print_numbers else '', line=buf[curr]))

parser = argparse.ArgumentParser(description='Perform head and tail on a file')
parser.add_argument('-n', '--number', action='count', help='Toggle line numbers: default=true')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
(args, unknown_args) = parser.parse_known_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

size = 10 # default size
if unknown_args:
  try:
    arg1 = int(unknown_args[0])
    if arg1 < 0:
      arg1 = -arg1
  except:
    arg1 = None

  if arg1:
    size = arg1
    unknown_args.pop(0) 

print_numbers = ((args.number or 0) % 2) == 0

if unknown_args:
  for filename in unknown_args:
    with open(filename, "r") as file:
      process(size, file, filename)
    print("")
else:
  if sys.stdin.isatty():
    parser.error("stdin must be directed if no files are specified")
  process(size, sys.stdin)
