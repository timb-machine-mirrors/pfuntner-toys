#! /usr/bin/env python3

import re
import sys
import signal
import logging
import argparse

from BrunoUtils import BrunoUtils

class Datum(object):
  y_min = None
  y_max = None
  x_max = 0

  def __init__(self, x, y):
    self.x = x.strip()
    self.y = float(y)

    Datum.y_min = min(self.y, Datum.y_min or float('inf'))
    Datum.y_max = max(self.y, Datum.y_max or float('-inf'))

    Datum.x_max = max(len(self.x), Datum.x_max)

def char_at(s, pos):
  return s[pos] if pos < len(s) else ' '

parser = argparse.ArgumentParser(description='Plot a numeric on the Y axis against X strings')
parser.add_argument('-s', '--stats', '--statistics', action='store_true', help='Include statistics')
parser.add_argument('-g', '--gap', default=5, type=int, help='Gap between X labels (default:5)')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

total_rows = BrunoUtils.rows()
total_columns = BrunoUtils.cols()

regexp = re.compile(r'\b(\d+|\d+\.\d*|\d*\.\d+)$')

data = list()

linenum = 0
for line in sys.stdin.read().splitlines():
  linenum += 1
  match = regexp.search(line)
  if match:
    data.append(Datum(line[:match.start(1)], match.group(1)))
  else:
    log.info(f'Ignoring {line!r} (line {linenum})')

plot_columns = total_columns - 7
plot_rows = total_rows - Datum.x_max - 2

y_step = (Datum.y_max - Datum.y_min) / plot_rows
x_step = len(data) / plot_columns

log.info(f'Smples:{len(data)}, Datum.y_min:{Datum.y_min}, Datum.y_max:{Datum.y_max}, plot_columns:{plot_columns}, plot_rows:{plot_rows}, y_step:{y_step}, x_step:{x_step}')

for rownum in range(plot_rows):
  y = Datum.y_max-y_step*rownum
  print(f'{y:6.0f}|', end='')

  last_x = 0
  for colnum in range(plot_columns):
    x = last_x + x_step
    if int(last_x) != int(x) and int(x) < len(data):
      print('*' if data[int(x)].y >= y else ' ', end='')
    else:
      print(' ', end='')
    last_x = x

  print('')

print(f'{" "*6}+{"-"*plot_columns}')

for label_num in range(Datum.x_max):
  print(' '*7, end='')
  last_x = 0
  last_report = 0
  for colnum in range(plot_columns):
    x = last_x + x_step
    if (int(last_x) != int(x)) and int(x) < len(data):
      if colnum == 0 or (colnum - last_report) >= args.gap:
        print(char_at(data[int(x)].x, label_num), end='')
        last_report = colnum
      else:
        print(' ', end='')
    last_x = x
  print()

if args.stats:
  print()
  print(f'Sample:{len(data)}, y_min:{Datum.y_min:.2f}, y_max:{Datum.y_max:.2f}, x_step={x_step:.2f}, y_step={y_step:.2f}')
