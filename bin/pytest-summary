#! /usr/bin/env python2

import re
import sys
import logging
import argparse

from table import Table

class Test(object):
  def __init__(self, title):
    self.title = title
    self.results = {}

def get_test(title):
  for test in tests:
    if test.title == title:
      return test

  tests.append(Test(title))
  return tests[-1]

def process(filename=None):
  stream = open(filename) if filename else sys.stdin

  for line in stream.read().splitlines():
    match = test_regexp.search(line)
    if match:
      name = match.group(1)
      title = match.group(2)
      result = match.group(3)
      get_test(title).results[filename or 'Result'] = result
    else:
      match = summary_regexp.search(line)
      if match:
        hits = result_regexp.findall(match.group(1))
        results_dict = {hit[1]: hit[0] for hit in hits}
        results = [
          'P: {}'.format(results_dict.get('passed', 0)),
          'F: {}'.format(results_dict.get('failed', 0)),
          'S: {}'.format(results_dict.get('skipped', 0)),
        ]
        results += ['{c}: {count}'.format(c=key.upper()[0], count=results_dict[key]) for key in results_dict.keys() if key not in ['passed', 'failed', 'skipped']]
        summary.results[filename or 'Result'] = ', '.join(results)
  if filename:
    stream.close()

parser = argparse.ArgumentParser(description='Summarize pytest activity')
parser.add_argument('files', metavar='file', nargs='*', help='Enable debugging')
parser.add_argument('-v', '--verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

# [CIS_RH8_5.2.3] Ensure permissions on SSH private host key files are configured (Scored) FAILED [ 68%]
test_regexp = re.compile(r'\[([^\]]+)\]\s+(.+)\s+(\S+)\s+\[\s*\d+%\]')

# [gcp-rhel8] ============ 6 failed, 228 passed, 46 skipped in 421.33s (0:07:01) =============
summary_regexp = re.compile(r'=+\s+(.+)\s+in\s+[0-9.]+s')
result_regexp = re.compile(r'(\d+)\s+([^ ,]+)?')

tests = []

summary = Test('Summary')

if args.files:
  map(process, args.files)
else:
  args.files = ['Result']
  process()

tests.append(summary)

table = Table(['Test'] + args.files)
for test in tests:
  log.debug('Generating row for {test.title!r}: {test.results}'.format(**locals()))
  table.add([test.title] + [test.results.get(result) for result in args.files])

sys.stdout.write(str(table))
