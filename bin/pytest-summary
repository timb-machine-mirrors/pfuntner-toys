#! /usr/bin/env python3

import re
import sys
import logging
import argparse

from table import Table

class Test(object):
  def __init__(self, title):
    self.title = title
    self.results = {}

def get_by_host(host='-'):
  ret = by_host.get(host)
  if not ret:
    by_host[host] = {'PASSED':0, 'FAILED':0, 'SKIPPED':0}
    ret = by_host.get(host)

  return ret

def get_by_test(test):
  ret = by_test.get(test)
  if not ret:
    by_test[test] = {}
    ret = by_test.get(test)

  return ret

def get_test(title):
  for test in tests:
    if test.title == title:
      return test

  tests.append(Test(title))
  return tests[-1]

def process(filename=None):
  stream = open(filename) if filename else sys.stdin

  for line in stream.read().splitlines():
    match = test_regexp.search(line)
    if match:
      log.debug('test match: {}'.format(match.groups()))
      name = match.group(1)
      distro = match.group(2)
      recommendation = match.group(3)
      title = match.group(4)
      result = match.group(5)
      get_test(title).results[distro if args.distro else (filename or 'Result')] = result.strip()

      get_by_host(filename)[result] += 1
      if result == 'FAILED':
        get_by_test(title)[filename or '-'] = True
    elif not args.distro:
      match = summary_regexp.search(line)
      if match:
        hits = result_regexp.findall(match.group(1))
        results_dict = {hit[1]: hit[0] for hit in hits}
        results = [
          'P: {}'.format(results_dict.get('passed', 0)),
          'F: {}'.format(results_dict.get('failed', 0)),
          'S: {}'.format(results_dict.get('skipped', 0)),
        ]
        results += ['{c}: {count}'.format(c=key.upper()[0], count=results_dict[key]) for key in results_dict.keys() if key not in ['passed', 'failed', 'skipped']]
        summary.results[distro if args.distro else (filename or 'Result')] = ', '.join(results)
  if filename:
    stream.close()

parser = argparse.ArgumentParser(description='Summarize pytest activity')
parser.add_argument('files', metavar='file', nargs='*', help='Enable debugging')
parser.add_argument('-a', '--all', action='store_true', help='Report by test and by host')
parser.add_argument('-d', '--distro', action='store_true', help='Report by OS distribution')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

# [CIS_RH8_5.2.3] Ensure permissions on SSH private host key files are configured (Scored) FAILED [ 68%]
test_regexp = re.compile(r'\[([^\]]+)\]\s+(.+)\s+(\S+)\s+\[\s*\d+%\]')
test_regexp = re.compile(r'\[(CIS_([^]]+)_([1-9][.0-9]*[0-9]+))\]\s+(.+)\s+(\S+)\s+\[\s*\d+%\]')

# [gcp-rhel8] ============ 6 failed, 228 passed, 46 skipped in 421.33s (0:07:01) =============
summary_regexp = re.compile(r'=+\s+(.+)\s+in\s+[0-9.]+s')
result_regexp = re.compile(r'(\d+)\s+([^ ,]+)?')

tests = []
by_host = {}
by_test = {}

summary = Test('Summary')

if args.files:
  list(map(process, args.files))
  columns = args.files
else:
  process()
  columns = ['Result']

if args.distro:
  columns = set()
  for test in tests:
    columns |= set(test.results.keys())
  columns = sorted(list(columns))

  log.info('distros: {columns}'.format(**locals()))
  for distro in columns:
    results_dict = {}
    for test in tests:
      results_dict[test.results.get(distro, 'None').lower()] = results_dict.get(test.results.get(distro, 'None').lower(), 0) + 1
    results = [
      'P: {}'.format(results_dict.get('passed', 0)),
      'F: {}'.format(results_dict.get('failed', 0)),
      'S: {}'.format(results_dict.get('skipped', 0)),
    ]
    results += ['{c}: {count}'.format(c=key.upper()[0], count=results_dict[key]) for key in results_dict.keys() if
                key not in ['passed', 'failed', 'skipped']]
    summary.results[distro] = ', '.join(results)

tests.append(summary)

table = Table(['Test'] + columns)
for test in tests:
  log.debug('Generating row for {test.title!r}: {test.results}'.format(**locals()))
  table.add([test.title] + [test.results.get(result) for result in columns])

sys.stdout.write(str(table))

if args.all:
  print('')
  print('Host|Passed|Failed|Skipped')
  for host in sorted(args.files or ['-']):
    print('{host}|{passed}|{failed}|{skipped}'.format(host=host, passed=by_host[host]['PASSED'], failed=by_host[host]['FAILED'], skipped=by_host[host]['SKIPPED']))
  
  print('')
  print('Test', end='')
  for host in sorted(args.files or ['-']):
    print(f'|{host}', end='')
  print('')
  for test in by_test:
    print(test, end='')
    for host in sorted(args.files or ['-']):
      print('|{}'.format('Failed' if by_test[test].get(host) else ''), end='')
    print('')
