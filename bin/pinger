#! /usr/bin/env python2

import os
import re
import sys
import json
import time
import signal
import os.path
import datetime
import subprocess

def get(hash, key, defaultValue=None):
  assert (type(hash) == dict), "Cannot extract %s from %s" % (repr(key), repr(hash))
  return hash[key] if key in hash else defaultValue

def debug(s):
  if verbose:
    sys.stderr.write("%s: %s\n" % (datetime.datetime.now(), repr(s)))

def decodeSignum(signum):
  return ("%s (%d)" % (sigmap[signum], signum)) if signum in sigmap else str(signum)

def catcher(signum, currentStackFrame):
  sys.stderr.write("%s: Terminating upon receiving %s signal\n" % (datetime.datetime.now(), decodeSignum(signum)))
  exit(1)

""" 
  I got these signal defintions from /usr/include/x86_64-linux-gnu/asm/signal.h
"""
sigmap = {}
sigmap[1] = "SIGHUP"
sigmap[2] = "SIGINT"
sigmap[3] = "SIGQUIT"
sigmap[4] = "SIGILL"
sigmap[5] = "SIGTRAP"
sigmap[6] = "SIGABRT"
sigmap[6] = "SIGIOT"
sigmap[7] = "SIGBUS"
sigmap[8] = "SIGFPE"
sigmap[9] = "SIGKILL"
sigmap[10] = "SIGUSR1"
sigmap[11] = "SIGSEGV"
sigmap[12] = "SIGUSR2"
sigmap[13] = "SIGPIPE"
sigmap[14] = "SIGALRM"
sigmap[15] = "SIGTERM"
sigmap[16] = "SIGSTKFLT"
sigmap[17] = "SIGCHLD"
sigmap[18] = "SIGCONT"
sigmap[19] = "SIGSTOP"
sigmap[20] = "SIGTSTP"
sigmap[21] = "SIGTTIN"
sigmap[22] = "SIGTTOU"
sigmap[23] = "SIGURG"
sigmap[24] = "SIGXCPU"
sigmap[25] = "SIGXFSZ"
sigmap[26] = "SIGVTALRM"
sigmap[27] = "SIGPROF"
sigmap[28] = "SIGWINCH"
sigmap[29] = "SIGIO"
sigmap[29] = "SIGLOST"
sigmap[30] = "SIGPWR"
sigmap[31] = "SIGSYS"
sigmap[32] = "SIGRTMIN"
sigmap[8192] = "SIGSTKSZ"

verbose = ("--debug" in sys.argv) or ("--verbose" in sys.argv)

signal.signal(signal.SIGINT, catcher)

"""
  Global defaults can be overidden in the top-level component of the config dictionary.
  Each host can also have its own unique value encoded within its element.
"""
globalInterval = 5.0
globalWait = 2

epoch = datetime.datetime.fromtimestamp(0)

config = {}
configFilename = os.path.join(os.path.dirname(sys.argv[0]), os.path.basename(sys.argv[0]) + ".json")
try:
  with open(configFilename) as configFile:
    config = json.load(configFile)
except Exception as e:
  sys.stderr.write("Could not open config file: %s\n" % e)
  exit(1)

if "interval" in config:
  globalInterval = float(config["globalInterval"])

if "wait" in config:
  globalWait = float(config["globalWait"])

hosts = get(config, "hosts")
assert hosts, "`hosts` are not defined in %s" % configFilename
assert type(hosts) == list, "`hosts` in %s is not a list" % configFilename

regexp1 = re.compile("icmp_seq=(\d+) ttl=(\d+) time=([0-9.]+) ms.+(\d+) packets transmitted, (\d+) received, (\d+)% packet loss, time (\d+)ms", re.DOTALL)
regexp2 = re.compile("rtt min/avg/max/mdev = ([0-9.]+)/([0-9.]+)/([0-9.]+)/([0-9.]+) ms")

count = 0
lastOutFilename = None

while True:
  for host in hosts:
    assert type(host) == dict, "host in %s is not a dictionary: %s" % (configFilename, json.dumps(host))
    assert "name" in host, "host in %s does not contain a `name` key: %s" % (configFilename, json.dumps(host))

    cmd = ("ping -w%d -c1 %s" % (get(host, "wait", globalWait), host["name"])).split()
    debug("Executing: %s" % cmd)
    nowDT = datetime.datetime.now()
    now = (nowDT-epoch).total_seconds()
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (stdout, stderr) = p.communicate()
    rc = p.wait()
    resp = {"host": host["name"], "timestamp": now, "timestamp_hms": str(nowDT), "rc": rc, "stdout": stdout, "stderr": stderr, "count": count}

    """
      mrbruno@bruno-meerkat:~/tmp$ ping -c1 -w5 timewarner.com
      PING timewarner.com (205.140.229.98) 56(84) bytes of data.
      64 bytes from 205.140.229.98 (205.140.229.98): icmp_seq=1 ttl=43 time=98.1 ms
      
      --- timewarner.com ping statistics ---
      1 packets transmitted, 1 received, 0% packet loss, time 0ms
      rtt min/avg/max/mdev = 98.158/98.158/98.158/0.000 ms
      mrbruno@bruno-meerkat:~/tmp$ 
    """

    debug("%d, %s, %s" % (rc, repr(stdout), repr(stderr)))
    match = regexp1.search(stdout)
    debug("%s: %s" % ("MATCH1" if match else "NO_MATCH1", match.groups() if match else None))
    if match:
      resp["icmp_seq"] = int(match.group(1))
      resp["ttl"] = int(match.group(2))
      resp["time"] = float(match.group(3))
      resp["sent"] = int(match.group(4))
      resp["received"] = int(match.group(5))
      resp["loss"] = int(match.group(6))
      resp["packet_time"] = int(match.group(7))

      match = regexp2.search(stdout)
      debug("%s: %s" % ("MATCH2" if match else "NO_MATCH2", match.groups() if match else None))
      if match:
        resp["rtt_min"] = float(match.group(1))
        resp["rtt_avg"] = float(match.group(2))
        resp["rtt_max"] = float(match.group(3))
        resp["rtt_mdev"] = float(match.group(4))

    outFilename = "pinger-%s.out" % datetime.datetime.now().strftime("%Y%m%d")
    if outFilename != lastOutFilename:
      print "Writing to %s/%s" % (os.getcwd(), outFilename)
    lastOutFilename = outFilename
    with open(outFilename, "a") as outFile:
      outFile.write("%s\n" % json.dumps(resp, sort_keys=True))

    time.sleep(get(host, "interval", globalInterval))
    count += 1
