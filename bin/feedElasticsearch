#! /usr/bin/env python3

import sys
import getopt
import json
import subprocess
import datetime
import re

"""
    curl --user kibana:changeme -XGET 'localhost:9200/_cat/indices?v&pretty'

    curl -XPUT 'localhost:9200/customer/external/1?pretty&pretty' -d'
    {
      "name": "John Doe"
    }'
"""

optionalOptions = ["host", "port", "user", "password", "num"]

def syntax():
  sys.stderr.write("Syntax: %s --index index ...\n" % sys.argv[0])
  sys.stderr.write("Optional options: %s\n" % ", ".join(optionalOptions))
  exit(1)

class TimestampPattern:
  def __init__(self, regexp, pat):
    self.regexp = re.compile(regexp)
    self.pat = pat

  def parse(self, line):
    ret = None
    match = self.regexp.search(line)
    # print "search(%s, %s) => %s" % (repr(self.regexp.pattern), repr(line), match)
    if match:
      try:
        ret = datetime.datetime.strptime(match.group(1), self.pat)
      except Exception as e:
        print("Caught %s parsing %s with %s" % (repr(e), repr(match.group(1)), repr(self.pat)))

    return ret

timestampPatterns = [
         TimestampPattern("^([A-Z][a-z]{2} [A-Z][a-z]{2} [ 0-9]\d \d{2}:\d{2}:\d{2} \S+ \d{4})$", "%a %b %d %H:%M:%S %Z %Y"), # Unix `date` style: "Thu Mar  2 07:45:42 EST 2017"
         TimestampPattern("^(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{6})$", "%Y-%m-%d %H:%M:%S.%f"), # Python datetime.datetime default format: "2017-03-06 16:04:42.318470"
       ]

def parseTimestamp(s):
  t = None
  for pat in timestampPatterns:
    t = pat.parse(s)
    if t:
      break

  return t

verbose = False

num = None
port = 9200
host = "localhost"
user = "kibana"
pw = "changeme"
index = None
anonymous = False

assert not sys.stdin.isatty(), "stdin must be redirected"
data = json.loads(sys.stdin.read())
assert type(data) == dict, "stdin is a `%s`, not a dictionary" % str(type(data))

(opts,args) = getopt.getopt(sys.argv[1:], "vh:p:U:P:i:", ["verbose", "anonymous", "help", "index="] + [optionalOption + '=' for optionalOption in optionalOptions])

for (opt,arg) in opts:
  if opt in ["-h", "--host"]:
    host = arg
  elif opt in ["-p", "--port"]:
    port = int(arg)
  elif opt in ["-U", "--user"]:
    user = arg
  elif opt in ["-P", "--password"]:
    pw = arg
  elif opt in ["-i", "--index"]:
    index = arg
  elif opt == "--help":
    syntax()
  elif opt == "--anonymous":
    anonymous = not anonymous
  elif opt in ["-v", "--verbose"]:
    verbose = not verbose
  elif opt == "--num":
    num = int(arg)
  else:
    sys.stderr.write("Unexpected option: %s\n" % repr(opt))
    syntax()

if args:
  sys.stdrr.write("Unexpected arguments: %s\n" % str(args))
  syntax()

if not index:
  sys.stderr.write("`--index` is required\n")
  syntax()

if num == None:
  for datum in data:
    if datum == "timestamp":
      value = data[datum]
      # print "Trying to discover `num` from %s:%s (%s)" % (repr(datum), repr(value), str(type(value)))
      if type(value) == int:
        num = int(value)
        break
      elif type(value) == float:
        num = int(value*1000)
        break
      elif type(value) in [str, unicode]:
        timestamp = parseTimestamp(value)
        if timestamp:
          secs = (timestamp-datetime.datetime.utcfromtimestamp(0)).total_seconds()
          num = int(secs*1000)

assert (num) and (type(num) == int), "No number for the item"

cmd = ["curl"]
if not anonymous:
  cmd += ["--user", "%s:%s" % (user, pw)]
cmd += ["-XPUT", "%s:%d/%s/external/%d?pretty&pretty" % (host, port, index, num), "-d", json.dumps(data)]

# print ""
# print cmd
# print ""

p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
(stdout, stderr) = p.communicate()
stdout = stdout.decode('utf-8')
stderr = stderr.decode('utf-8')
rc = p.wait()
if verbose or (rc != 0):
  sys.stdout.write(stdout)
  sys.stderr.write(stderr)
exit(rc)
