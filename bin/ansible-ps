#! /usr/bin/env python3

import re
import logging
import argparse
import subprocess

class Process(object):
  def __init__(self, uid, pid, ppid, proc_util, stime, tty, time, cmd):
    self.uid = uid
    self.pid = int(pid)
    self.ppid = int(ppid)
    self.proc_util = int(proc_util)
    self.stime = stime
    self.tty = tty
    self.time = time
    self.cmd = cmd

  """
    UID        PID  PPID  C STIME TTY          TIME CMD
    root         1     0  2 14:53 ?        00:00:20 /usr/lib/systemd/systemd --switched-root --system --deserialize 21
    root         2     0  0 14:53 ?        00:00:00 [kthreadd]
    root         4     2  0 14:53 ?        00:00:00 [kworker/0:0H]
    root         5     2  0 14:53 ?        00:00:00 [kworker/u30:0]
    root         6     2  0 14:53 ?        00:00:00 [ksoftirqd/0]
    root         7     2  0 14:53 ?        00:00:00 [migration/0]
    root         8     2  0 14:53 ?        00:00:00 [rcu_bh]
    root         9     2  0 14:53 ?        00:00:03 [rcu_sched]
    root        10     2  0 14:53 ?        00:00:00 [lru-add-drain]
    root        11     2  0 14:53 ?        00:00:00 [watchdog/0]
    root        13     2  0 14:53 ?        00:00:00 [kdevtmpfs]
  """
  def __str__(self):
    return f'uid:{self.uid} pid:{self.pid} ppid:{self.ppid} proc_util:{self.proc_util} stime:{self.stime} tty:{self.tty} time:{self.time} cmd:{self.cmd!r}'

  regexp = re.compile('^(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(.+)$')

def run(cmd):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  # alternately, if trapping is conditional:
  # if trap:
  #   stdout = stdout.decode('utf-8')
  #   stderr = stderr.decode('utf-8')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

def find_ssh_daemon(ppid):
  global processes

  ret = None
  for (pid, process) in processes.items():
    if process.ppid == ppid:
      if 'sshd' in process.cmd:
        ret = pid
        break
      else:
        ret = find_ssh_daemon(pid)
        if ret:
          break
  return ret

def visit(pid, identify_host, depth=0):
  global processes

  log.debug(f'pid: {pid}')
  process = processes[pid]
  print('{host}{indent}{process!s}'.format(host=(host + ' ') if identify_host else '', indent=' '*(2*depth), process=process))
  for (child_pid, child_process) in processes.items():
    if child_process.ppid == pid:
      visit(child_process.pid, identify_host, depth+1)
  
def process(host, identify_host=False):
  global processes

  cmd = (f'ssh -q {host} ' if host != 'localhost' else '') + 'ps -ef'
  (rc, stdout, stderr) = run(cmd)
  processes = {}
  for line in stdout.splitlines()[1:]:
    match = Process.regexp.search(line)
    log.debug('matches for {line!r}: {match}'.format(line=line, match=match.groups() if match else None))
    if match:
      process = Process(*match.groups())
      processes[process.pid] = process
  for process in processes.values():
    log.debug(f'found {process!s}')

  visit(find_ssh_daemon(0), identify_host)
  
parser = argparse.ArgumentParser(description='Display Ansible process information')
parser.add_argument('hosts', metavar='host', nargs='*', help='Zero or more hosts')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

if args.hosts:
  for host in args.hosts:
    process(host, len(args.hosts) > 1)
else:
  process('localhost')
