#! /usr/bin/env python2

import re
import os
import json
import logging
import argparse
import subprocess

from virtual_hosts import VirtualHosts

parser = argparse.ArgumentParser(description='Make Ansible hosts file from AWS instances')
parser.add_argument('hostexpr', help='Regular expression for hostname')

group = parser.add_mutually_exclusive_group()
group.add_argument('-q', '--quiet', dest='quiet', action='store_true', help='Turn logging level to ERROR, ignoring WARNINGs')
group.add_argument('-v', '--verbose', dest='verbose', action='count', help='Add more debugging')

# parser.add_argument('-d', '--debug', dest='debug', action='store_true', help='Enter Python debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()

if args.quiet:
  log.setLevel(logging.ERROR)
else:
  log.setLevel(logging.WARNING - (args.verbose or 0)*10)

virtual_hosts = VirtualHosts(aws_only=True)
hosts = virtual_hosts.get_hosts(args.hostexpr)
log.info('virtual_hosts: {}'.format([str(host) for host in hosts]))

"""
{
  'src': 'aws',
  'controlled': u'2019-10-19T13:17:01.000Z',
  'controlled_elapsed': '0:27:45.690381',
  'zone': u'us-east-1a',
  'created': u'2019-10-19T13:17:01.000Z',
  'ip': None,
  'image_name': u'Amazon Linux AMI 2018.03.0.20190826 x86_64 HVM gp2',
  'instance_id': u'i-0af29c52f5ae2178a',
  'image_id': u'ami-00eb20669e0990cb4',
  'state': u'stopped',
  'user': 'ec2-user',
  'key': '/home/mrbruno/.ssh/bruno.pem',
  'created_elapsed': '0:27:45.690356',
  'name': u'bruno-amazon1'
}
{
  'src': 'aws',
  'controlled': u'2019-10-19T12:11:02.000Z',
  'controlled_elapsed': '1:33:44.690587',
  'zone': u'us-east-1b',
  'created': u'2019-09-04T13:35:57.000Z',
  'ip': u'18.207.120.189',
  'image_name': u'Amazon Linux 2 AMI 2.0.20190618 x86_64 HVM gp2',
  'instance_id': u'i-09402f80985b9122d',
  'image_id': u'ami-0b898040803850657',
  'state': u'running',
  'user': 'ec2-user',
  'key': '/home/mrbruno/.ssh/bruno.pem',
  'created_elapsed': '45 days, 0:08:49.690569',
  'name': u'bruno1'
}
"""
for host in hosts:
  log.debug(host.__dict__)
  host.name = re.sub(args.hostexpr, '', host.name)
  if host.state.lower() != 'running':
    log.warn('{host.name} is stopped'.format(**locals()))
  else:
    print '{host.name} ansible_host={host.ip} ansible_user={host.user} ansible_ssh_private_key_file={host.key}'.format(**locals())
