#! /usr/bin/env python3

import sys
import json
import logging
import argparse

def typer(o):
  types = ['str', 'unicode', 'int', 'float', 'list', 'dict', 'bool', 'set']
  ret = None

  for curr in types:
    if isinstance(o, eval(curr)):
      ret = curr
      break
  
  return ret or '?'

def whatis(src, depth=0):
  obj = None
  if args.json and (depth == 0):
    log.info('Trying to convert {src!r} to JSON'.format(**locals()))
    try:
      src = json.loads(src)
    except Exception as e:
      log.info('Could not convert {src!r} to JSON: {e!s}'.format(**locals()))
    else:
      src = repr(src)
      log.info('After conversion to JSON: {src!r}'.format(**locals()))

  try:
    obj = eval(src)
  except Exception as e:
    log.error('Could not interpret {src!r}: {e!s}'.format(**locals()))
    return

  print('{indent}{obj_type}: {obj!r}'.format(indent=' '*(depth*2), obj_type=typer(obj), obj=obj))
  depth += 1
  if isinstance(obj, list):
    for (pos, datum) in enumerate(obj):
      print('{indent}{pos}'.format(indent=' '*(depth*2), pos=pos))
      whatis(repr(obj[pos]), depth+1)
  elif isinstance(obj, dict):
    for (key, datum) in sorted(obj.items(), key=lambda datum: datum[0]):
      print('{indent}{key}'.format(indent=' '*(depth*2), key=key))
      whatis(repr(obj[key]), depth+1)
  elif isinstance(obj, str):
    lines = obj.splitlines()
    if len(lines) > 1:
      for line in lines:
        print('{indent}{line}'.format(indent=' '*(depth*2), line=line))
  
parser = argparse.ArgumentParser(description='Analyze a chunk of data')
parser.add_argument('-j', '--json', action='store_true', help='Try to process as JSON first')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

eof = False

while not eof:
  if sys.stdin.isatty():
    sys.stdout.write('> ')

  line = ''
  while True:
    c = sys.stdin.read(1)
    if c == '':
      eof = True
      break
    if c != '\r':
      if c == '\n':
        break
      else:
        line += c

  if line:
    log.debug('line: {line!r}'.format(**locals()))
    whatis(line)

if sys.stdin.isatty():
  # spit out a final newline so we don't leave the cursor on the line with the final prompt
  sys.stdout.write('\n')
