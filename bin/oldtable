#! /usr/bin/env python2

import re
import csv
import sys
import json
import logging
import argparse

def readCsv():
  return [row for row in csv.reader(stream)]

def fix_headings(line):
  if args.simple_headings:
    return line
  else:
    # replace simple embedded blanks in headings
    return re.subn('[a-z] [a-z]', lambda match: match.group(0)[0] + '_' + match.group(0)[2], line)[0]

def readSeparator():
  ret = []
  regexp = re.compile(args.separator)
  for (linenum, line) in enumerate(stream.read().splitlines()):
    log.debug('{linenum} {line!r}'.format(**locals()))
    if linenum == 0:
      line = fix_headings(line)
      log.debug('Post-fix: {line!r}'.format(**locals()))
    if regexp.search(line):
      ret.append([token for token in regexp.split(line)])
  log.debug('ret: {ret}'.format(**locals()))
  return ret

def readFixed():
  ret = []
  line = fix_headings(stream.readline().strip('\n').strip('\r'))

  columns = [''.join(hits) for hits in re.findall('(\S+)(\s+|$)', line)]
  widths = [len(column) for column in columns]
  log.debug('columns/widths: {zip}'.format(zip=zip(columns, widths)))
  ret.append(columns)
  for line in stream.read().splitlines():
    ret.append([])
    pos = 0
    col = 0
    while pos < len(line):
      log.debug('{linenum} {col} {pos} {remain!r}'.format(linenum=len(ret), remain=line[pos:], **locals()))
      if col+1 < len(widths):
        ret[-1].append(line[pos:pos+widths[col]])
        pos += widths[col]
      else:
        ret[-1].append(line[pos:])
        pos = len(line)
      col += 1
  return ret

def emit_tags(start_tag, end_tag, extras={}):
  print '{start_tag}table{extra}{end_tag}'.format(extra=extras.get('table', ''), **locals())
  print '{start_tag}tbody{end_tag}'.format(**locals())
  for (rownum, row) in enumerate(data):
    print '{start_tag}tr{end_tag}'.format(**locals())
    for col in row:
      print '{start_tag}{tag}{end_tag}{col}{start_tag}/{tag}{end_tag}'.format(tag='th' if (rownum == 0) and args.headings else 'td', **locals())
    print '{start_tag}/tr{end_tag}'.format(**locals())
  print '{start_tag}/tbody{end_tag}'.format(**locals())
  print '{start_tag}/table{end_tag}'.format(**locals())

def emitHtml():
  emit_tags(
    start_tag='<',
    end_tag='>',
    extras={
      'table': ' border=\'1\'',
    })

def emitMarkdown():
  print '| {row} |'.format(row=' | '.join(data[0]))
  if args.headings:
    print '|' + (' ---- | ' * len(data[0]))
  print '\n'.join(['| {row} |'.format(row=' | '.join(row)) for row in data[1:]])

def emitBbcode():
  emit_tags(start_tag='[', end_tag=']')

def emitRotated():
  for (rownum, row) in enumerate(data[1 if args.headings else 0:]):
    for (colnum, col) in enumerate(row):
      print '{rownum:>06d} {colnum:>02d} {name}{col}'.format(name=data[0][colnum].ljust(33) if args.headings else '', **locals())
    
def emitJson():
  if args.headings:
    obj = []
    for datum in data[1:]:
      obj.append({})
      for pos in range(len(data[0])):
        heading = data[0][pos] if (pos < len(data[0])) else 'column {pos}'.format(**locals())
        value = datum[pos] if pos < len(datum) else None
        obj[-1][heading] = value
  else:
    obj = data
  print json.dumps(obj, indent=2, sort_keys=True)

parser = argparse.ArgumentParser(description='Turn data into a table')

input_group = parser.add_mutually_exclusive_group()
input_group.add_argument('-c', '--csv', dest='csv', action='store_true', help='Read CSV data')
input_group.add_argument('-s', '--separator', dest='separator', help='Specify regular expression to separate input columns')
input_group.add_argument('-f', '--fixed', dest='fixed', action='store_true', help='Fixed width columns')

output_group = parser.add_mutually_exclusive_group()
output_group.add_argument('-H', '--html', dest='html', action='store_true', help='Output HTML')
output_group.add_argument('-m', '--markdown', dest='markdown', action='store_true', help='Output Markdown')
output_group.add_argument('-b', '--bbcode', dest='bbcode', action='store_true', help='Output BBCode')
output_group.add_argument('-r', '--rotate', dest='rotate', action='store_true', help='Output rotate data')
output_group.add_argument('-j', '--json', dest='json', action='store_true', help='Output JSON')

parser.add_argument('--simple-headings', action='store_true', help='Process headings simply')
parser.add_argument('--file', help='File from which to read')

parser.add_argument('--headings', dest='headings', action='store_true', help='First row contains headings, not data')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')

args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

stream = sys.stdin
if args.file:
  stream = open(args.file)
else:
  if stream.isatty():
    parser.error('stdin must be redirected if --file is not specified')

data = []
widths = []

if args.csv:
  data = readCsv()
elif args.separator:
  data = readSeparator()
elif args.fixed:
  data = readFixed()
else:
  parser.error('Select an input method')

if all([(len(datum[0]) == 0) for datum in data]):
  data = [datum[1:] for datum in data]

if all([(len(datum[-1]) == 0) for datum in data]):
  data = [datum[:-1] for datum in data]

data = [[token.strip() for token in datum] for datum in data]

if args.html:
  emitHtml()
elif args.markdown:
  emitMarkdown()
elif args.bbcode:
  emitBbcode()
elif args.rotate:
  emitRotated()
elif args.json:
  emitJson()
else:
  parser.error('Select an output method')
