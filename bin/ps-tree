#! /usr/bin/env python3

import sys
import signal
import logging
import argparse

import bruno_tools
import ps

def visit(process, indent=0):
  global table

  table.add(process['pid'], process['ppid'], process['user'], process['elapsed_timedelta'], f'{" "*(indent*2)}{process["cmdline"]}')
  for child in processes.values():
    if child['ppid'] == process['pid']:
      visit(child, indent+1)

parser = argparse.ArgumentParser(description='Columnar pstree')
parser.add_argument('pids', nargs='*', type=int, help='Zero or more pids')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

processes = ps.Ps().get_processes()

log.info(f'{len(processes)=}')

if args.pids:
  base_pids = [pid for pid in args.pids if pid in processes.keys()]
else:
  base_pids = [process['pid'] for process in processes.values() if process['ppid'] not in processes.keys()]

table = bruno_tools.Table('pid', 'ppid', 'user', 'elapsed time', 'command')

log.info(f'{base_pids=}')
log.info(f'{len(base_pids)=}')
for pid in base_pids:
  visit(processes[pid])

table.close()
