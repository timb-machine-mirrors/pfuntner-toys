#! /usr/bin/env python3

import sys
import json
import signal
import logging
import argparse
import subprocess

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  if stdin:
    p.stdin.write(stdin.encode())
    p.stdin.close()
  if capture:
    (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  else:
    (stdout, stderr) = ('', '')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Query an AWS instance')
parser.add_argument('instance_id', help='AWS instance ID')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

(rc, stdout, stderr) = run('aws ec2 describe-instances')
if rc == 0 and stdout:
  reservations = json.loads(stdout).get('Reservations', [])
  # /Reservations/0/Instances/0/InstanceId 'i-04d7ac9c7285f8611'
  for reservation in reservations:
    for instance in reservation.get('Instances', []):
      if instance.get('InstanceId') == args.instance_id:
        json.dump(instance, sys.stdout, indent=2, sort_keys=True)
        print('')
else:
  parser.error(f'describe-instances failed: {rc}, {stderr!r}')
