#! /usr/bin/env python3

import os
import sys
import json
import logging
import argparse
import tempfile
import subprocess

def run(cmd, forgive=False):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.debug('Running {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = p.communicate()
  rc = p.wait()
  log.log(logging.ERROR if stderr and not forgive else logging.DEBUG, '{cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  if stderr and not forgive:
    exit(1)
  return (rc, stdout, stderr)

def read(filename, isYaml=False):
  root = None
  if os.path.exists(filename):
    if not os.path.isdir(filename):
      with open(filename) as stream:
        if isYaml:
          root = yaml.load(stream)
        else:
          root = json.load(stream)
    else:
      parser.error('{filename!r} is a directory')
  else:
    parser.error('{filename!r} does not exist')

  return root

def makefile(data):
  tmpfile = tempfile.NamedTemporaryFile(bufsize=0)
  log.debug('created {tmpfile.name}'.format(**locals()))
  if args.char_by_char:
    data = '\n'.join([c for c in data])
  tmpfile.write(data + '\n')
  tmpfile.flush()
  return tmpfile

def compare(root1, root2, path=[]):
  global differ

  if isinstance(root1, str) and isinstance(root2, str):
    file1 = makefile(root1)
    file2 = makefile(root2)
    (rc, stdout, stderr) = run(['diff'] + (['--side-by-side'] if args.side_by_side else []) + [file1.name, file2.name])
    file1.close()
    file2.close()
    if rc != 0:
      print('/{}:'.format('/'.join(path)))
      sys.stdout.write(stdout)
      differ = True
  elif type(root1) != type(root2):
    print('/{path}: {type1} vs {type2}'.format(path='/'.join(path), type1=type(root1).__name__, type2=type(root2).__name__))
    differ = True
  elif isinstance(root1, list):
    if len(root1) != len(root2):
      print('/{path}: {len1}-element list vs {len2}-element list'.format(path='/'.join(path), len1=len(root1), len2=len(root2)))
      differ = True
    for pos in range(len(root1)):
      if pos < len(root2):
        compare(root1[pos], root2[pos], path + [str(pos)])
  elif isinstance(root1, dict):
    if len(root1.keys()) != len(root2.keys()):
      print('/{path}: {len1}-element dict vs {len2}-element dict'.format(path='/'.join(path), len1=len(root1.keys()), len2=len(root2.keys())))
      differ = True
    for key in root1.keys():
      if key in root2:
        compare(root1[key], root2[key], path + [str(key)])
      else:
        print('/{path}: {key} is only present in one dictionary'.format(path='/'.join(path), key=key))
        differ = True
  elif root1 != root2:
    print('/{path}: {root1!r} vs {root2!r}'.format(path='/'.join(path), root1=root1, root2=root2))
    differ = True

parser = argparse.ArgumentParser(description='Compare two JSON or YAML files')
parser.add_argument('file1', help='First file to compare')
parser.add_argument('file2', help='Second file to compare')
parser.add_argument('-y', '--yaml', action='store_true', help='Read both files as yaml')
parser.add_argument('--y1', '--yaml1', dest='yaml1', action='store_true', help='Read first file as yaml')
parser.add_argument('--y2', '--yaml2', dest='yaml2', action='store_true', help='Read second file as yaml')
parser.add_argument('--char-by-char', action='store_true', help='Compare strings character by character')
parser.add_argument('--side-by-side', action='store_true', help='Perform side-by-side diff')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

log.debug('args: {args}'.format(**locals()))

if args.file1.endswith('.yaml'):
  args.yaml1 = True

if args.file2.endswith('.yaml'):
  args.yaml2 = True

if args.yaml or args.yaml1 or args.yaml2:
  yaml = __import__('yaml')
root1 = read(args.file1, isYaml=args.yaml or args.yaml1)
root2 = read(args.file2, isYaml=args.yaml or args.yaml2)

differ = False
compare(root1, root2)
exit(1 if differ else 0)
