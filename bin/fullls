#! /usr/bin/env python3

import os
import pwd
import grp
import stat
import logging
import argparse
import datetime


def bytes(amt):
  units = 'b'
  log.debug('{amt}{units}'.format(**locals()))
  if amt > 1000:
    amt = float(amt) / 1024
    units = 'Kb'
    log.debug('{amt:,f}{units}'.format(**locals()))
    if amt > 1000:
      amt /= 1024
      units = 'Mb'
      log.debug('{amt:,f}{units}'.format(**locals()))
      if amt > 1000:
        amt /= 1024
        units = 'Gb'
        log.debug('{amt:,f}{units}'.format(**locals()))
        if amt > 1000:
          amt /= 1024
          units = 'Tb'
          log.debug('{amt:,f}{units}'.format(**locals()))
    return '{amt:.2f}{units}'.format(**locals())
  else:
    return '{amt}{units}'.format(**locals())


class Dev(object):
  def __init__(self, path):
    log.debug('Getting information on {path}'.format(**locals()))

    self.path = path
    stats = os.statvfs(path)
    for attr in dir(stats):
      if attr.startswith('f_'):
        setattr(self, attr, getattr(stats, attr))

    self.pcent_full = (float(stats.f_blocks - stats.f_bfree) / stats.f_blocks) if stats.f_blocks else 1

    self.remain = bytes(stats.f_bfree * stats.f_bsize)


def get_perms(stats):
  mode_bits = stat.S_IMODE(stats)
  ret = 'r' if mode_bits & stat.S_IRUSR else '-'
  ret += 'w' if mode_bits & stat.S_IWUSR else '-'
  ret += 'x' if mode_bits & stat.S_IXUSR else '-'
  ret += 'r' if mode_bits & stat.S_IRGRP else '-'
  ret += 'w' if mode_bits & stat.S_IWGRP else '-'
  ret += 'x' if mode_bits & stat.S_IXGRP else '-'
  ret += 'r' if mode_bits & stat.S_IROTH else '-'
  ret += 'w' if mode_bits & stat.S_IWOTH else '-'
  ret += 'x' if mode_bits & stat.S_IXOTH else '-'
  return ret


def get_user(uid):
  try:
    user = pwd.getpwuid(uid)
  except:
    return str(uid)
  else:
    return user.pw_name


def get_group(gid):
  try:
    group = grp.getgrgid(gid)
  except:
    return str(gid)
  else:
    return group.gr_name


def show(label, text):
  print('{label:10} {text}'.format(**locals()))

parser = argparse.ArgumentParser(description='Full ls - lots of information about a file')
parser.add_argument('files', metavar='file', nargs='+', help='One or more files')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

mountpoints = {}
with open('/etc/mtab') as stream:
  for line in stream.read().splitlines():
    tokens = line.split()
    if len(tokens) > 1:
      mountpoint = tokens[1]
      if not mountpoint.startswith('/var/lib/docker/'):
        try:
          mountpoints[os.stat(mountpoint).st_dev] = Dev(mountpoint)
        except Exception as e:
          log.debug('Caught `{e!s}`'.format(**locals()))

for (pos, filename) in enumerate(args.files):
  if pos > 0:
    print('')
  if os.path.exists(filename):
    print(filename)
    stats = os.stat(filename)

    if stat.S_ISREG(stats.st_mode):
      print('Regular file')
    elif stat.S_ISDIR(stats.st_mode):
      print('Directory')
    elif stat.S_ISCHR(stats.st_mode):
      print('Character-special file')
    elif stat.S_ISFIFO(stats.st_mode):
      print('FIFO')
    elif stat.S_ISSOCK(stats.st_mode):
      print('Socket')
    else:
      print('Unknown type of file')

    show(
      'Dev',
      '{dev}, Mounted on {mount_point}, {full:.2%} full, {remain} free'.format(
        dev=stats.st_dev, mount_point=mountpoints.get(stats.st_dev, '?').path,
        full=mountpoints.get(stats.st_dev, '?').pcent_full,
        remain=mountpoints.get(stats.st_dev, '?').remain,
      )
    )
    show('Inode', '{stats.st_ino}, {stats.st_nlink} links'.format(**locals()))

    show('Mode', '{perm_string} {stats.st_mode:04o}'.format(perm_string=get_perms(stats.st_mode), **locals()))

    if stat.S_ISVTX & stats.st_mode:
      print('Sticky bit')

    show('User', '{user}{setuid}'.format(
      user=get_user(stats.st_uid), setuid=', setuid bit' if stats.st_mode & stat.S_ISUID else ''))
    show('Group', '{group}{setgid}'.format(
      group=get_group(stats.st_gid), setgid=', setgid bit' if stats.st_mode & stat.S_ISGID else ''))

    show('Size', '{}'.format(bytes(stats.st_size)))
    show('Modified', '{}'.format(datetime.datetime.fromtimestamp(stats.st_mtime)))
    show('Changed', '{}'.format(datetime.datetime.fromtimestamp(stats.st_ctime)))
    show('Accessed', '{}'.format(datetime.datetime.fromtimestamp(stats.st_atime)))
  else:
    print('Not found: {filename}'.format(**locals()))
