#! /usr/bin/env python

import re
import logging
import argparse
import subprocess

def run(cmd, capture=False):
  if isinstance(cmd, basestring):
    cmd = cmd.split()
  log.info('Running {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None)
  (stdout, stderr) = p.communicate()
  rc = p.wait()
  log.log(logging.DEBUG if rc == 0 else logging.ERROR, 'Ran {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  if rc != 0:
    parser.error('{cmd} failed'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='pullfrommine - pull from my fork after forced push')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.INFO)

regexp = re.compile('^\*\s+(\S+)$', flags=re.MULTILINE)

# git checkout master && git branch -D externalize_pull_file && git fetch bruno && git checkout externalize_pull_file

(rc, stdout, stderr) = run('git branch', capture=True)
branches = regexp.findall(stdout)
if len(branches) == 1:
  branch = branches[0]
  if branch != 'master':
    parser.error('Current branch cannot be `master`')
  log.debug('branch is {branch!r}'.format(**locals()))
  run('git checkout master')
  run('git branch -D {branch}'.format(**locals()))
  run('git fetch bruno')
  run('git checkout {branch}'.format(**locals()))
else:
  parser.error('Parsed branches {branches} from {stdout!r} using {regexp.pattern!r}'.format(**locals()))
