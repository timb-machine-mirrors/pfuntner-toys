#! /usr/bin/env python3

import re
import os
import sys
import logging
import argparse
import subprocess

def local(filename):
  ret = None
  if os.path.isfile(filename):
    try:
      with open(filename) as stream:
        ret = stream.read()
    except Exception as e:
      log.warning('Caught `{e!s}` while reading {filename!r}'.format(**locals()))
  else:
    log.warning('Could not find {filename!r}'.format(**locals()))
  return ret

def remote(location, filename):
  ret = None
  try:
    cmd = ['ssh', '-q', location, 'cat', filename]
    log.debug('cmd: {cmd}'.format(**locals()))
  except Exception as e:
    log.warning('Caught `{e!s}` while reading {filename!r}'.format(**locals()))
  else:
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (ret, stderr) = p.communicate()
    rc = p.wait()
    if (rc != 0) or stderr:
      log.warning('Handled error {stderr!r} while reading {filename!r}'.format(**locals()))
      ret = None
  return ret

parser = argparse.ArgumentParser(description='cat local or remote files')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging messages')
parser.add_argument('files', metavar='file', nargs='+', help='List of remote/local files')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

regexp = re.compile('^([^/]+):(.+)$')
for filename in args.files:
  match = regexp.search(str(filename))
  if match:
    data = remote(match.group(1), match.group(2))
  else:
    data = local(filename)

  if data != None:
    sys.stdout.write(data)
