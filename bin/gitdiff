#! /usr/bin/env python3

import re
import sys
import pdb
import logging
import argparse
import tempfile
import subprocess

def banner(filename):
  border = '*' * (len(filename)+4)
  print(border)
  print('* {filename} *'.format(**locals()))
  print(border)

def see(name):
  value = eval(name)
  log.debug('{name}: {value!r}'.format(**locals()))

def extract(regexp, line):
  match = regexp.search(line)
  return match.group(1) if match else None

def run(cmd):
  if isinstance(cmd, str):
    cmd = cmd.strip()

  log.debug('Running: {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = p.communicate()
  return (p.wait(), stdout, stderr)

parser = argparse.ArgumentParser(description='Perform diff against another git branch')

group = parser.add_mutually_exclusive_group()
group.add_argument('--side-by-side', action='store_true', help='Show diffs side by side')
group.add_argument('-C', '--context', help='Show X lines before and after each diff')

parser.add_argument('--width', help='Set width of output')
parser.add_argument('-v', '--verbose', action='store_true', help='Enable debugging')
parser.add_argument('-d', '--debug', action='store_true', help='Enable pdb')
parser.add_argument('branch', help='Name of branch to compare against')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

see('args')

diff_args = []
if args.side_by_side:
  diff_args.append('--side-by-side')
if args.context:
  diff_args += ['-C', args.context]
if args.width:
  diff_args += ['--width', args.width]
see('diff_args')

filename_regexp = re.compile('^diff\s+--git\s+a/(.*)\s+b/')

temp_file = tempfile.NamedTemporaryFile(bufsize=0)
see('temp_file.name')

(rc, stdout, stderr) = run(['git', 'diff', args.branch])
if (rc != 0) or stderr:
  parser.error('`git diff` failed: {rc}, {stderr!r}'.format(**locals()))

for line in stdout.splitlines():
  filename = extract(filename_regexp, line)
  if filename:
    banner(filename)
    (rc, stdout, stderr) = run(['git', 'cat-file', '-p', '{args.branch}:{filename}'.format(**locals())])
    temp_file.truncate(0)
    temp_file.seek(0)
    temp_file.write(stdout)

    (rc, stdout, stderr) = run(['diff'] + diff_args + [temp_file.name, filename])
    sys.stdout.write(stdout)
    if args.debug:
      pdb.set_trace()

    print('')
