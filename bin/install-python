#! /usr/bin/env python3

import re
import sys
import base64
import shlex
import signal
import logging
import argparse
import subprocess

class Apt(object):
  def __init__(self, host):
    self.host = host
    log.info(f'{self.host}: updating apt')
    (rc, stdout, stderr) = run(self.host, 'apt-get update', read_only=False)
    self.updated = rc == 0

  def install(self, package):
    if self.updated:
      log.info(f'{self.host}: installing {package}')
      (rc, stdout, stderr) = run(self.host, f'apt-get install -y {package}', read_only=False)
      return rc == 0
    else:
      return False

class Apk(object):
  def __init__(self, host):
    self.host = host

  def install(self, package):
    log.info(f'{self.host}: installing {package}')
    (rc, stdout, stderr) = run(self.host, f'apk add {package}', read_only=False)
    return rc == 0

class Yum(object):
  def __init__(self, host):
    self.host = host

  def install(self, package):
    log.info(f'{self.host}: installing {package}')
    (rc, stdout, stderr) = run(self.host, f'yum install -y {package}', read_only=False)
    return rc == 0

def run(target, cmd, capture=True, read_only=True):
  if isinstance(cmd, list):
    cmd = shlex.join(cmd)

  if args.proxy:
    cmd = f'HTTP_PROXY={args.proxy} HTTPS_PROXY={args.proxy} {cmd}'

  if args.docker:
    cmd = ['docker', 'exec', target, 'sh', '-c', cmd]
  else:
    log.debug(f'Encoding {cmd!r} for the trip!')
    cmd = ['ssh'] + (['-q'] if args.quiet else []) + [target, '--', f'echo {base64.b64encode(cmd.encode()).decode()} | base64 -d | sudo -i']

  if read_only or not args.dry_run:
    log.debug('Executing {cmd}'.format(**locals()))
    p = None
    try:
      p = subprocess.Popen(cmd, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None)
    except Exception as e:
      (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

    if p:
      if capture:
        (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
      else:
        (stdout, stderr) = ('', '')
      rc = p.wait()

    log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  else:
    log.warning('Skipping {cmd} because of --dry-run'.format(**locals()))
    (rc, stdout, stderr) = (0, None, None)

  return (rc, stdout, stderr)

def get_os_info(host):
  """
    NAME="Ubuntu"
    VERSION="20.04.3 LTS (Focal Fossa)"
    ID=ubuntu
    ID_LIKE=debian
    PRETTY_NAME="Ubuntu 20.04.3 LTS"
    VERSION_ID="20.04"
    HOME_URL="https://www.ubuntu.com/"
    SUPPORT_URL="https://help.ubuntu.com/"
    BUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"
    PRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"
    VERSION_CODENAME=focal
    UBUNTU_CODENAME=focal

    aws-ubuntu2204: ID=ubuntu
    aws-ubuntu2204: ID_LIKE=debian

    ubuntu: ID=ubuntu
    ubuntu: ID_LIKE=debian

    debian: ID=debian

    gcp-ubuntu2204: ID=ubuntu
    gcp-ubuntu2204: ID_LIKE=debian
  """
  os_info = dict()
  (rc, stdout, stderr) = run(host, 'cat /etc/os-release')
  for line in stdout.splitlines():
    match = re.search(r'^(\w+)=(.+)$', line)
    if match:
      (key, value) = match.groups()
      os_info[key] = eval(value) if value[0] in '\'"' else value
  return os_info

def get_python_info(host):
  for interpreter in ['python', 'python3']:
    (rc, stdout, stderr) = run(host, f'{interpreter} -c "exit(42)"')
    if rc == 42:
      (rc, stdout, stderr) = run(host, f'which {interpreter}')
      # some systems don't have `which`
      if not stdout.strip():
        log.info(f'{host}: switching to `find` to find {interpreter} since `which` didn\'t work')
        (rc, stdout, stderr) = run(host, f'find $(echo $PATH | tr : \\ ) -maxdepth 1 -name {interpreter} -perm -100 | head -1')

      executable = stdout.strip() or interpreter

      (rc, stdout, stderr) = run(host, f'{interpreter} --version')
      return (executable, stdout.strip())
    else:
      log.info(f'{host}: could not find {interpreter}')

  return (None, None)

def install(host, package):
  os_info = get_os_info(host)
  package_manager_class = package_managers.get(os_info.get('ID'))
  if package_manager_class:
    package_manager = package_manager_class(host)
    return package_manager.install(package)
  else:
    log.info(f'{host}: could not find package manager for {os_info}')
    return False

parser = argparse.ArgumentParser(description='Install Python on targets')
parser.add_argument('hosts', metavar='host', nargs='+', help='One or more targets')
parser.add_argument('-d', '--docker', action='store_true', help='Target(s) is/are Docker containers')
parser.add_argument('-p', '--proxy', help='HTTP proxy for package manager to use')
parser.add_argument('--dry-run', action='store_true', help='Do not perform commands that will change the target')
parser.add_argument('-q', '--quiet', action='store_true', help='Use ssh --quiet')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

package_managers = {
  'almalinux': Yum,
  'alpine': Apk,
  'centos': Yum,
  'debian': Apt,
  'redhat': Yum,
  'rhel': Yum,
  'ubuntu': Apt,
}

for host in args.hosts:
  (rc, stdout, stderr) = run(host, 'exit 42')
  if rc == 42:
    log.info(f'{host}: alive')
    (executable, version) = get_python_info(host)
    if executable:
      print(f'{host}: {executable}: {version}')
    else:
      # No python found
      if install(host, 'python3'):
        if not args.dry_run:
          (executable, version) = get_python_info(host)
          if executable:
            print(f'{host}: After installing Python 3, {executable}: {version}')
          else:
            print(f'{host}: After installing Python 3, still couldn\'t find Python!')
      else:
        print(f'{host}: Could not install Python 3')
  else:
    print(f'{host}: unreachable')
