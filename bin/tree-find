#! /usr/bin/env python3

import re
import sys
import yaml
import json
import logging
import argparse

def contains(haystack, needle):
  ret = False
  if isinstance(haystack, dict):
    if isinstance(needle, dict):
      if not(set(needle.keys()) - set(haystack.keys())):
        ret = True
        for (key, value) in needle.items():
          ret &= contains(haystack[key], value)
  elif isinstance(haystack, list):
    if isinstance(needle, list):
      ret = bool(set(needle) - set(haystack))
  else:
    ret = needle == haystack

  log.debug(f'contains({haystack}, {needle}) => {ret}')
  return ret

def dive(filename, root):
  if isinstance(root, list):
    for node in root:
      dive(filename, node)
  elif isinstance(root, dict):
    if contains(root, criteria):
      print('{filename}{criteria}'.format(filename=(filename + ': ') if filename else '', criteria=json.dumps(root)))
    for node in root.values():
      dive(filename, node)

def parse(data, filename):
  root = None
  if filename:
    if yaml_regexp.search(filename):
      try:
        root = yaml.load(data, Loader=yaml.Loader)
      except Exception as e:
        parser.error(f'Could not parse {filename!r}: {e!s}')
    elif json_regexp.search(filename):
      try:
        root = json.loads(data)
      except Exception as e:
        parser.error(f'Could not parse {filename!r}: {e!s}')
    else:
      parser.error(f'{filename!r} is not JSON or YAML')
  else:
    try:
      root = yaml.load(data, Loader=yaml.Loader)
    except Exception as e:
      log.debug(f'Could not parse {filename!r}: {e!s}')
    if not root:
      try:
        root = json.loads(data)
      except Exception as e:
        parser.error(f'Could not parse {filename!r}: {e!s}')
    if not root:
      parser.error('Could not parse stdin as JSON or YAML')

  return root

def process(filename=None):
  if filename:
    try:
      log.info(f'Reading {filename!r}')
      stream = open(filename)
      data = stream.read()
    except Exception as e:
      parser.error(f'Cannot open {filename!r}: {e!s}')
  else:
    log.info(f'Reading stdin')
    if sys.stdin.isatty():
      parser.error(f'stdin must be redirected if no files are specified')
    data = sys.stdin.read()

  dive(filename, parse(data, filename))

parser = argparse.ArgumentParser(description='Search a yaml/json tree')
parser.add_argument('criteria', help='Criteria to search for in JSON form (eg: `{ "package": { "name": "foo" } }`')
parser.add_argument('files', metavar='file', nargs='*', help='Zero or more files to read')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
# log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

yaml_regexp = re.compile('\.ya?ml$', flags=re.IGNORECASE)
json_regexp = re.compile('\.json$', flags=re.IGNORECASE)

try:
  criteria = json.loads(args.criteria)
except Exception as e:
  parser.error(f'Could not process {args.criteria!r}: {e!s}')

if args.files:
  list(map(process, args.files))
else:
  process()
