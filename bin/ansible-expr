#! /usr/bin/env python3

import signal
import logging
import argparse
import tempfile
import subprocess

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))

  p = None
  try:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  except Exception as e:
    (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

  if p:
    if stdin:
      p.stdin.write(stdin.encode())
    if capture:
      (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    else:
      (stdout, stderr) = ('', '')
    rc = p.wait()

  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Print value of Ansible expression')
parser.add_argument('--host', help='Target host of temporary Ansible playbook.  Default: localhost')
parser.add_argument('--docker', action='store_true', help='Use Ansible Docker connection')
parser.add_argument('--extra-vars', '-e', action='append', help='Specify extra variables')
parser.add_argument('expr', help='Expression to evaluate')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

log.info(f'args: {args}')

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

playbook = tempfile.NamedTemporaryFile(mode='w')
print(f"""- name: Print expression
  hosts: {args.host or 'localhost'}
  tasks:
  - debug:
      msg: "{args.expr}: [{args.expr}]"
""".replace('[', '{{ ').replace(']', ' }}'), file=playbook)

playbook.flush()
extra_vars = list()
for extra_var in args.extra_vars or []:
  extra_vars += ['-e', extra_var]
run(['ansible-playbook'] + (['-c', 'docker', '-i', args.host+','] if args.docker else []) + extra_vars + [playbook.name], capture=False)
