#! /usr/bin/env python3

import re
import time
import json
import logging
import argparse
import datetime
import subprocess

def emit(s, level):
  if (args.verbose or 0) >= level:
    log.log(logging.INFO if level == 1 else logging.DEBUG, s)

def info(s):
  emit(s, 1)

def debug(s):
  emit(s, 2)

def run(cmd):
  if isinstance(cmd, str):
    cmd = cmd.split()
  info('Executing {cmd}'.format(**locals()))
  start = datetime.datetime.now()
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  while p.poll() == None:
    if args.timeout != None and (datetime.datetime.now()-start).total_seconds() > args.timeout:
      debug('timeout')
      p.kill()
      return (-9, '', '')
      break
    debug('Sleeping before next poll')
    time.sleep(.1)

  (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  rc = p.wait()
  debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Ping with Ansible')
parser.add_argument('host', help='Host to ping')
parser.add_argument('-c', '--count', type=int, help='Number of pings')
parser.add_argument('-t', '--timeout', type=float, help='Number of seconds to wait for ping to finish')
parser.add_argument('-d', '--delay', type=float, default=5, help='Number of seconds between pings (default: 5)')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.INFO)

debug(f'args: {args}')

if (args.count != None) and (args.count <= 0):
  parser.error(f'`{args.count}` is an invalid count')

if (args.timeout != None) and (args.timeout <= 0):
  parser.error(f'`{args.timeout}` is an invalid timeout')

if args.delay < 0:
  parser.error(f'`{args.delay}` is an invalid delay')

cmd = f'ansible {args.host} -m ping'.split()
regexp = re.compile('^\S+\s+\|\s+SUCCESS\s+=>\s+')

count = 0
last = datetime.datetime.now()
while True:
  if args.count and count >= args.count:
    break

  now = datetime.datetime.now()
  debug(f'now:  {now!s}')
  debug(f'last: {last!s}')
  if (count > 0) and (now-last < datetime.timedelta(seconds=args.delay)):
    debug('Sleeping before next ping')
    time.sleep(args.delay)
    now = datetime.datetime.now()

  """
    $ ansible foo -m ping
    aws-rhel8 | SUCCESS => {
        "ansible_facts": {
            "discovered_interpreter_python": "/usr/libexec/platform-python"
        },
        "changed": false,
        "ping": "pong"
    }
    $
  """
  (rc, stdout, stderr) = run(cmd)
  stdout = regexp.sub('', stdout)
  debug(f'Post substitution: {stdout!r}')
  try:
    response = json.loads(stdout)
  except Exception as e:
    debug(f'Caught: {e!s}')
    response = {}
  if (rc == 0) and (response.get('ping') == 'pong'):
    log.info(f'{args.host} pong')
  else:
    log.info(f'{args.host} can\'t ping')

  last = now
  count += 1
