#! /usr/bin/env python3

import sys
import docker
import datetime
import traceback
import subprocess

"""
  Grafana:
    webserver port: 3000
  Graphite:
    webserver port: 80
    metric input:
      port: 20003
      example: echo "local.random.diceroll 1 `date +%s`" | nc localhost 20003
"""

def whereami():
  stack = traceback.extract_stack()
  (filename, lineno, function, statement) = stack[-2]
  return "%s:%s" % (filename, lineno)

def say(s):
  print("%s %s: %s" % (datetime.datetime.now(), whereami(), s))

def hostname(style=None):
  cmd = ["hostname"]
  if style:
    cmd.append("--%s" % style)
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = p.communicate()
  stdout = stdout.decode('utf-8')
  stderr = stderr.decode('utf-8')
  rc = p.wait()
  assert (rc == 0) and (not stderr), "%s failed: %d, %s, %s" % (cmd, rc, repr(stdout), repr(stderr))
  return stdout.split('\n')[0]

client = docker.from_env()

say("Starting graphite")

"""
  from https://github.com/hopsoft/docker-graphite-statsd:

    docker run -d\
     --name graphite\
     --restart=always\
     -p 80:80\
     -p 2003-2004:2003-2004\
     -p 2023-2024:2023-2024\
     -p 8125:8125/udp\
     -p 8126:8126\
     hopsoft/graphite-statsd
    
  Mapped Ports
    
    Host	Container	Service
    80		80		nginx
    2003	2003		carbon receiver - plaintext
    2004	2004		carbon receiver - pickle
    2023	2023		carbon aggregator - plaintext
    2024	2024		carbon aggregator - pickle
    8125	8125		statsd
    8126	8126		statsd admin

"""

graphite = client.containers.run("hopsoft/graphite-statsd", name="graphite", ports={80: 80, 2003: 20003, 2004: 20004, 2023: 2023, 2024: 2024, 8125: "8125/udp", 8126: 8126}, detach=True)

say("Starting grafana")

"""
  from https://hub.docker.com/r/grafana/grafana/

  docker run -i -p 3000:3000 \
    -e "GF_SERVER_ROOT_URL=http://grafana.server.name"  \
    -e "GF_SECURITY_ADMIN_PASSWORD=secret  \
    grafana/grafana
"""

grafana = client.containers.run("grafana/grafana", name="grafana", ports={3000: 3000}, environment={"GF_SERVER_ROOT_URL": "http://%s" % hostname("long")}, detach=True)
