#! /usr/bin/env python3

import os
import re
import sys
import socket
import hashlib
import logging
import argparse
import datetime
import subprocess

def warn(msg):
  log.info(msg)

def smartSplit(obj, strip_whitespace=False):
  if isinstance(obj, str):
    obj = obj.splitlines()
  if isinstance(obj, list):
    if strip_whitespace:
      obj = [s.strip() for s in obj]
    if len(obj) == 1:
      obj = obj[0]
  return obj

def show(expr):
  try:
    value = eval(expr)
  except Exception as e:
    warn('Caught {e!s} while evaluating {value!r}'.format(**locals()))
  else:
    value = smartSplit(value)
    print('{expr}: {value!r}'.format(**locals()))

def cat(filename):
  if os.path.exists(filename):
    if os.path.isfile(filename):
      try:
        with open(filename) as stream:
          data = stream.read().splitlines()
      except Exception as e:
        warn('Caught {e!s} reading {filename!s}'.format(**locals()))
      else:
        print('{filename!r}: {data}'.format(**locals()))
    else:
      log.info('{filename!r} is not a file'.format(**locals()))
  else:
    log.info('{filename!r} does not exist'.format(**locals()))

def hash(filename):
  hasher = hashlib.md5()
  with open(filename) as stream:
    hasher.update(stream.read().encode('utf-8'))
  return hasher.hexdigest()

def run(cmd, silent=False, strip_whitespace=False):
  ret = ''

  if isinstance(cmd, str):
    cmd = cmd.split()
  try:
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  except Exception as e:
    warn('Caught {e!s} from {cmd}'.format(**locals()))
  else:
    (stdout, stderr) = p.communicate()
    rc = p.wait()
    log.debug('run({cmd}): {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
    if stdout:
      ret = stdout
      if not silent:
        stdout = smartSplit(stdout, strip_whitespace=strip_whitespace)
        print('{cmd}: {stdout!r}'.format(**locals()))

  if isinstance(ret, str) and strip_whitespace:
    ret = ret.strip()
  return ret

def parse_fixed_table(data):
  ret = {}
  data = data.replace('\r', '').splitlines()
  log.debug('data: {data}'.format(**locals()))
  if len(data) > 1:
    headings = re.findall(r'\w+\s+', data[0])
    pos = 0
    log.debug('data[1]: {data}'.format(data=data[1]))
    for colnum in range(len(headings)):
      log.debug('{colnum} {pos} {remain!r}'.format(remain=data[1][pos:], **locals()))
      ret[headings[colnum].strip()] = data[1][pos:pos+len(headings[colnum])].strip()
      pos += len(headings[colnum])
  log.debug('fixed table: {ret}'.format(**locals()))
  return ret

def human(value):
  units = 'b'
  value = float(value)
  if value > 1000:
    value /= 1024
    units = 'KB'
    if value > 1000:
      value /= 1024
      units = 'MB'
      if value > 1000:
        value /= 1024
        units = 'GB'
        if value > 1000:
          value /= 1024
          units = 'TB'
  return '{value}{units}'.format(value=int(value), units=units)

def extract(cmd, pattern, formatter, label=None):
  value = None
  stdout = run(cmd, silent=True)
  match = re.search(pattern, str(stdout), flags=re.MULTILINE)
  if match:
    value = formatter(match)
    if label:
      print('{label}: {value}'.format(**locals()))
  return value

def ram_usage(match):
  total = float(match.group(1))
  used = float(match.group(2))
  free = float(match.group(3))
  return '{free}/{total} {pcent:.2f}%'.format(free=human(free), total=human(total), pcent=free*100/total)

def get_version():
  git_used = False
  ret = '?'

  dir = os.path.dirname(sys.argv[0])
  base = os.path.basename(sys.argv[0])
  cwd = os.getcwd()
  try:
    os.chdir(dir)
  except:
    pass
  else:
    stdout = run(['git', 'log', '-1', base], silent=True)
    """
      commit {SHA1}
      Author: {FIRST_NAME} {LAST_NAME} <{EMAIL_ADDRESS}>
      Date:   Wed Jan 16 09:32:03 2019 -0500
      . 
      . 
      . 
    """
    match = re.search(r'^commit\s+(\S+).*\nDate:\s+(([A-Z][a-z]{2} ){2}[ 0123]\d (\d{2}:){2}\d{2} \d{4})', str(stdout), re.DOTALL)
    log.debug('`git log 0` search groups: {groups}'.format(groups=match.groups() if match else None))
    if match:
      commit = match.group(1)[:6]
      timestamp = datetime.datetime.strptime(match.group(2), '%a %b %d %H:%M:%S %Y')
      log.debug('timestamp: {timestamp!s}'.format(**locals()))

      stdout = run('git branch', silent=True)
      match = re.search(r'\*\s(\S+)', str(stdout), re.DOTALL)
      log.debug('`git branch` search groups: {groups}'.format(groups=match.groups() if match else None))
      if match:
        branch = match.group(1)

        stdout = run('git remote -v', silent=True)
        """
          origin  https://github.com/pfuntner/gists.git (fetch)
          origin  git@github.com:pfuntner/toys.git (fetch)
        """
        match = re.search('origin\s+[^:@]+[:@]/?/?([^/]+/.*)\.git\s+\(fetch\)', str(stdout))
        log.debug('`git remote -v` groups: {groups}'.format(groups=match.groups() if match else None))
        if match:
          ret = '{timestamp!s}, {repo}, {branch}, {commit}'.format(repo=match.group(1), **locals())
          git_used = True     

  os.chdir(cwd)

  if not git_used:
    ret = str(datetime.datetime.fromtimestamp(os.path.getmtime(sys.argv[0])))

  return ret + ', ' + hash(sys.argv[0])

parser = argparse.ArgumentParser(description='General "what am I" with respect to host system')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

print('It is {} UTC'.format(datetime.datetime.utcnow().strftime('%a %Y-%m-%d %H:%M:%S.%f')))
print('I am {pgm}: {version}'.format(pgm=sys.argv[0], version=get_version()))
print('')
run('uname -a')
run('uname -n')
run('uname -s')
run('uname -v')
run('uname -r')
run('uname -m')
run('uname -p')
run('uname -i')
run('uname -o')

print('')
cat('/etc/system-release') or cat('/etc/os-release')
show('sys.version')
show('sys.platform')
show('sys.path')

print('')
show('socket.gethostname()')
show('socket.gethostbyname(socket.gethostname())')
show('socket.gethostbyname_ex(socket.gethostname())')

if 'win' in sys.platform.lower():
  out = run('ipconfig', silent=True)
  """
    Wireless LAN adapter Wi-Fi:
    
       Connection-specific DNS Suffix  . : cisco.com
       IPv6 Address. . . . . . . . . . . : 2001:420:2160:1280:c87b:506d:9252:1a2f
       Link-local IPv6 Address . . . . . : fe80::8ce3:d8ea:8f47:19c2%24
       IPv4 Address. . . . . . . . . . . : 10.150.160.21
       Subnet Mask . . . . . . . . . . . : 255.255.252.0
       Default Gateway . . . . . . . . . : fe80::5:73ff:fea0:3e9%24
                                           10.150.160.1
  """
  ipconfig_adapter_regexp = re.compile('^([A-Z][^:]+):')
  ipconfig_attr_regexp = re.compile(r'^\s+([^.]+)[ .]*: (\S+)')

  adapter = None
  attrs = {}
  for line in out.splitlines():
    match = ipconfig_adapter_regexp.search(str(line))
    if match:
      if 'IPv4 Address' in attrs:
        break
      adapter = match.group(1)
      attrs = { 'adapter': adapter }
      if ('VirtualBox' in adapter) or ('Docker' in adapter):
        adapter = None
      log.debug('Adapter match: {adapter!r} {line!r}'.format(**locals()))
    elif adapter:
      match = ipconfig_attr_regexp.search(str(line))
      if match:
        log.debug('Attr match: {groups} {line!r}'.format(groups=match.groups(), **locals()))
        attrs[match.group(1).strip()] = match.group(2).strip()
      else:
        log.debug('Failed to match attr regexp: {line!r} {ipconfig_attr_regexp.pattern!r}'.format(**locals()))

  log.debug('attrs: {attrs}'.format(**locals()))
  if 'IPv4 Address' in attrs:
    print('ipconfig: {ip} ({adapter})'.format(ip=attrs['IPv4 Address'], **locals()))

  """
    $ wmic MemoryChip get Capacity, BankLabel
    BankLabel  Capacity
    BANK 0     8589934592
    BANK 2     8589934592
  """
  print('')

  out = run('wmic MemoryChip get Capacity, BankLabel', silent=True)
  if out:
    out = out.splitlines()
    total = 0.0
    for line in out[1:]:
      bytes = 0
      tokens = line.split()
      try:
        bytes = int(tokens[-1])
      except:
        pass
      else:
        total += bytes

    free = extract('wmic os get freephysicalmemory', '(\d+)', lambda match: float(match.group(1))*1024)

    if total and free:
      print('Free RAM: {free}/{total} {pcent:.2f}%'.format(free=human(free), total=human(total), pcent=100*free/total))

  """
    $ wmic cpu list | table --fixed --rotate --headings
    000000 00 AddressWidth                     64
    000000 01 Architecture                     9
    000000 02 Availability                     3
    000000 03 Caption                          Intel64 Family 6 Model 142 Stepping 10
    000000 04 ConfigManagerErrorCode
    000000 05 ConfigManagerUserConfig
    000000 06 CpuStatus                        1
    000000 07 CreationClassName                Win32_Processor
    000000 08 CurrentClockSpeed                1910
    000000 09 CurrentVoltage                   12
    000000 10 DataWidth                        64
    000000 11 Description                      Intel64 Family 6 Model 142 Stepping 10
    000000 12 DeviceID                         CPU0
    000000 13 ErrorCleared
    000000 14 ErrorDescription
    000000 15 ExtClock                         100
    000000 16 Family                           198
    000000 17 InstallDate
    000000 18 L2CacheSize                      1024
    000000 19 L2CacheSpeed
    000000 20 LastErrorCode
    000000 21 Level                            6
    000000 22 LoadPercentage                   10
    000000 23 Manufacturer                     GenuineIntel
    000000 24 MaxClockSpeed                    2112
    000000 25 Name                             Intel(R) Core(TM) i7-8650U CPU @ 1.90GHz
    000000 26 OtherFamilyDescription
  """
  out = run('wmic cpu list', silent=True)
  cpu_table = parse_fixed_table(out)

  cpu_name = cpu_table.get('Name')
  if cpu_name:
    print('CPU name: {cpu_name}'.format(**locals()))
else:
  # Linux
  out = run('/sbin/ifconfig', silent=True)
  if out:
    adapter_regexp = re.compile('^(\w+):')
    ignore_adapter_regexp = re.compile('(lo|docker)')
    attrs = {}
    for line in out.splitlines():
      match = adapter_regexp.search(str(line))
      if match:
        if attrs:
          if (not ignore_adapter_regexp.match(attrs['name'])) and 'inet' in attrs:
            print('ifconfig: {inet} ({name})'.format(**attrs))
          attrs = {}
        attrs['name'] = match.group(1)
      elif attrs:
        tokens = line.split()
        if tokens:
          curr = 0
          if tokens[0] in ['RX', 'TX']:
            if tokens[0] not in attrs:
              attrs[tokens[0]] = {}
            base = attrs[tokens[0]]
            curr += 1
          else:
            base = attrs
          while curr+1 < len(tokens):
            name = tokens[curr]
            curr += 1
            value = tokens[curr]
            curr += 1
            while (curr < len(tokens)) and (value[0] == '(') and (value[-1] != ')'):
              value += ' ' + tokens[curr]
              curr += 1
            base[name] = value
    if attrs:
      if (not ignore_adapter_regexp.match(attrs['name'])) and 'inet' in attrs:
        print('ifconfig: {inet} ({name})'.format(**attrs))

  print('')

  extract('free -b', '^Mem:\s+(\d+)\s+(\d+)\s+(\d+)', ram_usage, 'Free RAM')

  extract('lscpu', '^Model name:\s+(.+)$', lambda match: match.group(1).strip(), 'CPU name')
  run('uptime', strip_whitespace=True)

pwd = os.getcwd()
stat = os.statvfs(pwd)
print('{pwd}: {pcent:.2f}% of {total_space} full, {reserve}% reserve'.format(
  pcent=(stat.f_blocks-stat.f_bavail)*100.0/stat.f_blocks,
  total_space=(human(stat.f_blocks*stat.f_bsize)),
  reserve=(stat.f_bfree-stat.f_bavail)*100/stat.f_blocks,
  **locals()))
