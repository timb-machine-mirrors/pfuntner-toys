#! /usr/bin/env python3

import sys
import shlex
import signal
import logging
import argparse
import subprocess

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = shlex.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))

  p = None
  try:
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  except Exception as e:
    (rc, stdout, stderr) = (-1, '', f'Caught {e!s} running {cmd!r}')

  if p:
    if stdin:
      p.stdin.write(stdin.encode())
      p.stdin.close()
    if capture:
      (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
    else:
      (stdout, stderr) = ('', '')
    rc = p.wait()

  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

class Table(object):
  def __init__(self, *args):
    if len(args) == 1 and type(args[0]) in (list, tuple):
      self.headings = args[0]
    else:
      self.headings = args

    try:
      self.p = subprocess.Popen(['column', '-t', '-s\t'], stdin=subprocess.PIPE, text=True)
    except Exception as e:
      log.error(f'Error opening `column`: {e!s}. On Ubuntu, try installing the bsdmainutils package')
      exit(1)

    self.p.stdin.write('\t'.join([str(heading) for heading in self.headings]) + '\n')

  def add(self, *args):
    self.p.stdin.write('\t'.join([str(arg) for arg in args]) + '\n')

  def close(self):
    self.p.stdin.close()
    self.p.wait()

def process(host, path=[]):
  """
    [centos@ip-172-31-60-9 ~]$ curl http://169.254.169.254/latest/meta-data
    ami-id
    ami-launch-index
    ami-manifest-path
    block-device-mapping/
    events/
    hostname
    identity-credentials/
    instance-action
    instance-id
    instance-life-cycle
    instance-type
    local-hostname
    local-ipv4
    mac
    metrics/
    network/
    placement/
    profile
    public-hostname
    public-ipv4
    public-keys/
    reservation-id
    security-groups
    services/
    system
    [centos@ip-172-31-60-9 ~]$
  """
  (rc, stdout, stderr) = run(['ssh', host, f'curl http://169.254.169.254/latest/meta-data/{"/".join(path)}'])
  if not path and rc != 0:
    log.error(f'ssh to {host!r} failed: {stderr!r}')
  else:
    for attr in stdout.splitlines():
      if attr.endswith('/'):
        process(host, path + [attr[:-1]])
      else:
        (rc, stdout, stderr) = run(['ssh', '-q', host, f'curl http://169.254.169.254/latest/meta-data/{"/".join(path + [attr])}'])
        table.add(host, '/'.join(path + [attr]), repr(stdout.strip())[1:-1])

parser = argparse.ArgumentParser(description='Retrieve AWS metadata')
parser.add_argument('hosts', metavar='host', nargs='+', help='One or more hosts')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

table = Table('Host', 'Attribute', 'Value')
for host in args.hosts:
  process(host)
table.close()
