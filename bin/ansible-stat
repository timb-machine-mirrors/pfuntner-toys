#! /usr/bin/env python2

import re
import sys
import json
import time
import logging
import argparse
import datetime
import subprocess

from table import Table

def get(root, path, isList=False):
  if isinstance(path, basestring):
    path = path.split('/')
  log.info('get({path})'.format(**locals()))
  log.debug('get({root!r})'.format(**locals()))
  if path:
    return get(root.get(path[0], {}), path[1:], isList=isList)
  else:
    log.info('get({root!r}, {path})'.format(**locals()))
    if isList:
      if isinstance(root, list):
        root = ', '.join([datum for datum in root])
    elif isinstance(root, dict):
      root = ''
    return root

parser = argparse.ArgumentParser(description='Get stats on Ansible hosts')
parser.add_argument('hosts', metavar='host', nargs='*', help='List of hosts to query')
parser.add_argument('-v', '--verbose', action='count', help='Enable more debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - 10*(args.verbose or 0))

header_regexp = re.compile('^(\S+)\s+\|\s+(\S+)\s+=>\s+{')
"""
Get ansible inventory
[jpfuntne@JPFUNTNE-GCEYJ ~]$ ansible-inventory --list | json --flatten
/_meta/hostvars/rhel7/ansible_host '54.82.12.156'
/_meta/hostvars/rhel7/ansible_ssh_private_key_file 'c:/sto/pfuntner-aws.pem'
/_meta/hostvars/rhel7/ansible_user 'ec2-user'
/_meta/hostvars/rhel8_hardened/ansible_host '3.84.165.114'
/_meta/hostvars/rhel8_hardened/ansible_ssh_private_key_file 'c:/sto/pfuntner-aws.pem'
/_meta/hostvars/rhel8_hardened/ansible_user 'ec2-user'
/_meta/hostvars/runon/ansible_host 'pfuntner1.cisco.com'
/_meta/hostvars/runon/ansible_ssh_private_key_file 'c:/sto/pfuntner-runon.pem'
/_meta/hostvars/runon/ansible_user 'centos'
/all/children/0 'ungrouped'
/ungrouped/hosts/0 'rhel7'
/ungrouped/hosts/1 'rhel8_hardened'
/ungrouped/hosts/2 'runon'
[jpfuntne@JPFUNTNE-GCEYJ ~]$
"""
p = subprocess.Popen('ansible-inventory --list'.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
(stdout, stderr) = p.communicate()
rc = p.wait()
log.debug('inventory: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))

cmd = ('ansible {hosts} -m setup'.format(hosts=','.join(args.hosts) if args.hosts else 'all')).split()
log.debug(cmd)
p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
(stdout, stderr) = p.communicate()
rc = p.wait()
log.debug('setup: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
if (not stdout) and stderr:
  sys.stderr.write(stderr)
  exit(1)

buf = ''
hosts = []

for line in stdout.splitlines():
  match = header_regexp.search(line)
  if match:
    buf = '{'
    host = match.group(1)
    success = match.group(2) == 'SUCCESS'
  elif buf:
    buf += line
    if line == '}':
      resp = json.loads(buf)
      log.info('{host} {success}'.format(**locals()))
      log.debug('{resp}'.format(**locals()))
      seconds = get(resp, 'ansible_facts/ansible_uptime_seconds')
      elapsed = datetime.timedelta(seconds=int(seconds)) if seconds else ''
      hosts.append((
        host, 
        get(resp, 'ansible_facts/ansible_fqdn'), 
        get(resp, 'ansible_facts/ansible_distribution') + ' ' + get(resp, 'ansible_facts/ansible_distribution_version'),
        get(resp, 'ansible_facts/ansible_all_ipv4_addresses', isList=True),
        elapsed,
      ))
      buf = ''

table = Table('Host', 'Hostname', 'OS', 'IPs', 'Uptime', desiredSep='  ')
for host in sorted(hosts, key=lambda host_tuple: host_tuple[0]):
  table.add(host)
print str(table)  
