#! /usr/bin/env python3

import json
import logging
import argparse
import subprocess

parser = argparse.ArgumentParser(description='Run subprocess.Popen()')
parser.add_argument('-s', '--shell', action='store_true', help='Execute by shell')
parser.add_argument('cmd', help='Command to execute')
parser.add_argument('args', metavar='arg', nargs='*', help='Zero or more command arguments')
parser.add_argument('-v', '--verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

output = {}
cmd = [args.cmd] + (args.args if args.args else [])
if args.shell:
  cmd = ' '.join(cmd)
log.debug(cmd)

try:
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True if args.shell else False)
except Exception as e:
  output['exception'] = str(e)
else:
  (stdout, stderr) = p.communicate()
  output['rc'] = p.wait()
  output['stdout'] = stdout.splitlines()
  output['stderr'] = stderr.splitlines()

print(json.dumps(output, indent=2, sort_keys=True))
