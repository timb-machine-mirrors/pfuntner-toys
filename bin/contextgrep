#! /usr/bin/env python3

import re
import os
import string
import logging
import argparse

def is_text(data):
  total = len(data)*1.0
  binary = len([c for c in data if c not in string.printable])
  return (binary/total) <= 0.05 if total else True

def process(filename):
  log.info('Processing {filename!r}'.format(**locals()))
  if os.path.isfile(filename):
    basename = os.path.basename(filename)

    if args.include and not any([bool(file_regexp.search(basename)) for file_regexp in args.include]):
      log.info('{filename!r} does not match any of {}'.format(', '.join([file_regexp.pattern for file_regexp in args.include]), filename=filename))

    if args.exclude and any([bool(file_regexp.search(basename)) for file_regexp in args.exclude]):
      log.info('{filename!r} matches one or more of {}'.format(', '.join([file_regexp.pattern for file_regexp in args.exclude]), filename=filename))

    data = ''
    try:
      with open(filename) as stream:
        data = stream.read()
    except Exception as e:
      log.debug('Cannot open: {filename!r}: {e!s}'.format(**locals()))

    if is_text(data):
      pos = 0
      lines = data.splitlines()
      while pos < len(lines):
        if regexp.search(str(lines[pos])):
          while True:
            if (pos == 0) or blanks.search(str(lines[pos-1])):
              break
            pos -= 1
          while True:
            if args.naked:
              print(lines[pos])
            else:
              print('{filename}:{pos:>08}: {line!r}'.format(
                filename=filename,
                pos=pos+1,
                line=lines[pos]
              ))
            pos += 1
            if (pos >= len(lines)) or blanks.search(str(lines[pos])):
              break
          print('')
        else:
          pos += 1
    else:
      log.info('Ignoring binary file {filename!r}'.format(**locals()))
  elif os.path.isdir(filename):
    for child in os.listdir(filename):
      process(os.path.join(filename, child))
  else:
    log.warning('Cannot find: {filename!r}'.format(**locals()))

parser = argparse.ArgumentParser(description='Context grep')

group = parser.add_mutually_exclusive_group()
group.add_argument('-i', '--include', action='append', help='One or more regular expressions for filenames to search')
group.add_argument('-x', '--exclude', action='append', help='One or more regular expressions for filenames to not search')

parser.add_argument('-n', '--naked', action='store_true', help='Do not decorate lines')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
parser.add_argument('regexp', help='Regular expression to search for')
parser.add_argument('files', metavar='file', nargs='*', help='Zero or more files to search')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - 10*(args.verbose or 0))

args.include = [re.compile(pattern) for pattern in args.include or []]
args.exclude = [re.compile(pattern) for pattern in args.exclude or []]

regexp = re.compile(args.regexp)
blanks = re.compile('^\s*$')

if not args.files:
  args.files = ['.']
list(map(process, args.files))
