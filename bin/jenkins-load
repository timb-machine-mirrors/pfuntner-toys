#! /usr/bin/env python3

import pdb

import re
import os
import sys
import copy
import signal
import logging
import argparse
import requests
import subprocess

from lxml import html

DEFAULT_FOLDER = 'repositories'

class Table(object):
  def __init__(self, *args):
    if len(args) == 1 and type(args[0]) in (list, tuple):
      self.headings = args[0]
    else:
      self.headings = args

    try:
      self.p = subprocess.Popen(['column', '-t', '-s\t'], stdin=subprocess.PIPE, text=True)
    except Exception as e:
      print(f'Error opening `column`: {e!s}', file=sys.stderr)
      print('On Ubuntu, try installing the bsdmainutils package', file=sys.stderr)
      exit(1)

    self.p.stdin.write('\t'.join([str(heading) for heading in self.headings]) + '\n')

  def add(self, *args):
    self.p.stdin.write('\t'.join([str(arg) for arg in args]) + '\n')

  def close(self):
    self.p.stdin.close()
    self.p.wait()

class EmptyNode(object):
  def __init__(self):
    self.tag = ''
    self.attrib = dict()
    self.contents = list()

  def __iter__(self):
    return iter(self.contents)

class Table(object):
  def __init__(self, *args):
    if len(args) == 1 and type(args[0]) in (list, tuple):
      self.headings = args[0]
    else:
      self.headings = args

    try:
      self.p = subprocess.Popen(['column', '-t', '-s\t'], stdin=subprocess.PIPE, text=True)
    except Exception as e:
      print(f'Error opening `column`: {e!s}', file=sys.stderr)
      print('On Ubuntu, try installing the bsdmainutils package', file=sys.stderr)
      exit(1)

    self.p.stdin.write('\t'.join([str(heading) for heading in self.headings]) + '\n')

  def add(self, *args):
    self.p.stdin.write('\t'.join([str(arg) for arg in args]) + '\n')

  def close(self):
    self.p.stdin.close()
    self.p.wait()

def see(o):
  if isinstance(o, datetime.datetime):
    return o.strftime('%Y-%m-%d %H:%M')
  return o

def html_dive(root, indent=0):
  attribs = f' {" ".join(f"{key}={value!r}" for (key,value) in root.attrib.items())}' if root.attrib else ''

  print(f'{" "*(indent*2)}<{root.tag}{attribs}>{root.text.strip() if root.text else ""}')
  for node in root:
    html_dive(node, indent+1)
  print(f'{" "*(indent*2)}</{root.tag}>{root.tail.strip() if root.tail else ""}')

def flat_dive(root, path=[]):
  lead = ('/' if path else '') + '/'.join(path)
  attrib = copy.deepcopy(root.attrib)
  text = (root.text or '').strip() + (' ' if root.text and root.tail else '') + (root.tail or '').strip()
  if text:
    attrib['text'] = text
  print(f'{lead}/{root.tag}{(" " + " ".join([f"{key}={value!r}" for (key,value) in attrib.items()])) if attrib else ""}')
  for node in root:
    flat_dive(node, path + [root.tag])

def travel(root, *tags):
  log.debug(f'travel({root.tag!r}, {tags}')
  if tags:
    ret = empty_node
  else:
    ret = root

  if ret == empty_node:
    for node in root:
      if node.tag == tags[0]:
        ret = travel(node, *tags[1:])
        if ret != empty_node:
          break

  return ret

def get_servers_table(root):
  ret = None
  if root.tag == 'table':
    image = travel(root, 'tr', 'th', 'a', 'img')
    if 'icon-computer' in image.attrib.get('class', '').split():
      ret = root

  if ret is None:
    for node in root:
      ret = get_servers_table(node)
      if not ret is None:
        break

  return ret
    
def find(root, tag):
  ret = list()
  if root.tag == tag:
    ret.append(root)
  for node in root:
    ret += find(node, tag)
  return ret

parser = argparse.ArgumentParser(description='Summarize Jenkins job status', formatter_class=argparse.RawTextHelpFormatter, epilog="""The credentials must be in the form of "user:token" where:

  user: Your Jenkins userid
  token: a 34-digit hex string

You can create a token through the Jenkins GUI:
  1) Log into Jenkins
  2) Click your name/user in the upper right corner of the page
  3) Look at the URL in the browser to identify your Jenkins user.  For example, my URL is something like "https://foo.bar.com/jenkins/foobar/user/jpfuntne/configure" so my user is jpfuntne.  It might be a common user you use all the time for your organization.
  4) Click the "Configure" link on left side
  5) Click the "Create new Token" button
  6) Name the token and press the "Generate" button
  7) Copy the token and make a note of it

The credentials can be:
  - expressed on the command line
  - set as the JENKINS_CREDENTIALS environment variable, perhaps in your shell profile""")
parser.add_argument('folder', default=DEFAULT_FOLDER, nargs='?', help=f'Jenkins folder (default: {DEFAULT_FOLDER!r})')
parser.add_argument('-u', '--base-url', help='Base Jenkins URL (eg. https://foo.com/jenkins/sto/job/YourOrg/job/pipelines/job), can be stored in JENKINS_BASE_URL environment variable')
parser.add_argument('-c', '--credentials', help='Jenkins credentials (eg. user@token)')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

empty_node = EmptyNode()

creds = args.credentials or os.environ.get('JENKINS_CREDENTIALS')
if not creds:
  parser.error(f'Credentials are required')
creds = tuple(creds.split(':'))

base_url = args.base_url or os.environ.get('JENKINS_BASE_URL')
if not base_url:
  parser.error(f'Jenkins base URL is required')

url = os.path.join(base_url, args.folder)
resp = requests.get(url, auth=creds)
if resp.ok:
  root = html.fromstring(resp.text)
  # flat_dive(root)
  server = None
  servers = dict()
  total_agents = []
  table = Table('Server', 'Busy agents', '% busy')
  for row in find(get_servers_table(root), 'tr'):
    image = travel(row, 'th', 'a', 'img')
    if 'icon-computer' in image.attrib.get('class', '').split():
      server = image.tail[1:]
      if server.startswith('SCCC-'):
        servers[server] = list()
      else:
        server = None
    elif server and len(row) >= 2 and row[0].tag == 'td' and row[1].tag == 'td':
      servers[server].append(row[1].text or 'Busy')
      total_agents.append(row[1].text or 'Busy')

  for server in sorted(servers.keys()):
     busy = [True for subserver in servers[server] if subserver == 'Busy']
     pcent = 0 if len(servers[server]) == 0 else len(busy)/len(servers[server])
     table.add(server, f'{len(busy):4}/{len(servers[server]):4}', f'{pcent:5.0%}')

  busy = [True for subserver in total_agents if subserver == 'Busy']
  pcent = 0 if len(total_agents) == 0 else len(busy)/len(total_agents)
  table.add('Total', f'{len(busy):4}/{len(total_agents):4}', f'{pcent:5.0%}')

  table.close()
else:
  log.error(f'{base_url} failed: {resp.text!r}')
