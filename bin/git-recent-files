#! /usr/bin/env python3

import re
import sys
import logging
import argparse
import datetime
import subprocess

from table import Table

def gitdate_to_datetime(groups):
  main = groups[0]
  hours_offset = int(groups[1])
  minutes_offset = int(groups[2])

  date = datetime.datetime.strptime(main, '%a %b %d %H:%M:%S %Y')
  if hours_offset >= 0:
    date -= datetime.timedelta(hours=hours_offset, minutes=minutes_offset)
  else:
    date += datetime.timedelta(hours=-hours_offset, minutes=minutes_offset)
  return date.isoformat()

def extract(regexp, line, *args, converter=None):
  match = regexp.search(line)
  if match:
    ret = converter(match.groups()) if converter else match.group(1)
    return [ret] + ([None] * (len(args)-1)) if args else ret
  else:
    return args if args else None

def run(cmd):
  if isinstance(cmd, str):
    cmd = cmd.split()
  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Display recent git files')
parser.add_argument('files', metavar='file', nargs='*', help='Zero or more files')
parser.add_argument('-A', '--all', action='store_true', help='Show all instances of files')
parser.add_argument('-l', '--long', action='store_true', help='Show long output')

group = parser.add_mutually_exclusive_group()
group.add_argument('-m', '--modified', action='store_true', help='Show modified files only')
group.add_argument('-a', '--added', action='store_true', help='Show added files only')

parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

"""
commit ef33d1ee7e9b6eea2c53892b41bab7b815f8fbc5
Author: John Pfuntner <pfuntner@pobox.com>
Date:   Sun May 17 09:29:26 2020 -0400

    Asking git to ignore venv/
"""

commit_regexp = re.compile(r'^commit\s+([0-9a-f]{40})$')
author_regexp = re.compile(r'^Author:\s+.*<([^>]+)>$')
date_regexp = re.compile(r'^Date:\s+((?:Sun|Mon|Tue|Wed|Thu|Fri|Sat)\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s\d{1,2}\s\d{2}:\d{2}:\d{2}\s\d{4})\s([-+]\d{2})(\d{2})$')

messages_regexp = re.compile(r'^ {4}(.*)$')

file_name_regexp = re.compile(r'^{prefix}\s+(\S.*)$'.format(
  prefix='M' if args.modified else 'A' if args.added else '[MA]'
))

log.info(f'file_name_regexp: {file_name_regexp.pattern}')

(rc, stdout, stderr) = run(['git', 'log', '--name-status'] + args.files)
if rc == 0:
  if args.long:
    table = Table('File', 'Commit', 'Author', 'Date', 'Commit messages')
  hits = set()
  commit = None
  author = None
  date = None
  messages = ''
  for line in stdout.splitlines():
    log.debug(f'Processing {line!r}')
    (commit, author, date) = extract(commit_regexp, line, commit, author, date)
    author = extract(author_regexp, line) or author
    date = extract(date_regexp, line, converter=gitdate_to_datetime) or date
    log.debug(f'commit={commit!r}, author={author!r}, date={date!r}')
    if date is None:
      messages = ''

    match = messages_regexp.search(line)
    if match:
      messages += ('\n' if messages else '') + match.group(1)

    match = file_name_regexp.search(line)
    log.debug('file name match: {groups}: {line!r}'.format(groups=match.groups() if match else None, line=line))
    if match:
      file_name = match.group(1)
      if args.all or file_name not in hits:
        hits.add(file_name)
        if args.long:
          table.add(file_name, commit, author, date, repr(messages)[1:-1])
        else:
          print(file_name)
  if args.long:
    print(str(table), end='')
else:
  sys.stderr.write(stderr)
