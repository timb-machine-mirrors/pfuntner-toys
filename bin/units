#! /usr/bin/env python3

import os
import re
import sys
import json
import math
import logging
import argparse

def other_system(system):
  return 'imperial' if system == 'metric' else 'metric'

def near_log10(x):
  if x == 0:
    return 0
  else:
    return math.log(x,10)

class Measurement(object):
  @staticmethod
  def find(amt, units):
    for measurement in conversions:
      if (not args.measurement) or (measurement['name'] == args.measurement_name):
        if units in measurement['imperial'].keys():
          return Measurement(amt, units, 'imperial', measurement)
        elif units in measurement['metric'].keys():
          return Measurement(amt, units, 'metric', measurement)
    parser.error('Unknown units: {units!r}'.format(**locals()))
  
  def __init__(self, amt, units, system, measurement):
    self.amt = amt
    self.original_amt = amt

    self.units = units
    self.original_units = units

    self.system = system
    self.original_system = system

    self.measurement = measurement
    self.converter = measurement['conversion']['convert']

    self.sorted_units = [key for (key,value) in sorted(
      measurement[system].items(), 
      reverse=True, 
      key=lambda suffix: suffix[1] # sort on value
    )]
    log.debug('sorted_units: {self.sorted_units}'.format(**locals()))

    self.home_equivs = {}
    self.other_equivs = {}

    if hasattr(self.converter, '__call__'):
      self.destination = units
    else:
      self.destination = measurement['conversion']['from'] if measurement['conversion']['from'] in self.sorted_units else measurement['conversion']['to']
    log.debug('destination: {self.destination}'.format(**locals()))

  def convert_to(self, destination, equivs):
    log.debug('convert_to({destination!r}, {equivs})'.format(**locals()))
    while self.units != destination:
      curr = self.sorted_units.index(self.units)
      new_units = self.sorted_units[curr+1 if curr < self.sorted_units.index(destination) else curr-1]
      self.amt = (self.amt / self.measurement[self.system][self.units]) * self.measurement[self.system][new_units]
      self.units = new_units
      equivs[self.units] = (self.amt, near_log10(self.amt))
      log.debug('now: {}'.format(str(self)))

  def convert(self):
    log.debug('self.converter: {self.converter}'.format(**locals()))
    if hasattr(self.converter, '__call__'):
      (amt, units, system) = self.converter(self.amt, self.units)
      return Measurement(amt, units, system, self.measurement)
    else:
      self.convert_to(self.destination, self.home_equivs)
      log.debug('home_equivs: {self.home_equivs}'.format(**locals()))
      if self.units == self.measurement['conversion']['from']:
        other = Measurement(self.amt*self.converter, self.measurement['conversion']['to'], other_system(self.system), self.measurement)
      else:
        other = Measurement(self.amt/self.converter, self.measurement['conversion']['from'], other_system(self.system), self.measurement)
      log.debug('other: {}'.format(str(other)))
      amt = other.amt
      units = other.units

      self.other_equivs[other.units] = (other.amt, near_log10(other.amt))
      other.convert_to(other.sorted_units[0], self.other_equivs)
      log.debug('other_equivs: {self.other_equivs}'.format(**locals()))

      other.amt = amt
      other.units = units

      other.convert_to(other.sorted_units[-1], self.other_equivs)
      log.debug('other_equivs: {self.other_equivs}'.format(**locals()))

      (other.units, value) = sorted(tuple(self.other_equivs.items()), key=lambda equiv: abs(equiv[1][1]-near_log10(self.original_amt)))[0]
      other.amt = value[0]

      if args.all:
        self.convert_to(self.sorted_units[0], self.home_equivs)
        self.amt = self.original_amt
        self.units = self.original_units
        self.convert_to(self.sorted_units[-1], self.home_equivs)
      return other

  def __str__(self):
    return '{self.amt} {self.units} {self.system} {measurement_name}'.format(
      measurement_name=self.measurement['name'],
      **locals()
    )

def massage(root):
  """
  Massage `units.json` by interpreting strings which accomplishes two things:
    - converts numeric expressions that are encoded as strings (such as "INT**INT") into numeric values
    - compiles lambda functions into callable functions
  Returns: the same root object passed in, possibly altered
  """
  # log.debug('massage({root})'.format(**locals()))
  if isinstance(root, list):
    list(map(massage, root))
  elif isinstance(root, dict):
    for (key, value) in root.items():
      if key in ['name', 'from', 'to']:
        pass # no need to massage these fields - they remain as strings
      elif isinstance(value, str):
        root[key] = eval(value)
      elif isinstance(value, dict):
        massage(value)
  return root

def show(equivs):
  for (units, value) in equivs.items():
    print('{amt} {units}'.format(amt=value[0], **locals()))

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if '-v' in sys.argv else logging.WARNING)

conversions = {}
with open(os.path.join(os.path.dirname(sys.argv[0]), 'units.json')) as stream:
  conversions = massage(json.load(stream))

parser = argparse.ArgumentParser(description='Perform unit conversions')
parser.add_argument('-m', '--measurement', dest='measurement', help='Measurement system', choices=[datum['name'] for datum in conversions or []])
parser.add_argument('-a', '--all', dest='all', action='store_true', help='Show all equivalent values')
parser.add_argument('-f', '--fractional', dest='fractional', action='store_true', help='Break imperial fractions down to additional units')
parser.add_argument('-v', '--verbose', dest='verbose', action='count', help='Enable more debugging')
parser.add_argument('args', metavar='arg', nargs='+', help='Measurement to convert')
args = parser.parse_args()

log.setLevel(logging.WARNING - 10*(args.verbose or 0))
log.debug('conversions: {conversions}'.format(**locals()))

measurement1 = None
regexp = re.compile('^(-?(?:\d+\.?\d*)|(?:\d*\.?\d+))(\w+)?$')
while True:
  if not args.args:
    break # Exhausted the arguments!
  match = regexp.search(args.args[0])
  if match:
    args.args.pop(0)
    amt = float(match.group(1))
    if match.group(2):
      units = match.group(2)
      if len(args.args) > 1:
        parser.error('Unexpected arguments: {remain}'.format(remain=' '.join(args.args[1:])))
    else:
      units = args.args.pop(0)
    measurement = Measurement.find(amt, units)
    log.debug('curr: {}'.format(str(measurement)))
    if measurement1:
      if (measurement1.measurement['name'] == measurement.measurement['name']) and (measurement1.system == measurement.system):
        measurement.convert_to(measurement1.units, {})
        measurement1.amt += measurement.amt
        measurement1.original_amt = measurement1.amt
      else:
        parser.error('Cannot combine {amt1}{units1} and {amt2}{units2}'.format(
          amt1=measurement1.amt,
          units1=measurement1.units,
          amt2=measurement.amt,
          units2=measurement.units,
        ))
    else:
      measurement1 = measurement
    log.debug('now: {}'.format(str(measurement1)))
  else:
    parser.error('Unexpected measurement: {arg}'.format(arg=args.args[0]))

if measurement1:
  log.info('Initial measurement: {measurement}'.format(
    measurement=str(measurement1)
  ))

  if args.fractional:
    if measurement1.system == 'metric':
      parser.error('Only imperial measurements can be used with -f')
    elif len(measurement1.sorted_units) == 1:
      parser.error('Only one unit defined for {}'.format(measurement1.measurement['name']))
    measurement1.convert_to(measurement1.sorted_units[0], {})
    log.debug('Now: {}'.format(str(measurement1)))
    amt = measurement1.amt
    results = []
    final_units = measurement1.sorted_units[0]
    pos = len(measurement1.sorted_units)-1
    while pos > 0:
      units = measurement1.sorted_units[pos]
      factor = measurement1.measurement['imperial'][final_units] / measurement1.measurement['imperial'][units]
      log.debug('factor: {factor}'.format(**locals()))
      curr = int(amt / factor)
      log.debug('{curr} {units}'.format(**locals()))
      if curr:
        results.append('{curr}{units}'.format(**locals()))
        amt -= curr*factor
      pos -= 1
    log.debug('{amt} {final_units}'.format(**locals()))

    if amt > 0:
      results.append('{amt}{final_units}'.format(**locals()))

    print(', '.join(results))
  else:
    measurement2 = measurement1.convert()
    print('{measurement1.original_amt} {measurement1.original_units} = {measurement2.amt} {measurement2.units}'.format(**locals()))
    if args.all:
      del measurement1.other_equivs[measurement2.units]
      show(measurement1.home_equivs)
      show(measurement1.other_equivs)
else:
  parser.error('No measurements provided')
