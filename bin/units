#! /usr/bin/env python

import re
import math
import logging
import argparse

converters = {}

def safeLog10(num):
  try:
    return math.log10(num)
  except:
    return 0

class Convertor(object):
  def __init__(self, imperial, metric, conversion):
    imperial_units = imperial.keys()
    self.imperial_list = sorted(imperial.items(), key=lambda item: item[1], reverse=True)
    log.debug('imperial_list: {self.imperial_list}'.format(**locals()))
    imperial_singletons = [key for (key, value) in imperial.items() if value == 1]
    if len(imperial_singletons) != 1:
      log.error('Expected one value of `1`: {imperial}'.format(**locals()))
      exit(1)
    self.imperial_singleton = [pos for (pos, curr) in enumerate(self.imperial_list) if curr[0] == imperial_singletons[0]][0]
    log.debug('imperial_singleton: {self.imperial_singleton}'.format(**locals()))

    metric_units = metric.keys()
    self.metric_list = sorted(metric.items(), key=lambda item: item[1], reverse=True)
    log.debug('metric_list: {self.metric_list}'.format(**locals()))
    metric_singletons = [key for (key, value) in metric.items() if value == 1]
    if len(metric_singletons) != 1:
      log.error('Expected one value of `1`: {metric}'.format(**locals()))
      exit(1)
    self.metric_singleton = [pos for (pos, curr) in enumerate(self.metric_list) if curr[0] == metric_singletons[0]][0]
    log.debug('metric_singleton: {self.metric_singleton}'.format(**locals()))

    self.imperial_conversion_singleton = [
      pos for (pos, curr) in enumerate(self.imperial_list) if (curr[0] in imperial_units) and (curr[0] in [conversion['from'], conversion['to']])
    ][0]
    self.metric_conversion_singleton = [
      pos for (pos, curr) in enumerate(self.metric_list) if (curr[0] in metric_units) and (curr[0] in [conversion['from'], conversion['to']])
    ][0]
    self.conversion = conversion

  def __str__(self):
    return 'self.imperial_list: {self.imperial_list}, self.imperial_singleton: {self.imperial_singleton}, self.metric_list: {self.metric_list}, self.metric_singleton: {self.metric_singleton}, self.conversion: {self.conversion}, self.imperial_conversion_singleton={self.imperial_conversion_singleton}, self.metric_conversion_singleton={self.metric_conversion_singleton}'.format(**locals())

def define(name, imperial, metric, conversion):
  if name in converters:
    log.critical('{name!r} has already been defined in converters'.format(**locals()))
    exit(1)

  converters[name] = Convertor(imperial, metric, conversion)

def findConverter(amt, suffix):
  suffix_type = None
  converter = None
  isImperial = True
  for curr_type in [args.scale] if args.scale else converters.keys():
    for (pos, curr) in enumerate(converters[curr_type].imperial_list):
      log.debug('Examining curr[0]: {}'.format(curr[0]))
      if curr[0] == suffix:
        suffix_type = curr_type
        converter = pos
        break
    if converter is None:
      for (pos, curr) in enumerate(converters[curr_type].metric_list):
        log.debug('Examining curr[0]: {}'.format(curr[0]))
        if curr[0] == suffix:
          suffix_type = curr_type
          converter = pos
          isImperial = False
          break
    if converter is not None:
      break
  return (suffix_type, converter, isImperial)

def convert(amt, suffix):
  (original_amt, original_suffix) = (amt, suffix)
  original_digits = safeLog10(amt)
  log.debug('original_digits: {original_digits}'.format(**locals()))

  (suffix_type, converter, isImperial) = findConverter(amt, suffix)
  if converter is None:
    log.error('Did not find suffix {suffix!r}'.format(**locals()))     
    exit(1)

  log.info('converters[suffix_type]: {}'.format(str(converters[suffix_type])))

  log.info('suffix_type: {suffix_type}, isImperial: {isImperial}, converter[{converter_int}]: {converter}'.format(
    suffix_type=suffix_type,
    isImperial=isImperial,
    converter_int=converter,
    converter=getattr(converters[suffix_type], 'imperial_list' if isImperial else 'metric_list')[converter],
  ))

  if isImperial:
    log.debug('increase to larger units')
    while (converter < len(converters[suffix_type].imperial_list)-1) and (converter < converters[suffix_type].imperial_conversion_singleton):
      amt = (amt / converters[suffix_type].imperial_list[converter][1]) * converters[suffix_type].imperial_list[converter+1][1]
      suffix = converters[suffix_type].imperial_list[converter+1][0]
      log.debug('Now: {amt} {suffix}'.format(**locals()))
      converter += 1

    log.debug('decrease to smaller units')
    while (converter > 0) and (converter > converters[suffix_type].imperial_conversion_singleton):
      amt = (amt / converters[suffix_type].imperial_list[converter][1]) * converters[suffix_type].imperial_list[converter-1][1]
      suffix = converters[suffix_type].imperial_list[converter-1][0]
      log.debug('Now: {amt} {suffix}'.format(**locals()))
      converter -= 1
  else:
    log.debug('increase to larger units')
    while (converter < len(converters[suffix_type].metric_list)-1) and (converter < converters[suffix_type].metric_conversion_singleton):
      amt = (amt / converters[suffix_type].metric_list[converter][1]) * converters[suffix_type].metric_list[converter+1][1]
      suffix = converters[suffix_type].metric_list[converter+1][0]
      log.debug('Now: {amt} {suffix}'.format(**locals()))
      converter += 1

    log.debug('decrease to smaller units')
    while (converter > 0) and (converter > converters[suffix_type].metric_conversion_singleton):
      amt = (amt / converters[suffix_type].metric_list[converter][1]) * converters[suffix_type].metric_list[converter-1][1]
      suffix = converters[suffix_type].metric_list[converter-1][0]
      log.debug('Now: {amt} {suffix}'.format(**locals()))
      converter -= 1

  if type(converters[suffix_type].conversion['amt']) == float:
    if converters[suffix_type].conversion['from'] == suffix:
      amt *= converters[suffix_type].conversion['amt'] 
      suffix = converters[suffix_type].conversion['to'] 
    else:
      amt /= converters[suffix_type].conversion['amt'] 
      suffix = converters[suffix_type].conversion['from'] 
  else:
    (amt, suffix) = converters[suffix_type].conversion['amt'](amt, suffix)

  log.debug('Now: {amt} {suffix}'.format(**locals()))
  results = [(amt, suffix, safeLog10(amt))]

  (suffix_type, converter, isImperial) = findConverter(amt, suffix)
  if converter is None:
    log.error('Did not find suffix {suffix!r}'.format(**locals()))     
    exit(1)
  original_converter = converter

  if isImperial:
    log.debug('increase to larger units')
    while converter < len(converters[suffix_type].imperial_list)-1:
      amt = (amt / converters[suffix_type].imperial_list[converter][1]) * converters[suffix_type].imperial_list[converter+1][1]
      suffix = converters[suffix_type].imperial_list[converter+1][0]
      log.debug('Now: {amt} {suffix}'.format(**locals()))
      results.append((amt, suffix, safeLog10(amt)))
      converter += 1

    log.debug('decrease to smaller units')
    converter = original_converter 
    while converter > 0:
      amt = (amt / converters[suffix_type].imperial_list[converter][1]) * converters[suffix_type].imperial_list[converter-1][1]
      suffix = converters[suffix_type].imperial_list[converter-1][0]
      log.debug('Now: {amt} {suffix}'.format(**locals()))
      results.append((amt, suffix, safeLog10(amt)))
      converter -= 1
  else:
    log.debug('increase to larger units')
    while converter < len(converters[suffix_type].metric_list)-1:
      amt = (amt / converters[suffix_type].metric_list[converter][1]) * converters[suffix_type].metric_list[converter+1][1]
      suffix = converters[suffix_type].metric_list[converter+1][0]
      log.debug('Now: {amt} {suffix}'.format(**locals()))
      results.append((amt, suffix, safeLog10(amt)))
      converter += 1

    log.debug('decrease to smaller units')
    while converter > 0:
      amt = (amt / converters[suffix_type].metric_list[converter][1]) * converters[suffix_type].metric_list[converter-1][1]
      suffix = converters[suffix_type].metric_list[converter-1][0]
      log.debug('Now: {amt} {suffix}'.format(**locals()))
      results.append((amt, suffix, safeLog10(amt)))
      converter -= 1

  results = sorted(results, key=lambda result: abs(original_digits - result[2]))
  log.debug('results: {results}'.format(**locals()))
  print '{original_amt} {original_suffix} = {equiv_amt} {equiv_suffix}'.format(
    equiv_amt=results[0][0],
    equiv_suffix=results[0][1],
    **locals()
  )

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()

define(name='length',
  imperial={
    'mi': 1,
    'ft': 5280,
    'in': 5280*12,
  },
  metric={
    'km': 1,
    'm': 10**3,
    'mm': 10**6,
  },
  conversion={
    'from': 'in',
    'to': 'mm',
    'amt': 25.4,
  }
)

define(name='mass',
  imperial={
    'lb': 1,
    'oz': 16,
  },
  metric={
    'kg': 1,
    'g': 1000,
  },
  conversion={
    'from': 'lb',
    'to': 'kg',
    'amt': 0.453592,
  }
)

def temperature_converter(amt, suffix):
  if suffix == 'F':
    return ((amt-32) / (9.0/5), 'C')
  else:
    return ((amt * (9.0/5)) + 32, 'F')

define(name='temperature',
  imperial={
    'F': 1,
  },
  metric={
    'C': 1,
  },
  conversion={
    'from': 'F',
    'to': 'C',
    'amt': temperature_converter,
  }
)

parser = argparse.ArgumentParser(description='Unit converter')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
parser.add_argument('-s', '--scale', choices=converters.keys(), help='Specify scale')
parser.add_argument('units', metavar='unit', nargs='+', help='One or more units: `NUM suffix` or `NUMsuffix`')
args = parser.parse_args()

log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

regexp = re.compile('^(-?(?:\d+\.?\d*)|(?:\d*\.\d+))([a-zA-Z]+)?$')

while args.units:
  unit = args.units.pop(0)
  match = regexp.search(unit)
  log.debug('{unit!r}: {groups}'.format(groups=match.groups() if match else None, unit=unit))

  if not match:
    log.error('{unit} is not valid'.format(**locals()))
    exit(1)
  amt = float(match.group(1))
  if match.group(2):
    suffix = match.group(2)
  else:
    if not args.units:
      log.error('No suffix for {units}'.format(**locals()))
    suffix = args.units.pop(0)

  convert(amt, suffix)
