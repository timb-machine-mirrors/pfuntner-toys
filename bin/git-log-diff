#! /usr/bin/env python3

import re
import signal
import logging
import argparse
import subprocess

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  if stdin:
    p.stdin.write(stdin.encode())
    p.stdin.close()
  if capture:
    (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  else:
    (stdout, stderr) = ('', '')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Compare `git-log` of master branch against `git-log` of current branch')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

(rc, stdout, stderr) = run('git branch')
match = re.match(r'^\*\s+(.+)$', stdout, re.MULTILINE)
if match:
  curr_branch = match.group(1)
  if curr_branch != 'master':
    (master_rc, master_stdout, master_stderr) = run('git-log --branch master')
    if rc == 0:
      stdout = master_stdout.splitlines()
      last_commit_line = min(len(stdout), 9)
      log.info('last_commit_line: {pos}: {line!r}'.format(pos=last_commit_line, line=stdout[last_commit_line]))
      last_commit = stdout[last_commit_line].split()[0]
      log.info(f'last_commit: {last_commit}')

      cmd = f'side-diff --wide - <(git-log | grep-cat 1:/^{last_commit}/)'
      run(['bash', '-c', cmd], capture=False, stdin='\n'.join(stdout[:last_commit_line+1]))
    else:
      parser.error('`git-log` error for master branch')
  else:
    parser.error('Current is already master')
else:
  parser.error('Cannot determine current branch')
