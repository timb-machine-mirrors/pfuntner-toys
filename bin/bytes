#! /usr/bin/env python3

import os
import sys
import signal
import string
import logging
import argparse

parser = argparse.ArgumentParser(description='Print bytes of a file, one byte per line')
parser.add_argument('-l', '--long', action='store_true', help='Enable long output')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

control_character_map = {
  b'\n': '\\n',
  b'\t': '\\t',
  b'\b': '\\b',
  b'\v': '\\v',
  b'\0': '\\0',
}

def pretty(c):
  ret = control_character_map.get(c)
  if ret is None:
    ret = f'x{c.hex():2}'
    try:
      ret = c.decode()
    except Exception as e:
      pass

  return ret
  
if sys.stdin.isatty():
  parser.error('stdin must be redirected')

stream = os.fdopen(sys.stdin.fileno(), 'rb')

bytes = 0

while True:
  c = stream.read(1)
  if c is None or c == b'':
    break
  print(f'{f"{bytes:08} " if args.long else ""}{pretty(c)}')
  bytes += 1
