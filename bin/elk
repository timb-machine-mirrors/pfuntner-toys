#! /usr/bin/env python3

import docker
import time
import datetime
import os
import os.path
import getopt
import sys
import traceback

def say(msg):
  print("%s: %s" % (datetime.datetime.now(), msg))

def get(containerName):
  ret = None
  try:
    ret = client.containers.get(containerName)
  except Exception as e:
    pass
  return ret

def syntax(rc=None):
  msg = "Syntax: %s [--default-elasticsearch-auth] status|check|start|stop" % sys.argv[0]

  if (rc == None):
    return msg
  else:
    sys.stderr.write("Purpose: Start a private set of Elasticsearch and Kibana containers on your Docker host\n\n")
    sys.stderr.write(msg + '\n')
    exit(rc)

def createdir(path):
  assert path[0] == '/'
  components = path[1:].split('/')
  for currlen in range(len(components)):
    curr = '/' + '/'.join(components[0:currlen+1])
    if not os.path.isdir(curr):
      os.mkdir(curr)
      say("Created %s" % curr)

def expose(lst):
  stack = traceback.extract_stack()
  """
    '/home/ibmadmin/bin/elk', 29, 'syntax', 'expose([1])'
  """
  (filename, lineno, function, statement) = stack[-2]
  with open(filename, "r") as f:
    lines = f.read().strip('\n').split('\n')
    for offset in lst:
      print(lines[lineno + offset - 1])

assert os.uname()[-1] == "x86_64", "I don't support your platform: %s" % os.uname()

ES_DIR = os.path.join(os.environ["HOME"], "elasticsearch", "data")

(opts,args) = getopt.getopt(sys.argv[1:], "", ["default-elasticsearch-auth", "help"])

defaultElasticsearchAuth = False
for (opt,arg) in opts:
  if opt == "--default-elasticsearch-auth":
    defaultElasticsearchAuth = not defaultElasticsearchAuth
  elif opt == "--help":
    syntax(0)

assert len(args) in [0,1], syntax()

if len(args) == 0:
  action = "check"
elif len(args) == 1:
  action = args[0]
  if action == "up":
    action = "start"
  elif action == "down":
    action = "stop"
  assert action in ["status", "check", "start", "stop"], syntax()

client = docker.from_env()
elasticsearch = get("elk-elasticsearch")

say("Elasticsearch started: %s" % (True if elasticsearch else False))
if (not elasticsearch) and (action == "start"):
  createdir(ES_DIR)

  say("Starting elasticsearch")
  expose([1])
  elasticsearch = client.containers.run("docker.elastic.co/elasticsearch/elasticsearch:5.4.0", name="elk-elasticsearch", ports={9300:9300, 9200: 9200}, environment={"http.host": "0.0.0.0", "transport.host": "127.0.0.1"}, detach=True, volumes={ES_DIR: {"bind": "/usr/share/elasticsearch/data", "mode": "rw"}})
  for loop in range(6):
    say("Waiting for elasticsearch to initialize...")
    time.sleep(5)
  if defaultElasticsearchAuth:
    say("Elasticsearch will have default authentication")
  else:
    say("Modifying elasticsearch configuration to disable authentication")
    ret = elasticsearch.exec_run(["bash", "-c", "echo 'xpack.security.enabled: false' >> /usr/share/elasticsearch/config/elasticsearch.yml"])
    # say("ret from exec_run: %s" % repr(ret))
    # if ret:
    #   say("ret is a %s" % str(type(ret)))
    say("Restarting elasticsearch")
    elasticsearch.restart()
    for loop in range(6):
      say("Waiting for elasticsearch to re-initialize...")
      time.sleep(5)
elif elasticsearch and (action == "stop"):
  elasticsearch.remove(force=True)
  say("Elasticsearch has been stopped")

kibana = get("elk-kibana")
say("Kibana started: %s" % (True if kibana else False))
if (not kibana) and (action == "start"):
  say("Starting kibana")
  expose([1])
  kibana = client.containers.run("kibana", name="elk-kibana", links={"elk-elasticsearch": "elk-elasticsearch"}, ports={5601: 5601}, detach=True)
  # kibana = client.containers.run("docker.elastic.co/kibana/kibana:5.2.2", name="elk-kibana", links={"elk-elasticsearch": "elk-elasticsearch"}, ports={5601: 5601}, detach=True)
  for loop in range(6):
    say("Waiting for kibana to initialize...")
    time.sleep(5)
  say("Modifying kibana configuration to connect to elasticsearch")

  """
    We must change:
      file: /etc/kibana/kibana.yml
      stmt: elasticsearch.url: 'http://elasticsearch:9200'
  """

  ret = kibana.exec_run(["bash", "-c", "sed -i \"s%elasticsearch.url: 'http://elasticsearch:9200'%elasticsearch.url: 'http://elk-elasticsearch:9200'%g\" /etc/kibana/kibana.yml"])

  # if ret:
  #   say("ret is a %s" % str(type(ret)))
  # say("ret from exec_run: %s" % repr(ret))

  say("Restarting kibana")
  kibana.restart()
  for loop in range(6):
    say("Waiting for kibana to re-initialize...")
    time.sleep(5)
elif kibana and (action == "stop"):
  kibana.remove(force=True)
  say("Kibana has been stopped")
