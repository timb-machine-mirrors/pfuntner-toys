#! /usr/bin/env python3

"""
   Ideally, this will be a script that can take one or more tar or jar files and unwind them.
   Initially, I'm just implementing the --list option which simply does a table of contents
   on the archive files.

   Future work:
     - allow for a verbose option that equates to the -tvf options for jar/tar
     - unwind the archive files in some reasonable manner
"""

import re
import os
import sys
import logging
import copy
import argparse
import subprocess

verbose = False

def run(cmd):
  log.info('Running {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  (stdout, stderr) = p.communicate()
  stdout = stdout.decode('utf-8')
  stderr = stderr.decode('utf-8')
  return (p.wait(), stdout, stderr)

def qualify(path):
  """
     If the path is not fully qualified, prepend the original current working directory to the path
  """
  if not absoluteRegexp.search(path):
    path = os.path.join(cwd, path)
  return path

def indent(data):
  data = '\n'.join(['  {line}'.format(**locals()) for line in data.splitlines()])
  if data:
    data += '\n'
  return data

def joinDicts(*dicts):
  ret = {}
  for curr in dicts:
    ret.update(curr)
  return ret

def process(path):
  cmd = None
  base = os.path.basename(path)

  if args.zip:
    cmd = ['unzip']
    base = '{base}.files'.format(**locals())
  elif args.tar:
    cmd = ['tar']
    base = '{base}.files'.format(**locals())
  elif args.tgz:
    cmd = ['tar', '-z']
    base = '{base}.files'.format(**locals())
  elif args.jar:
    cmd = ['jar']
    base = '{base}.files'.format(**locals())
  else:
    for regexp in regexps:
      match = regexp[1].search(base)
      if match:
        cmd = regexp[0]
        base = match.group(1)

  if cmd:
    if args.list:
      (rc, stdout, stderr) = run(cmd + ['-l' if cmd == ['unzip'] else '-tf', path])
      if (rc == 0) and (not stderr):
        for line in stdout.splitlines():
          print('{path}:{line}'.format(**locals()))
      else:
        log.warning('Error processing {path}:\n{stderr}'.format(**locals()))
    elif args.count:
      (rc, stdout, stderr) = run(cmd + ['-l' if cmd == ['unzip'] else '-tf', path])
      if (rc == 0) and (not stderr):
        files = 0
        # sample stdout: "      0  10-04-2018 08:30   toys-master/"
        regexp = re.compile(r'^\s*\d+\s+\d{2}-\d{2}-\d{4}\s+\d{2}:\d{2}\s+\S')
        for line in stdout.splitlines():
          if (cmd != ['unzip']) or regexp.search(line):
            files += 1
        print('{files:>8} {path}'.format(**locals()))
      else:
        log.warning('Error processing {path}:\n{stderr}'.format(**locals()))
    else: # --extract
      try:
        os.mkdir(base)
      except Exception as e:
        sys.stderr.write('Cannot create {base!r}: {e}\n'.format(**locals()))
        return
      os.chdir(base)
      extractor = copy.deepcopy(cmd)
      if cmd != ['unzip']:
        extractor.append('-xvf')
      extractor.append(qualify(path))
      (rc, stdout, stderr) = run(extractor)
      if (rc == 0) and (not stderr):
        stdout = indent(stdout)
        print('Unwound {path} to {cwd}/{base}:\n{stdout}'.format(**joinDicts(globals(), locals())))
      else:
        stdout = indent(stdout)
        stderr = indent(stderr)
        log.warning('Error unwinding {path} to {cwd}/{base}:\n{stdout}{stderr}'.format(**joinDicts(globals(), locals())))
      os.chdir(cwd)
  else:
    log.warning('Don\'t know what to do with {path}\n'.format(**locals()))

absoluteRegexp = re.compile('^/')

regexps = [
  (['jar'], re.compile('^(.*)\.jar$')),
  (['tar'], re.compile('^(.*)\.(tar|tar\.gz|tgz)$')),
  (['unzip'], re.compile('^(.*)\.zip$')),
]

parser = argparse.ArgumentParser(description='Perform operations on archive files')

group = parser.add_mutually_exclusive_group(required=True)
group.add_argument('-l', '--list', dest='list', action='store_true', help='List archive contents')
group.add_argument('-c', '--count', dest='count', action='store_true', help='Count archive contents')
group.add_argument('-x', '--extract', dest='extract', action='store_true', help='Extract archive contents')

group = parser.add_mutually_exclusive_group()
group.add_argument('-z', '--zip', action='store_true', help='Treat all files as zip files')
group.add_argument('-t', '--tar', action='store_true', help='Treat all files as uncompressed tar files')
group.add_argument('-g', '--tgz', action='store_true', help='Treat all files as gzipped tar files')
group.add_argument('-j', '--jar', action='store_true', help='Treat all files as jar files')

parser.add_argument('files', metavar='file', nargs='*', help='Zero or more files')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.WARNING)

if not args:
  parser.error('Redirect files to stdin if not specified on command line')
  args.files = sys.stdin.read().splitlines()

cwd = os.getcwd()

for path in args.files:
  process(path)
