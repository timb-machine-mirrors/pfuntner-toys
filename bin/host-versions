#! /usr/bin/env python3

import re
import signal
import logging
import argparse
import subprocess

from table import Table

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin != None else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  if stdin != None:
    p.stdin.write(stdin.encode())
  if capture:
    (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  else:
    (stdout, stderr) = ('', '')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

def version(host, command, option):
  ret = ''
  log.info(f'version({host!r}, {command!r}, {option!r})')
  (rc, stdout, stderr) = run((['ssh', host] if host != 'localhost' else []) + [command, option], stdin='')
  match = regexp.search(stdout)
  if match:
    ret = match.group(1)
  return ret

parser = argparse.ArgumentParser(description='Display versions of commands on one or more hosts')
parser.add_argument('-H', '--host', action='append', help='One or more hosts (default: [localhost])')
parser.add_argument('commands', metavar='command', nargs='+', help='One or more commands')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

if not args.host:
  args.host = ['localhost']

log.info(f'args: {args}')

regexp = re.compile(r'(\S*\d\S*\.\S*\d\S*)')

table = Table(['Host'] + args.commands)
for host in args.host:
  row = [host]
  for command in args.commands:
    row.append(version(host, command, '--version') or version(host, command, '-v') or version(host, command, 'version') or 'n/a')
  table.add(row)
print(str(table), end='')
