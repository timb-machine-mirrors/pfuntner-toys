#! /usr/bin/env python3

import sys
import signal
import logging
import argparse
import subprocess

def run(cmd, stdin=None, capture=True, shell=False):
  if shell:
    if isinstance(cmd, list):
      cmd = ' '.join(cmd)
  elif isinstance(cmd, str):
    cmd = cmd.split()

  log.info('Executing {cmd}'.format(**locals()))
  p = subprocess.Popen(cmd, stdin=subprocess.PIPE if stdin else None, stdout=subprocess.PIPE if capture else None, stderr=subprocess.PIPE if capture else None, shell=shell)
  if stdin:
    p.stdin.write(stdin.encode())
  if capture:
    (stdout, stderr) = tuple([s.decode('utf-8') for s in p.communicate()])
  else:
    (stdout, stderr) = ('', '')
  rc = p.wait()
  log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)

parser = argparse.ArgumentParser(description='Install Bruno\'s toys')
parser.add_argument('hosts', default=['all'], nargs='*', help='Zero or more hosts (default: "all")')
parser.add_argument('-d', '--docker', action='store_true', help='Host is a single docker container')
parser.add_argument('-e', '--extra-vars', action='append', help='Specify Ansible variables')
parser.add_argument('--dry-run', action='store_true', help='Do not execute command')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.INFO if args.dry_run else logging.WARNING - (args.verbose or 0)*10)

if not args.hosts:
  args.hosts = ['all']

if args.docker and len(args.hosts) > 1:
  parser.error('--docker can only be used with a single Docker container')

vars = list()
for var in args.extra_vars or []:
  vars += ['-e', var]

cmd = ['ansible-playbook'] + vars + (['--connection', 'docker', '--inventory', args.hosts[0] + ',', '-e', 'hosts=all'] if args.docker else (['-e', 'hosts=' + ','.join(args.hosts)])) + [sys.argv[0] + '.yml']

if args.dry_run:
  log.info(cmd)
else:
  (rc, stdout, stderr) = run(cmd, capture=False)
  exit(rc)
