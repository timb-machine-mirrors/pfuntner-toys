#! /usr/bin/env python3

import os
import re
import sys
import logging
import argparse
import datetime
import requests
import subprocess

from table import Table

class Mock(object):
  def __init__(self, **kwargs):
    for (key, value) in kwargs.items():
      setattr(self, key, value)

def run(cmd, readonly=False):
  """
  Run a command
  :param cmd: Command to run as a string or array of strings
  :param readonly: Run the command even if --dry-run is specified
  :return: A 3-element tuple:
    #1: the exit status
    #2: stdout as a string
    #3: stderr as a string
  """
  (rc, stdout, stderr) = (None, '', '')
  if readonly or not args.dry_run:
    if isinstance(cmd, str):
      cmd = cmd.split()
    log.info('Executing {cmd}'.format(**locals()))
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (stdout, stderr) = p.communicate()
    stdout = stdout.decode('utf-8')
    stderr = stderr.decode('utf-8')
    rc = p.wait()
    log.debug('Executed {cmd}: {rc}, {stdout!r}, {stderr!r}'.format(**locals()))
  return (rc, stdout, stderr)
  
def extract(s, regexp):
  ret = None
  match = regexp.search(s)
  if match:
    ret = match.group(1)

  log.debug('Extracted {ret!r} from {s!r} using pattern {regexp.pattern}'.format(**locals()))
  return ret

def get_branch():
  ret = None
  (rc, stdout, stderr) = run('git branch', readonly=True)
  for line in stdout.splitlines():
    if line and line[0] == '*':
      ret = line.split()[1]
  log.debug('get_branch() returning {ret!r}'.format(**locals()))
  return ret
    
def get_last_commit():
  """
    commit 00568eee3320fd22d2f1fa471a9312946df44fcb
    Author: belscher <belscher@cisco.com>
    Date:   Thu Dec 5 10:02:35 2019 -0500
    
        CCC-1535: December release (#182)
  """
  date = None
  sha1 = None
  text = []
  (rc, stdout, stderr) = run('git log -1', readonly=True)
  for line in stdout.splitlines():
    sha1 = sha1 or extract(line, sha1_regexp)
    date = date or extract(line, date_regexp)
    s = extract(line, text_regexp)
    if s != None or text:
      text.append(s)

  if date:
    date = datetime.datetime.strptime(date, '%a %b %d %H:%M:%S %Y').isoformat().replace('T', ' ')

  if text:
    text = repr('\n'.join(text)[:20])[1:-1]
 
  log.debug('get_last_commit() returning date={date}, sha1={sha1}, text={text}'.format(**locals()))
  return (date, sha1[:7], text)

def get_api_url():
  """
    Output from `git remote -v`:
      origin  git@github.com:pfuntner/temp.git (fetch)
      origin  git@github.com:pfuntner/temp.git (push)

    I'm not sure I have a git clone using http but I did a dry-run clone and it has:

      git clone https://github.com/pfuntner/temp.git
  """
  ret = None

  (rc, stdout, stderr) = run('git remote -v', readonly=True)
  match = re.match(r'^origin\s+\S+[/@]([^ /:]+)[/:](\S+)\.git', stdout, flags=re.MULTILINE)
  log.info(f'get_api_url() groups from {stdout!r}: {match.group() if match else None}')
  if match:
    ret = f'https://api.{match.group(1)}/repos/{match.group(2)}/commits'
  return ret 

def find_files(roots, depth=0):
  ret = []
  for base in roots:
    if os.path.isdir(base) and (depth == 0 or not os.path.islink(base)):
      log.info(f'find_files base={base!r}')
      paths = [os.path.join(base, child) for child in sorted(os.listdir(base))]
      for path in paths:
        log.info(f'find_files path={path!r}')
        if os.path.basename(path) == '.git' and os.path.isdir(path):
          ret.append(os.path.dirname(path))
      ret += find_files(paths, depth+1)
  return ret

DEFAULT_ROOTS = [os.path.expanduser('~/repos')]

parser = argparse.ArgumentParser(description='Refresh git repositories')
parser.add_argument('root', nargs='*', default=DEFAULT_ROOTS, help=f'Directory in which to find repos (default: {DEFAULT_ROOTS})')
parser.add_argument('-b', '--branch', action='store_true', help='Do not require master branch')
parser.add_argument('-d', '--dry-run', action='store_true', help='Make no changes - do not pull new commits')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger('git-pulls')

log.setLevel(logging.WARNING - (args.verbose or 0)*10)

if os.getuid() == 0:
  log.error('Do not run as root')
  exit(1)

if args.dry_run:
  log.warning('Note: local repos are not being changed cause of --dry-run')

sha1_regexp = re.compile('commit ([0-9a-f]{40})$')
date_regexp = re.compile('^Date:\s*([a-z]{3} [a-z]{3} \d{1,2} \d{2}:\d{2}:\d{2} \d{4})', flags=re.IGNORECASE)
text_regexp = re.compile('^\s+(\S?.*)$')
up_to_date_regexp = re.compile('^Already up[- ]to[- ]date\.$')

table = Table('Path', 'Branch', 'Old SHA1', 'Old Date', 'Old Text', 'New SHA1', 'New Date', 'New Text')

cwd = os.getcwd()

files = find_files(args.root)
log.info(f'find_files({args.root}): {files}')
for path in files:
  log.info(f'Processing {path!r}')
  os.chdir(path)
  branch = get_branch()
  (date, sha1, text) = get_last_commit()
  cols = [path, branch, sha1, date, text]
  if (branch in ['master', 'main']) or args.branch:
    if args.dry_run:
      api_url = get_api_url()
      log.info(f'api_url: {api_url!r}')
      if api_url:
        try:
          resp = requests.get(api_url)
        except Exception as e:
          resp = Mock(ok=False, text=str(e))
        if resp.ok:
          top_remote_commit = resp.json()[0]
          if sha1 != top_remote_commit['sha'][:7]:
            cols += [top_remote_commit['sha'][:7], top_remote_commit['commit']['author']['date'].replace('T', ' '), top_remote_commit['commit']['message'][:20]]
          else:
            cols += ['']*3
        else:
          log.info(f'{api_url} failed for {path}: {resp.text!r}')
          log.warning(f'Note: {os.path.basename(path)!r} might be a private repo')
          cols += ['?']*3
      else:
        log.warning(f'Could not determine API URL for {path}')
        cols += ['']*3
    else:
      # Non-dry-run: try to pull updates
      (rc, stdout, stderr) = run('git pull')
      up_to_date = bool(up_to_date_regexp.search(stdout.strip()))
      log.debug(f'up_to_date: {up_to_date}')
      if not up_to_date:
        (date, sha1, text) = get_last_commit()
        cols += [sha1, date, text]
      else:
        cols += ['']*3
  else:
    # handle non-master, non-main repo
    cols += ['']*3
  log.info(f'cols: {cols}')
  table.add(cols)
  os.chdir(cwd)

print(str(table), end='')
