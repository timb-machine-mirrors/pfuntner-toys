#! /usr/bin/env python3

import os
import time
import signal
import logging
import argparse
import datetime
import subprocess

def handler(signum, stack):
  log.debug('ending due to SIGINT')
  exit(0)

def safe_max(l):
  return max(l) if l else None
  
def getmtime(root, depth=0):
  if dir:
    if os.path.isfile(root):
      return os.path.getmtime(root)
    elif os.path.isdir(root):
      most_recents = []
      for child in os.listdir(root):
        most_recents.append(getmtime(os.path.join(root, child), depth+1))
      most_recent = safe_max(most_recents)
      log.debug('max of {root!r}: {most_recent}'.format(**locals()))
      return (datetime.datetime.fromtimestamp(most_recent) if most_recent else None) if depth == 0 else (most_recent if most_recent else None)
  else:
    return datetime.datetime.fromtimestamp(os.path.getmtime(root))

parser = argparse.ArgumentParser(description='scp a local file when it gets updated')
parser.add_argument('src', help='Source file from which to copy')
parser.add_argument('dest', help='Destination file to which to copy')
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.DEBUG if args.verbose else logging.INFO)

signal.signal(signal.SIGINT, handler)

dir = False
if os.path.isdir(args.src):
  dir = True
elif not os.path.isfile(args.src):
  log.error('Cannot find {args.src!r} - only local source is supported'.format(**locals()))
  exit(1)

log.debug('Found {args.src!r}, dir={dir}'.format(**locals()))
lastcopy = None

while True:
  mtime = getmtime(args.src)
  log.debug('lastcopy: {lastcopy!s}, mtime: {mtime!s}'.format(**locals()))
  if mtime and ((not lastcopy) or (mtime > lastcopy)):
    log.info('Copying {args.src!r} to {args.dest!r}{elapsed}'.format(
      elapsed=', last copy was {elapsed!s} ago'.format(elapsed=mtime-lastcopy) if lastcopy else '', 
      **locals()))
    cmd = [
            'scp',
            '-q',
          ] + \
          ([ '-r' ] if dir else []) + \
          [
            args.src,
            args.dest,
          ]
    log.debug('Executing {cmd}'.format(**locals()))
    p = subprocess.Popen(cmd)
    rc = p.wait()
    if rc != 0:
      log.warning('scp returned {rc}'.format(**locals()))
      exit(1)
    lastcopy = mtime
  log.debug('Checking again in 5 seconds')
  time.sleep(5)
