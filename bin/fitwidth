#! /usr/bin/env python3

import sys
import string
import signal
import logging
import argparse
import datetime

from BrunoUtils import *

verbose = False
def debug(msg):
  if verbose:
    now = datetime.datetime.now()
    sys.stderr.write('{now}: {msg}\n'.format(**locals()))

def process(file):

  while True:
    line = file.readline().expandtabs(4)
    if not line:
      break

    debug('read {line!r}'.format(**locals()))
    line = line.replace('\r', '').replace('\n', '')
    if len(line) <= args.width:
      print(line)
    else:
      if args.beginning:
        print("%s%s" % (ellipses, line[-(args.width-len(ellipses)):]))
      elif args.middle:
        prefix = int((args.width-len(ellipses))/2)
        suffix = args.width - prefix - len(ellipses)
        print("%s%s%s" % (line[:prefix], ellipses, line[-suffix:]))
      elif args.ending:
        print("%s%s" % (line[:args.width-len(ellipses)], ellipses))
      else:
        log.fatal(f'Unexpected mode: {args}')

parser = argparse.ArgumentParser(description='Reform lines to fit your screen width')

group = parser.add_mutually_exclusive_group()
group.add_argument('-m', '--middle', action='store_true', help='Eliminate the middle of lines (default mode)')
group.add_argument('-b', '--beginning', action='store_true', help='Eliminate the beginning of lines')
group.add_argument('-e', '--ending', action='store_true', help='Eliminate the ending of lines')

parser.add_argument('-w', '--width', type=int, default=BrunoUtils.cols(), help='Set specific width (default: {})'.format(BrunoUtils.cols()))
parser.add_argument('files', metavar='file', nargs='*', help='Zero or more files to process')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger()
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

ellipses = " ... "

if not any([args.beginning, args.middle, args.ending]):
  args.middle = True

if args.files:
  for filename in args.files:
    with open(filename, "r") as file:
      process(file)
else:
  if sys.stdin.isatty():
    sys.stderr.write("stdin is not redirected\n")
    exit(1)
  process(sys.stdin)
